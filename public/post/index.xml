<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on [Thinking inside a large box];</title>
    <link>http://blog.benjamin-encz.de/post/</link>
    <description>Recent content in Posts on [Thinking inside a large box];</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Feb 2016 22:24:54 -0800</lastBuildDate>
    <atom:link href="http://blog.benjamin-encz.de/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Validated: A Swift μ-Library for Somewhat Dependent Types</title>
      <link>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</link>
      <pubDate>Thu, 25 Feb 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</guid>
      <description>&lt;p&gt;Today I built &amp;amp; published a μ-library that makes it easier to leverage Swift&amp;rsquo;s type checking system for program verification: &lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;Validated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All Swift developers already use the type system to avoid basic type mismatches (e.g. passing an &lt;code&gt;Int&lt;/code&gt; where a &lt;code&gt;String&lt;/code&gt; is expected), this capability is built into the languge itself.&lt;/p&gt;

&lt;p&gt;A type system can however help verifying more than just the abscence of these simple errors. This requires that developers express constraints and semantics of their programs in types. &lt;strong&gt;&lt;code&gt;Validated&lt;/code&gt; provides a simple way to lift requirements about values into the type system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example from the GitHub Readme:&lt;/p&gt;

&lt;p&gt;You might have a function in your code that only knows how to work with a &lt;code&gt;User&lt;/code&gt; value when the user is logged in. Usually you will implement this requirement in code &amp;amp; add documentation, but you don&amp;rsquo;t have an easy way of expressing this invariant in the type signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Please ever only call with a logged-in user!
func performTaskWithUser(user: User) {
    precondition(
    	user.loggedIn,
    	&amp;quot;It is illegal to call this method with a logged out user!&amp;quot;
    )

	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Validated you can quickly create a new type that describes this requirement in the type system. That makes it impossible to call the function with a logged-out user and it makes the method signature express your invariant (instead of relying on documentation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func performTaskWithUser(user: LoggedInUser) {
	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In short: &lt;code&gt;Validated&lt;/code&gt; allows you to create new types, by taking existing types and adding validations to them. These new types can be used throughout your APIs to express expectations not only about types, but also about values.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very interested in hearing whether this is useful to you &amp;amp; how it could be improved!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;To learn how to use this you should head to GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Write Swift Specs With Quick</title>
      <link>http://blog.benjamin-encz.de/post/how-i-write-swift-specs-with-quick/</link>
      <pubDate>Wed, 24 Feb 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/how-i-write-swift-specs-with-quick/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently tweaked the way I write Quick specs. I came to realize that I was placing a majority of my testing code inside of &lt;code&gt;it&lt;/code&gt; blocks. This &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/7877f99bdfb4be1c82c4804082e99c35d0a93a91/ReactiveCocoaTests/Swift/DisposableSpec.swift#L53-L69&#34;&gt;seems to be common among many code bases that use Quick/Nimble&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I felt that I could gain more readability by focusing on testing expectations within in &lt;code&gt;it&lt;/code&gt; blocks and driving the test code outside.&lt;/p&gt;

&lt;p&gt;I now structure most of my tests in the following way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; block describes the scenario under test&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;beforeEach&lt;/code&gt; block contains code to implement the scenario&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;it&lt;/code&gt; block only validates expectations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result looks somewhat like this, though I have emitted variable declarations in outer scopes for brevity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// describe the scenario under test
context(&amp;quot;when #download is called multiple times with the same URL&amp;quot;) {

	// variables which will be used from `it` blocks
	var downloadDescription: DownloadDescription!

    beforeEach {
    	// code to drive the scenario
        downloadDescription = DownloadDescription(
            url: NSURL(string: &amp;quot;http://test.com/download&amp;quot;)!,
            priority: 500,
            downloadLocation: NSURL(string: &amp;quot;file://&amp;quot;)!
        )

        (1..&amp;lt;10).forEach { _ in
            downloadManager.downloadAsset(downloadDescription)
        }
    }

    // Multiple expectations for that scenario:

    it(&amp;quot;only asks the downloader to download the asset once&amp;quot;) {
        expect(mockDownloader.receivedCallsToStartDownload)
        .to(haveCount(1))
    }

    it(&amp;quot;keeps the ongoing download enqueued&amp;quot;) {
        expect(downloadManager.queue)
        .to(contain(downloadDescription))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For me it is a lot easier to read these tests, the expectations are clearly separated from the code that drives the test.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This approach has two minor drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;it&lt;/code&gt; block needs to reference variables that are set from within the &lt;code&gt;beforeEach&lt;/code&gt; block. We therefore need to declare more variables in the &lt;code&gt;context&lt;/code&gt;/&lt;code&gt;describe&lt;/code&gt; scope which adds some visual clutter.&lt;/li&gt;
&lt;li&gt;Having the code that drives the test in &lt;code&gt;beforeEach&lt;/code&gt; might look a little awkward at first, as most testing frameworks use these hooks to set up a shared test environment; not to drive the test code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;future-improvements:90f0e2cd696d535cbf87455e17a8085e&#34;&gt;Future Improvements?&lt;/h2&gt;

&lt;p&gt;In future it might be nice to be able to place the test driving code directly in the &lt;code&gt;context&lt;/code&gt; block. Something along these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context(&amp;quot;when multiplying two numbers&amp;quot;) {
	let i = 2 * 2

    it(&amp;quot;stores the correct result&amp;quot;) {
    	expect(i).to(equal(4))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I believe this isn&amp;rsquo;t possible, because Quick can&amp;rsquo;t register the top-level code within &lt;code&gt;context&lt;/code&gt; block to run as part of the tests, though I haven&amp;rsquo;t looked at the implementation in detail.&lt;/p&gt;

&lt;p&gt;This would mitigate the two drawbacks of my current approach and improve the readability of the specs a little more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For now I&amp;rsquo;m happy with the &lt;code&gt;beforeEach&lt;/code&gt; approach.&lt;/strong&gt; How do you write your Swift test suites?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing ReSwift</title>
      <link>http://blog.benjamin-encz.de/post/introducing-reswift/</link>
      <pubDate>Wed, 20 Jan 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/introducing-reswift/</guid>
      <description>&lt;p&gt;For the last two months I have been actively working on Swift Flow with the goal of bringing the ideas of the Flux and Redux libraries to Swift developers.&lt;/p&gt;

&lt;p&gt;At about the same &lt;a href=&#34;https://twitter.com/ARendtslev&#34;&gt;@ARendtslev&lt;/a&gt; started ReduxKit, which had the goal of implementing Redux in Swift. Soon he was joined by &lt;a href=&#34;https://twitter.com/karlbowden&#34;&gt;@karlbowden&lt;/a&gt; who made significant contributions to the project (and provided amazing build and documentation infrastructure for ReduxKit and Swift Flow).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we have joined forces under a new name - &lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift&lt;/a&gt; [ri:swɪft]&lt;/strong&gt;. To put it in Karl&amp;rsquo;s words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Swift Flow has adopted the name ReSwift and moved to it&amp;rsquo;s new home as a nod to it&amp;rsquo;s Redux roots that remain at it&amp;rsquo;s core. Going forward, our combined efforts will be focused on ReSwift and surrounding tooling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The core of ReSwift is close to a 1.0 release, however the exiting stuff is in its infancy. We will be working on declarative routing, time traveling, state persistence &amp;amp; restoration and more.&lt;/p&gt;

&lt;p&gt;My hope is that we can provide a viable alternative to &lt;em&gt;MVC by default&lt;/em&gt; on iOS by developing a solid core library with great extensions and developer tools.&lt;/p&gt;

&lt;p&gt;Either way, it will be a great learning experience for us and everyone involved!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in the core ideas behind ReSwift, you can &lt;a href=&#34;https://realm.io/news/benji-encz-unidirectional-data-flow-swift/&#34;&gt;watch my talk from the SLUG Meetup last December&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you missed the link: &lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift is on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convenient Error Handling in Swift</title>
      <link>http://blog.benjamin-encz.de/post/convenient-error-handling-in-swift/</link>
      <pubDate>Wed, 18 Nov 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/convenient-error-handling-in-swift/</guid>
      <description>

&lt;p&gt;Swift 2 introduced an error handling mechanism that includes &lt;a href=&#34;link to my post&#34;&gt;backwards compatibility with Objective-C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is great news, the new mechanism is a lot stricter.&lt;/strong&gt; Long gone are the days in which one could ignore errors by lavishly throwing &lt;code&gt;nil&lt;/code&gt; at methods that expect a pointer to an &lt;code&gt;NSError&lt;/code&gt; variable.&lt;/p&gt;

&lt;h1 id=&#34;does-every-error-deserve-an-individual-catch:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Does Every Error Deserve an Individual Catch?&lt;/h1&gt;

&lt;p&gt;Swift will require you to provide an error handler when you call a method that &lt;code&gt;throws&lt;/code&gt;, unless you resort to the &lt;code&gt;try?&lt;/code&gt; or &lt;code&gt;try!&lt;/code&gt; operator. Here&amp;rsquo;s an example of &lt;code&gt;try!&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try! NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this unfaithful approach an unexpectedly occurring error will cause a crash. You should only use &lt;code&gt;try!&lt;/code&gt; if your app cannot continue to work sensibly if the attempted operation fails - i.e. if you fail load the database model for your application from disk.&lt;/p&gt;

&lt;p&gt;Alternatively you can use &lt;code&gt;try?&lt;/code&gt;, which will transform the result of the operation you are performing into an optional. A successful operation will yield a value, a failed operation will yield &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let data = try? NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach all details of an error that occurred will be swallowed entirely which is suboptimal in many cases as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is it worth it writing a custom error handler for every error producing function you call? I don&amp;rsquo;t think so.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many kinds of errors deserve your full attention, you can write code to recover from them or, at the very least, notify the user about unexpected behavior with a meaningful error message.&lt;/p&gt;

&lt;p&gt;Other errors are less suitable for custom error handlers. You cannot recover from them with reasonable effort and they don&amp;rsquo;t affect the user experience. The user will not want to be informed about them. Here are examples of errors that, in my opinion, fall into this category:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching a downloaded image on disk fails&lt;/li&gt;
&lt;li&gt;Your app cannot connect to the ad service you are using&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the complexity of your app, there might be hundreds of such operations.&lt;/p&gt;

&lt;p&gt;Even though you can&amp;rsquo;t recover from these errors, you should definitely keep track of them through some sort of logging mechanism! How can this be done without writing many individual error handlers?&lt;/p&gt;

&lt;h1 id=&#34;a-good-compromise:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;A Good Compromise?&lt;/h1&gt;

&lt;p&gt;Can we strike a balance between convenience and due diligence? I believe so. In my latest side project I implemented a default error handler that deals with errors that, for one reason or another, don&amp;rsquo;t deserve a custom error handler.&lt;/p&gt;

&lt;p&gt;This error handler doesn&amp;rsquo;t swallow the error completely. Instead, it logs the errors using my analytics service. This behavior is useful for any type of error that might occur in my app. It&amp;rsquo;s the largest common denominator of error handling.&lt;/p&gt;

&lt;p&gt;This is what using the API looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let errorHandler = ErrorHandler()

let fileContent = errorHandler.wrap {
    return try NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the main characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We wrap the call to call to the error producing function, along with the &lt;code&gt;try&lt;/code&gt; keyword, into a closure that gets handed to &lt;code&gt;errorHandler.wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the closure returns a value, then &lt;code&gt;errorHandler.wrap&lt;/code&gt; will pass it through to its caller&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errorHandler.wrap&lt;/code&gt; always returns an optional type, indicating that the wrapped operation might fail and return &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above example the &lt;code&gt;fileContent&lt;/code&gt; variable has a type of &lt;code&gt;String?&lt;/code&gt;.  We can use this variable in subsequent operations. While we need to check if the optional contains a value before using it, we can ignore the details of a potential error that was thrown. In this case &lt;code&gt;errorHandler.wrap&lt;/code&gt; acts as a glorified version of &lt;code&gt;try?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In most cases I use the default error handler when calling functions without a return value. In these cases the value of the error handler becomes more obvious:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
let errorHandler = ErrorHandler()

errorHandler.wrap {
	try cache.storeImage(image)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can perform a failable operation without writing any code that deals with errors or optional return values, while still capturing details about errors that might occur.&lt;/p&gt;

&lt;h1 id=&#34;implementation-of-the-default-error-handler:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Implementation of the Default Error Handler&lt;/h1&gt;

&lt;p&gt;The implementation of the error handler is very slim, here&amp;rsquo;s the entire code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ErrorHandler {

    func wrap&amp;lt;ReturnType&amp;gt;(@noescape f: () throws -&amp;gt; ReturnType?) -&amp;gt; ReturnType? {
        do {
            return try f()
        } catch let error {
            logError(error)
            return nil
        }
    }

    func logError(error: ErrorType) {
        let stackSymbols = NSThread.callStackSymbols()
        print(&amp;quot;Error: \(error) \n Stack Symbols: \(stackSymbols)&amp;quot;)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;wrap&lt;/code&gt; function takes a function that can &lt;code&gt;throw&lt;/code&gt; and that can provide a return type. It executes the function within a &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;try&lt;/code&gt; block. If the operation is successful it returns the return value of the function. If an error occurs the catch block calls the &lt;code&gt;logError&lt;/code&gt; function and then returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;logError&lt;/code&gt; function should be customized to your needs - as an example I am printing the current stack trace along with the error message. In a production environment you would likely want to log these messages using an analytics service such as Fabric or Mixpanel.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Good error handling is incredibly important for a good user experience - I wanted to make the process as easy as possible. Now my analytics dashboard will inform me about any unhandled error that occurs in production. Going from there I can improve error handling in my apps by adding custom handlers for the most frequent errors.&lt;/p&gt;

&lt;p&gt;I definitely encourage you and myself to handle as many errors as sensible individually - but I believe there&amp;rsquo;s a large number of potential errors that are suitable for this generic error handling scheme.&lt;/p&gt;

&lt;p&gt;You can find the Source Code for this blog post &lt;a href=&#34;https://github.com/Ben-G/DefaultErrorHandlerSwift&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How do you tackle error handling? I would love to hear from you!&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/antitypical/Result/blob/master/Result/Result.swift#L153-L159&#34;&gt;&lt;code&gt;Result.materialize&lt;/code&gt;&lt;/a&gt; for inspiring my &lt;code&gt;wrap&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://twitter.com/morganchen96&#34;&gt;morganchen96&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/Javi&#34;&gt;javi&lt;/a&gt; for providing feedback on drafts of this post&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Flux Inspired Architecture for iOS</title>
      <link>http://blog.benjamin-encz.de/post/a-flux-inspired-architecture-for-ios/</link>
      <pubDate>Sat, 12 Sep 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/a-flux-inspired-architecture-for-ios/</guid>
      <description>&lt;p&gt;This year I spoke at 360iDev about &amp;ldquo;Safer Swift Code with Value Types&amp;rdquo;. The goal of the talk was to explore an architecture that uses immutable value types for the model layer.&lt;/p&gt;

&lt;p&gt;After reviewing an earlier version of this talk with my developer friend &lt;a href=&#34;https://twitter.com/devknoll&#34;&gt;Gerald Monaco&lt;/a&gt;, who is a big fan of Facebook&amp;rsquo;s open source technologies (React, Flux, etc.), I decided to take a look at how a &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt;-inspired architecture could be applied to an iOS application.&lt;/p&gt;

&lt;p&gt;It turns out that the topic is fairly dense for 45 minutes, but I hope you can extract some interesting ideas from the talk! &lt;a href=&#34;http://www.scopelift.co/blog/360idev-redux&#34;&gt;I know of at least one person that did enjoy it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the slides and the recoding below and the code for this talk is on &lt;a href=&#34;https://github.com/Ben-G/Twitter-Swift-Flux&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;40fe96de88ee419785be74589f52998c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/137543393&#34; width=&#34;500&#34; height=&#34;281&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you have any I feedback, I&amp;rsquo;d love to hear it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift Error Handling and Objective-C Interop in Depth</title>
      <link>http://blog.benjamin-encz.de/post/swift-error-handling-and-objective-c-interop-in-depth/</link>
      <pubDate>Thu, 23 Jul 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/swift-error-handling-and-objective-c-interop-in-depth/</guid>
      <description>

&lt;p&gt;For the impatient reader:&lt;/p&gt;

&lt;h1 id=&#34;tl-dr:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ErrorType&lt;/code&gt; protocol has hidden requirements that are automatically fullfilled if you use an &lt;code&gt;enum&lt;/code&gt; to implement the protocol&lt;/li&gt;
&lt;li&gt;Objective-C methods can only be translated to Swift&amp;rsquo;s error handling mechanism if they return Objective-C objects or boolean values&lt;/li&gt;
&lt;li&gt;Swift will invoke the &lt;code&gt;catch&lt;/code&gt; block if the Objective-C method returns &lt;code&gt;nil&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;, independent of whether an &lt;code&gt;NSError&lt;/code&gt; was produced or not&lt;/li&gt;
&lt;li&gt;If an Objective-C method produces an &lt;code&gt;NSError&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; returns a value the &lt;code&gt;catch&lt;/code&gt; blocks is not invoked and the error cannot be retrieved&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ben-G/FunWithErrors&#34;&gt;GitHub project with examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;fun-with-errors:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Fun With Errors&lt;/h1&gt;

&lt;p&gt;Recently I&amp;rsquo;ve spent some time looking into the new error handling mechanism in Swift in depth. I&amp;rsquo;ve especially focused on its interoperability with Objective-C which is documented fairly lightly as of now (Xcode 7 Beta 4).&lt;/p&gt;

&lt;p&gt;It started with the following lines of code, in which I tried to experiment with creating a custom error type using a &lt;code&gt;struct&lt;/code&gt; (instead of the canonical example in which we use an &lt;code&gt;enum&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct MyErrorType: ErrorType {
  var errorDetails: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the following compiler error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type &#39;MyErrorType&#39; does not conform to protocol &#39;ErrorType&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That was pretty surprising, given that the protocol definition for &lt;code&gt;ErrorType&lt;/code&gt; in Xcode looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol ErrorType {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hidden-protocol-requirements:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Hidden Protocol Requirements&lt;/h2&gt;

&lt;p&gt;The error message revealed two hidden protocol requirements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/rlx8vruu9ecdqko/error.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This means the actual protocol definition for &lt;code&gt;ErrorType&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol ErrorType {
    var _domain: String
    var _code: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using an &lt;code&gt;enum&lt;/code&gt; to define a custom &lt;code&gt;ErrorType&lt;/code&gt; these fields are automatically generated and populated (this is discussed in WWDC 2015 Session 402, 08:20 min).&lt;/p&gt;

&lt;p&gt;These two fields, &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt;, are also provided by &lt;code&gt;NSError&lt;/code&gt;, so I assume these fields are primarily used for compatibility with Objective-C.&lt;/p&gt;

&lt;p&gt;You might wonder how these fields are populated when using a custom &lt;code&gt;ErrorType&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Me too! So let&amp;rsquo;s create this simple error type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum MyError: ErrorType {
  case BasicError, FatalError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And write a throwing function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func badFunction() throws {
  throw B.FatalError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Along with a catch block to print the &lt;code&gt;_code&lt;/code&gt; and &lt;code&gt;_domain&lt;/code&gt; members of the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
  try badFunction()
} catch let error as MyError {
  print(&amp;quot;domain: \(error._domain) code:\(error._code)&amp;quot;)
} catch {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the result that you will see in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;domain: FunWithErrors.MyError code: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_domain&lt;/code&gt; member matches the module name in which the custom &lt;code&gt;ErrorType&lt;/code&gt; was defined and the &lt;code&gt;_code&lt;/code&gt; matches the raw enum value (&lt;code&gt;BasicError&lt;/code&gt; = 0, &lt;code&gt;FatalError&lt;/code&gt; = 1).&lt;/p&gt;

&lt;p&gt;Nothing too exciting here, but an interesting look under the covers. Next, let&amp;rsquo;s see how Objective-C&amp;rsquo;s &lt;code&gt;NSError&lt;/code&gt; works with Swift&amp;rsquo;s error handling.&lt;/p&gt;

&lt;h2 id=&#34;throwing-from-objective-c:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Throwing From Objective-C&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s build the simplest throwing Objective-C method following this rule in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the last non-block parameter of an Objective-C method is of type &lt;code&gt;NSError **&lt;/code&gt;, Swift replaces it with the throws keyword, to indicate that the method can throw an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;methods-that-return-void:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Methods That Return &lt;code&gt;void&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is a simple Objective-C class that has a method that should throw:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ErrorProducer : NSObject

+ (void)doWithError:(NSError**)error;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when calling this method from Swift we need to provide an &lt;code&gt;NSErrorPointer&lt;/code&gt; and the method does not throw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/zz8ev7j00vxz21k/doesntThrow.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some reason the automatic translation promised by Swift is not working in this case.&lt;/p&gt;

&lt;p&gt;After mutating the method signature multiple times, I found out that the method is &lt;strong&gt;only translated to Swift&amp;rsquo;s error handling mechanism if it returns an Objective-C object or a boolean value&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;methods-that-return-objective-c-objects-or-boolean-values:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Methods That Return Objective-C Objects or Boolean Values&lt;/h3&gt;

&lt;p&gt;This method for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can be used from Swift as expected:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/dqoauugwun16t4k/doesThrow.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s provide a simple implementation for this method to see how we can catch the thrown &lt;code&gt;NSError&lt;/code&gt; in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error {
  if (error) {
    *error = [NSError errorWithDomain:@&amp;quot;FunWithErrors&amp;quot; code:0 userInfo:nil];
  }

  return @&amp;quot;&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on the call side we provide a &lt;code&gt;do/catch&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
  try ErrorProducer.provideString()
} catch let error as NSError {
  print(&amp;quot;domain: \(error.domain) code: \(error.code)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code Swift code&amp;hellip; &lt;strong&gt;nothing will be printed to the console!&lt;/strong&gt; The catch block will never be reached.&lt;/p&gt;

&lt;p&gt;It seems that the return value of an empty string (&lt;code&gt;@&amp;quot;&amp;quot;&lt;/code&gt;) is indicating that the method returned successfully, even though an error was assigned to the error pointer.&lt;/p&gt;

&lt;p&gt;If we change the implementation of the Objective-C method to return &lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;catch&lt;/code&gt; block is invoked correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error {
  if (error) {
    *error = [NSError errorWithDomain:@&amp;quot;FunWithErrors&amp;quot; code:0 userInfo:nil];
  }

  return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From Swift&amp;rsquo;s perspective this makes sense. Every Swift function that &lt;code&gt;throws&lt;/code&gt; will return to the caller without providing the expected return value. In Objective-C however, &lt;code&gt;NSError&lt;/code&gt; is sometimes used as an &lt;em&gt;additional&lt;/em&gt; return value indicating that some minor issue occurred, while the main return value could still be created as expected. &lt;strong&gt;In my understanding these &lt;code&gt;NSError&lt;/code&gt; instances cannot be retrieved from Swift.&lt;/strong&gt; It will be interesting to see if and how existing Objective-C frameworks will be modernized to accomodate for this.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more interesting case I want to look at: It almost seems like the return value is the most important factor for determining whether an Objective-C method throws or not. What happens if we return &lt;code&gt;nil&lt;/code&gt; without assigning an &lt;code&gt;NSError&lt;/code&gt; to the error pointer?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideNilStringNoErrorWithError:(NSError**)error {
  return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This indeed throws as well! Swift provides us with an instance of &lt;code&gt;_SwiftNativeNSError&lt;/code&gt;, the &lt;code&gt;domain&lt;/code&gt; of the produced error is &lt;code&gt;Foundation._GenericObjCError&lt;/code&gt; and the &lt;code&gt;code&lt;/code&gt; is 0.&lt;/p&gt;

&lt;p&gt;As was pointed out to me, the Cocoa documentation on error handling in Objective-C discusses this emphasis on the return value of a method that can error out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When dealing with errors passed by reference, it’s important to test the return value of the method to see whether an error occurred, as shown above. Don’t just test to see whether the error pointer was set to point to an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/ErrorHandling/ErrorHandling.html&#34;&gt;Programming with Objective-C | Dealing with Errors&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;As of today (Xcode 7 Beta 4) the interopability between Swift&amp;rsquo;s error handling and Objective-C is lacking some documentation. Here are some interesting findings discussed throughout the blog post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objective-C methods can only be translated to Swift&amp;rsquo;s error handling mechanism if they return Objective-C objects or boolean values&lt;/li&gt;
&lt;li&gt;Swift will invoke the &lt;code&gt;catch&lt;/code&gt; block if the Objective-C method returns &lt;code&gt;nil&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;, independent of whether an &lt;code&gt;NSError&lt;/code&gt; was produced or not&lt;/li&gt;
&lt;li&gt;If an Objective-C method produces an &lt;code&gt;NSError&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; returns a value, the &lt;code&gt;catch&lt;/code&gt; blocks is not invoked and the error cannot be retrieved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a small project that contains all of the examples used in this blog post &lt;a href=&#34;https://github.com/Ben-G/FunWithErrors&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks &lt;a href=&#34;https://twitter.com/warrenm&#34;&gt;@warrenm&lt;/a&gt; for providing feedback and improving this post!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;find me on twitter&lt;/a&gt;, too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS 9 Detects Cycles in Layout Trees</title>
      <link>http://blog.benjamin-encz.de/post/ios-9-detects-cycles-in-layout-trees/</link>
      <pubDate>Thu, 09 Jul 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/ios-9-detects-cycles-in-layout-trees/</guid>
      <description>

&lt;p&gt;A couple of months ago I was faced with an issue that was fairly hard to debug:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hackathons are a great place to see noteworthy issues. Yesterday&amp;#39;s highlight: endless recursion in Storyboard &lt;a href=&#34;https://twitter.com/LAHacks&#34;&gt;@LAHacks&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Encz (@benjaminencz) &lt;a href=&#34;https://twitter.com/benjaminencz/status/584757451469127680&#34;&gt;April 5, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;What I found out, after about 30 minutes of debugging, was the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/kcjgm6sgftmxo5y/accessoryView.png?dl=1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The hackathon attendee hat mistakenly set the &lt;code&gt;accessoryView&lt;/code&gt; of a &lt;code&gt;UITableViewCell&lt;/code&gt; to the &lt;code&gt;UITableView&lt;/code&gt; in which the cell was contained - causing an endless recursion during the first layout cycle.&lt;/p&gt;

&lt;p&gt;This however wasn&amp;rsquo;t immediately obvious to me since the symptom was an exception within the &lt;code&gt;cellForRowAtIndexPath:&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;fixed-in-ios-9:9df3400d24ce9ec6d67d1afbc4f7edb2&#34;&gt;Fixed in iOS 9&lt;/h2&gt;

&lt;p&gt;Today I wanted to see if it is possible to reproduce the issue with Xcode 7 Beta 3.&lt;/p&gt;

&lt;p&gt;Indeed, I can still cause the crash. However, instead of causing a stack overflow the app now terminates because &lt;code&gt;CALayer&lt;/code&gt; throws an exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CrashTableViewCell[33582:11713163] *** Terminating app due to uncaught exception &#39;CALayerInvalid&#39;, reason: &#39;layer &amp;lt;CALayer: 0x7f875943c730&amp;gt; is a part of cycle in its layer tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t find any reference to this exception in a Stack Overflow exception so I assume the cycle detection is new in iOS 9.&lt;/p&gt;

&lt;p&gt;This fix will likely save some headaches!&lt;/p&gt;

&lt;p&gt;It also serves as a good real world example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm&#34;&gt;detecting cycles in directed graphs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk: Introduction to FRP on iOS</title>
      <link>http://blog.benjamin-encz.de/post/talk-introduction-to-frp-on-ios/</link>
      <pubDate>Sat, 30 May 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/talk-introduction-to-frp-on-ios/</guid>
      <description>&lt;p&gt;Back in April I gave a talk at &lt;a href=&#34;http://www.meetup.com/nsmeetup/events/220950179/&#34;&gt;NSMeetup in San Francisco&lt;/a&gt; on Functional Reactive Programming on iOS.&lt;/p&gt;

&lt;p&gt;The talk discusses the idea &amp;amp; motivation behind FRP and dives into some practical examples using Reactive Cocoa 2.x. The examples are based on a small &lt;a href=&#34;https://github.com/Ben-G/PeopleCRM&#34;&gt;demo app&lt;/a&gt; that I built for that talk.&lt;/p&gt;

&lt;p&gt;Once Reactive Cocoa 3.0 has a final release I will likely update this talk to Swift - especially generics are extremely useful when working with the FRP toolset.&lt;/p&gt;

&lt;p&gt;You can find a recording of the talk on &lt;a href=&#34;https://www.youtube.com/watch?v=I6mXJwFQ1YY&#34;&gt;YouTube&lt;/a&gt;. The slides are embedded here and available through &lt;a href=&#34;https://speakerdeck.com/benjamin_encz/functional-reactive-programming-on-ios&#34;&gt;Speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;066b72a201f74767bbb16b29fc767c51&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Breaking Swift with NSObject and Generics</title>
      <link>http://blog.benjamin-encz.de/post/breaking-the-swift-compiler-with-generics/</link>
      <pubDate>Thu, 19 Feb 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/breaking-the-swift-compiler-with-generics/</guid>
      <description>

&lt;p&gt;Today, while trying to implement a generic data source in Swift, I ran into my first Swift compiler segmentation fault, yay (looking at &lt;a href=&#34;http://openradar.appspot.com/search?query=segmentation+fault+swift&#34;&gt;Open Radar&lt;/a&gt; there seem to be many out there)!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I was trying to implement&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ArrayDataSource&amp;lt;T&amp;gt; : NSObject {

  private var array: Array&amp;lt;T&amp;gt;

  public init(array:Array&amp;lt;T&amp;gt;) {
    self.array = array
  }
}


extension ArrayDataSource : UITableViewDataSource {
  public func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
    return 0
  }

  public func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
    return UITableViewCell()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A class that takes an array and implements &lt;code&gt;UITableViewDataSource&lt;/code&gt; using the content of that array (an idea that&amp;rsquo;s discussed in &lt;a href=&#34;http://www.objc.io/issue-1/lighter-view-controllers.html&#34;&gt;objc.io issue #1&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;the-error:ad4d4ff830a667f9bf3648d7b19cfe5c&#34;&gt;The Error&lt;/h1&gt;

&lt;p&gt;As you can see I didn&amp;rsquo;t get very far before running into the compiler error. When you compile the above code (in Xcode 6.1.1 or Xcode 6.3) you&amp;rsquo;ll see the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Segmentation Fault 11: While emitting IR for source file /Users/benjaminencz/Development/Private/OSS/ListKitDemo/ListKit/ArrayDataSource.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Along with a nice stack trace from swift compiler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Swift_Crash.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;finding-a-generic-reproducable-example:ad4d4ff830a667f9bf3648d7b19cfe5c&#34;&gt;Finding a generic reproducable example&lt;/h1&gt;

&lt;p&gt;Since this issue exists in both Xcode 6.1.1 and Xcode 6.3 I wanted to file a bug report to make sure this gets resolved in future. I played around with different ways to fix the issue, here are two simple ones that worked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move the conformance to the &lt;code&gt;UITableViewDataSource&lt;/code&gt; protocol into the class definition instead of the class extension&lt;/li&gt;
&lt;li&gt;Remove the generic type from &lt;code&gt;ArrayDataSource&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To actually file a bug report I needed to come up with a generalized, short piece of code that can reproduce the issue. After trying multiple combinations I found this to be the one that describes the problem best:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class D&amp;lt;T&amp;gt;: NSObject {}

extension D: NSObjectProtocol {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two lines are enough code to cause the segmentation fault. The underlying issue seems to be a combination of subclassing from &lt;code&gt;NSObject&lt;/code&gt;, using generics and conforming to &lt;code&gt;NSObjectProtocol&lt;/code&gt; in a class extension while the actual implementation of &lt;code&gt;NSObjectProtocol&lt;/code&gt; happens through inheritance of &lt;code&gt;NSObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t get this minimalistic example to break with any other combination of protocols and subclassing, it seems to be a problem specific to &lt;code&gt;NSObject&lt;/code&gt;. If you find a more general case that causes the segmentation fault, I&amp;rsquo;d love to hear from you.&lt;/p&gt;

&lt;p&gt;For now I have filed a bug report with Apple (19889552) and an &lt;a href=&#34;http://openradar.appspot.com/19889552&#34;&gt;Open Radar Issue&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;I didn&#39;t know that&#34; is the best way to learn</title>
      <link>http://blog.benjamin-encz.de/post/i-didnt-know-that-is-the-best-way-to-learn/</link>
      <pubDate>Thu, 05 Feb 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/i-didnt-know-that-is-the-best-way-to-learn/</guid>
      <description>&lt;p&gt;This is no original thought. Nevertheless I&amp;rsquo;ve been thinking about it often enough to make it worth spending a few minutes framing it in my own words.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently working as a Software Engineer. According to Wikipedia that makes me a &lt;a href=&#34;http://en.wikipedia.org/wiki/Knowledge_worker&#34;&gt;Knowledge Worker&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Knowledge workers are workers whose main capital is knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most Software Engineers that I&amp;rsquo;ve met in my short career know that knowledge is their main asset. Unfortunately this can have very negative side effects.&lt;/p&gt;

&lt;p&gt;Being paid for having knowledge in a scientific field or a certain technology makes it very hard to say &amp;ldquo;I didn&amp;rsquo;t know that&amp;rdquo;. After all, if knowledge is your main asset how could you admit the lack thereof?&lt;/p&gt;

&lt;p&gt;I believe that being honest about what we (believe to) know and what we don&amp;rsquo;t is essential for our learning process as professionals. If it was possible to visualize the knowledge of any two people working in the same profession it would probably look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/knowledge.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the fields we are working today the things we &lt;em&gt;could&lt;/em&gt; know about are growing faster than anyone can learn them. We are essentially knowing less and less about our field, every single day.&lt;/p&gt;

&lt;p&gt;Whatever sort of formal education you have, that portion is only a very small (yet very important) part of your entire knowledge. The rest of your knowledge is based on your personal experience. The chance that you know something your colleague does not know and vice versa is very high, for any given topic and for any point in time.&lt;/p&gt;

&lt;p&gt;I think there are three potential reactions when being confronted with something you don&amp;rsquo;t know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nod and pretend you know about it&lt;/li&gt;
&lt;li&gt;Nod, pretend you know about it and go read about it afterwards&lt;/li&gt;
&lt;li&gt;Admit that you never heard about it and extract as much knowledge as possible from the conversation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong. Reading is great and I think we all should thrive to increase our knowledge in whichever field we are working in. But if you have the chance to learn something you are interested in from a person who knows about it at the small cost of a &amp;ldquo;I didn&amp;rsquo;t know that&amp;rdquo; it wouldn&amp;rsquo;t be smart to let that opportunity pass by.&lt;/p&gt;

&lt;p&gt;Learning from other people is incredibly powerful and one the fastest ways to gain new knowledge. Smart people are happy to share their knowledge. You should ask as many questions as possible.&lt;/p&gt;

&lt;p&gt;While writing this I felt like I should come up with a new definition of a knowledge worker, one that is closer to the reality of explosive information growth in the 21st century:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Knowledge workers are workers with a strong understanding of concepts in their field and an ability to quickly acquire new knowledge by the most efficient means.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You know a little, you know a lot. Make the best out of this contradiction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching iOS devices and the Keychain</title>
      <link>http://blog.benjamin-encz.de/post/switching-ios-devices-and-the-keychain/</link>
      <pubDate>Sun, 14 Dec 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/switching-ios-devices-and-the-keychain/</guid>
      <description>&lt;p&gt;Unfortunately some of my &lt;a href=&#34;http://www.movieloggr.com/&#34;&gt;MovieLoggr&lt;/a&gt; users ran into the following issue: After switching to a new phone and restoring it from a Backup MovieLoggr would behave unexpectetly (and in some cases crash) because the App could no longer access the user&amp;rsquo;s password and unfortunately did not handle this gracefully.&lt;/p&gt;

&lt;p&gt;Typically iOS applications store passwords in the encrypted &lt;em&gt;Keychain&lt;/em&gt;. When creating unencrypted backups, which is the default for creating backups with iTunes, the iOS Keychain is not stored (it is stored if you create an encrypted one or use iCloud backups).  This means, after restoring your new device from a backup, all of your apps that now run on your new device can no longer access the passwords they have securely stored on your previous device.&lt;/p&gt;

&lt;p&gt;When using the Keychain to store passwords you should be able to handle this case and request the user to re-enter their account credentials when restoring your app from an unecrypted backup.&lt;/p&gt;

&lt;p&gt;If the case that I described occurs, the Keychain will inform you that the password you are looking for could not be found, this is where you need to ask the user to re-enter their password. You can reproduce this case for testing purposes by choosing a different &lt;em&gt;ServiceName&lt;/em&gt; for accessing the Keychain than you used for creating the Keychain entry.&lt;/p&gt;

&lt;p&gt;P.S.: Apple&amp;rsquo;s Keychain API is pretty arcane so I&amp;rsquo;m using &lt;a href=&#34;https://github.com/soffes/sskeychain&#34;&gt;SSKeychain&lt;/a&gt; which provides a nice abstraction instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH for private and work account on a Mac</title>
      <link>http://blog.benjamin-encz.de/post/using-ssh-with-multiple-accounts/</link>
      <pubDate>Tue, 18 Nov 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/using-ssh-with-multiple-accounts/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I&amp;rsquo;m not a huge fan of configuring software; I&amp;rsquo;m primarily writing this to remember it for the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using SSH instead of HTTPS to authenticate against services such as GitHub, Bitbucket or Heroku is very convenient, instead of typing a password for every interaction Mac OS simply exchanges SSH keys behind the scene. However, one can run into trouble when trying to use multiple accounts of the same service with SSH authentication.&lt;/p&gt;

&lt;p&gt;In this brief write-up I want to discuss how to set up multiple Bitbucket accounts with different associated SSH Keys.&lt;/p&gt;

&lt;h2 id=&#34;two-bitbucket-ssh-keys-on-one-machine:641c6294d4c21efa1578d7a06f188378&#34;&gt;Two Bitbucket SSH keys on one machine&lt;/h2&gt;

&lt;p&gt;The key for setting up the SSH client to use multiple SSH keys for the same service is the SSH config file which resides in: &lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The config files remembers hosts to which you have previously connected using SSH and stores the associated SSH Key for each of them.&lt;/p&gt;

&lt;p&gt;Per default SSH will use your main SSH key, which is typically stored in &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt;, to authenticate with servers and services.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s assume you have two Bitbucket accounts, one for work and a second private account. When you did set up your private account you added &lt;code&gt;id_rsa&lt;/code&gt; as your public SSH key. Now when you try to add the same key to your work account Bitbucket will display an error because that public key is already associated with a different account. Bitbucket will have to identify your account based on the provided SSH key, therefore each SSH key can only be used for a single account.&lt;/p&gt;

&lt;p&gt;This means you will need to create a second pair of SSH keys for use with your work account using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;your_email@example.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Terminal will prompt you for a file name for that new key - you can choose one that identifies the key as a work SSH key (e.g. company name). Now you have a second SSH key and can add that one to your work account on Bitbucket.&lt;/p&gt;

&lt;h2 id=&#34;serving-the-right-key:641c6294d4c21efa1578d7a06f188378&#34;&gt;Serving the right key&lt;/h2&gt;

&lt;p&gt;Now one problem remains. If you clone a Bitbucket repository, authenticating with SSH, SSH will by default always serve the &lt;code&gt;id_rsa&lt;/code&gt; key which is associated with your personal account - that means you still won&amp;rsquo;t be able to authenticate yourself with your work account and won&amp;rsquo;t be able to interact with work repositories using SSH authentication.&lt;/p&gt;

&lt;p&gt;Currently your SSH config file (&lt;code&gt;~/.ssh/config&lt;/code&gt;) should look like similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host bitbucket.org
    IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time you connect to the host &lt;code&gt;bitbucket.org&lt;/code&gt; you serve the &lt;code&gt;id_rsa&lt;/code&gt; key, this setting has been established when you connected to this host the first time.&lt;/p&gt;

&lt;p&gt;We have two options at this point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;specify which SSH key we want to send every time we connect to the remote server&lt;/li&gt;
&lt;li&gt;change our SSH config file to server the correct SSH key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second option should mostly be preferred.&lt;/p&gt;

&lt;h2 id=&#34;using-host-alias-names:641c6294d4c21efa1578d7a06f188378&#34;&gt;Using host alias names&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve just seen that the SSH client determines the SSH key based on the host name. That means we need two different host names for &lt;code&gt;bitbucket.org&lt;/code&gt; depending on whether we want to use the personal or private account. Luckily the SSH config file lets us declare host aliases in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host bitbucket.personal
 HostName bitbucket.org
 IdentityFile ~/.ssh/id_rsa
 IdentitiesOnly yes

Host bitbucket.work
 HostName bitbucket.org
 IdentityFile ~/.ssh/makegameswithus
 IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first line of each entry we store the alias. This can be any string you want, you&amp;rsquo;ll need to use it whenever you connect to the actual host.&lt;/p&gt;

&lt;p&gt;The actual host name is stored in the second line. When you connect to a server using the string &lt;code&gt;bitbucket.work&lt;/code&gt; it will be replaced by the actual host name &lt;code&gt;bitbucket.org&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the SSH client will know to send the specified &lt;code&gt;makegameswithus&lt;/code&gt; SSH key instead of the default one.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;IdentitiesOnly yes&lt;/code&gt; entry defines that only the specified SSH key is served and not any other SSH keys that happen to be loaded by the SSH client at the time of the request.&lt;/p&gt;

&lt;p&gt;Now, whenever you want to clone a work repository you can use your defined alias as the host name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@bitbucket.work:repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the SSH client will serve your work SSH key allowing you to authenticate with the Bitbucket server. Hooray!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The downside of Web APIs</title>
      <link>http://blog.benjamin-encz.de/post/the-downside-of-web-apis/</link>
      <pubDate>Sun, 10 Aug 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/the-downside-of-web-apis/</guid>
      <description>

&lt;p&gt;Web APIs have done a lot for the world of technology. Services that have formerly been isolated islands can now be connected through a few simple HTTP Requests. Posting to Facebook on every GitHub commit? Printing a Postcard as soon as a new Photo is uploaded to a Dropbox folder? Basically anything is possible through Web Services.&lt;/p&gt;

&lt;p&gt;Another great aspect of Web Services is that all the implementation details of these powerful platforms are hidden behind a well documented HTTP Interface allowing Developers to build products that integrate with multiple services in the matter of hours - without establishing old-school SQL Connections and writing complicated Database Queries.&lt;/p&gt;

&lt;h2 id=&#34;now-what-are-the-downsides-then:0db755954643c1ac111ee02a99a5dc05&#34;&gt;Now what are the downsides then?&lt;/h2&gt;

&lt;p&gt;Simple is good. But simple also means less flexibility and less power. Accessing information through Web APIs can often be very inefficient. Many Web APIs embrace patterns that can lead to poor performance of a Web Application.&lt;/p&gt;

&lt;h2 id=&#34;example-query-count-commits-per-contributor-on-github-repository:0db755954643c1ac111ee02a99a5dc05&#34;&gt;Example Query: Count Commits per Contributor on GitHub Repository&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s assume we want to build an Application that allows users to log in with their GitHub account. Once the user is logged in, the application shall count all commits of that user from all of the repositories he/she owns.&lt;/p&gt;

&lt;h3 id=&#34;database-request-solution-old-fashioned:0db755954643c1ac111ee02a99a5dc05&#34;&gt;Database Request Solution (Old Fashioned)&lt;/h3&gt;

&lt;p&gt;This part of the Blog post is entirely fictional. It only serves the purpose of showing what a DB request could look like. Assuming GitHub would run on a Relational Database and would allow developers to access the DB directly, a request could look somewhat like that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT COUNT(*) FROM COMMITS WHERE AUTHOR=$USERNAME AND REPO_OWNER=$USERNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despite the fact that an actual request on GitHubs DB definitely would not look like the one above, the key takeaways are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can retrieve the information with one query. Admittedly the request above assumes a &lt;em&gt;strongly&lt;/em&gt; denormalized DB model. But even if that wasn&amp;rsquo;t the case we could retrieve the information we need in one query by joining tables&lt;/li&gt;
&lt;li&gt;We can define which information we are interested in. In this case we just want the &lt;em&gt;count&lt;/em&gt; of commits and don&amp;rsquo;t want to select any additional information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web-api-solution:0db755954643c1ac111ee02a99a5dc05&#34;&gt;Web API Solution&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Note: The GitHub Web API provides a Statistics API that makes it easier to access the commit count per contributor. However it only provides information for the past year. For our application we want the information over the entire lifetime.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at a solution using the GitHub Web API. Like most queries our problem cannot be solved with a single request. First we need to retrieve a list of repositories using this GET Request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /users/:username/repos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to perform another request &lt;strong&gt;for each&lt;/strong&gt; repository to get the repository details (Can you already feel the pain?):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /repos/:owner/:repo/commits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we need to iterate over all returned commits for each repository and check the author field and count all commits authored by the current user.&lt;/p&gt;

&lt;p&gt;You can see the downsides? If the User has 20 Repositories we need to run 21 &lt;code&gt;HTTP GET&lt;/code&gt; requests. For each repository we will get all commits, even though we only want the ones authored by the current user. Then we have to manually filter the list in order to retrieve the actual commit count.&lt;/p&gt;

&lt;p&gt;This is inefficient in multiple ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The overhead of 21 HTTP Requests is significant&lt;/li&gt;
&lt;li&gt;The server will trigger a DB Query for each HTTP Request (let&amp;rsquo;s ignore potential caches for simplicity). Because the Server treats every request isolated it cannot optimize the DB Query&lt;/li&gt;
&lt;li&gt;The server will return too much data. If only 70% of the commits on the repositories we are checking are by the original author then we are downloading 30% of the JSON data for nothing. Additionally we cannot specify which fields we are interested in. For each Commit the GitHub API returns 11 fields of which we only need the email of the author&lt;/li&gt;
&lt;li&gt;After all the requests have completed we need to filter the response manually. This is more of an inefficiency from a development standpoint. The performance impact of this step will usually be very low&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The largest of the above problems is that we need to create an individual request for each repository. That problem is called the &lt;a href=&#34;http://www.infoq.com/articles/N-Plus-1&#34;&gt;&amp;ldquo;N+1 problem&amp;rdquo;&lt;/a&gt;. 1 Request is needed to retrieve a list of items. Than we need another request for each entry (N) in that list.&lt;/p&gt;

&lt;h3 id=&#34;alternatives:0db755954643c1ac111ee02a99a5dc05&#34;&gt;Alternatives?&lt;/h3&gt;

&lt;p&gt;Obviously, for Security reasons, no Platform will allow API clients to write entirely custom DB queries. The viable alternative is exposing a little bit more of the DB layer to the Web API; Resulting in more complexity but also more power. Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parse.com/docs/rest#objects-batch&#34;&gt;Batch Requests&lt;/a&gt; as used e.g. by Parse. Though these in most cases only avoid multiple HTTP Requests but not multiple DB Queries&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stormpath.com/blog/linking-and-resource-expansion-rest-api-tips/&#34;&gt;Resource Expansion&lt;/a&gt; as provided by some REST APIs. If GitHub would provide this option, an example query could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /users/:username/repos?expand=commits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would tell the GitHub API that we want to select the commits of each repository along with the repository details in one response. Resource Expansion can solve the N+1 problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Microsoft initiated OData goes one step further and allows Web API clients to append &lt;a href=&#34;http://blogs.msdn.com/b/webdev/archive/2013/07/05/introducing-select-and-expand-support-in-web-api-odata.aspx&#34;&gt;&lt;em&gt;expand&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;select&lt;/em&gt;&lt;/a&gt; parameters to their queries providing an Interface that is almost as powerful as direct DB queries.&lt;/p&gt;

&lt;p&gt;The N+1 problem should be kept in mind when consuming or designing Web APIs. I&amp;rsquo;m sure we will see more sophisticated query interfaces in Web APIs in future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Resources linked in this post:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://stormpath.com/blog/linking-and-resource-expansion-rest-api-tips/&#34;&gt;https://stormpath.com/blog/linking-and-resource-expansion-rest-api-tips/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/using-$select,-$expand,-and-$value&#34;&gt;http://www.asp.net/web-api/overview/odata-support-in-aspnet-web-api/using-$select,-$expand,-and-$value&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/webdev/archive/2013/07/05/introducing-select-and-expand-support-in-web-api-odata.aspx&#34;&gt;http://blogs.msdn.com/b/webdev/archive/2013/07/05/introducing-select-and-expand-support-in-web-api-odata.aspx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Other related Resources:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://redotheweb.com/2012/08/09/how-to-design-rest-apis-for-mobile.html&#34;&gt;http://redotheweb.com/2012/08/09/how-to-design-rest-apis-for-mobile.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Arithmetic Expressions in Swift</title>
      <link>http://blog.benjamin-encz.de/post/arithmetic-expressions-in-swift/</link>
      <pubDate>Tue, 03 Jun 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/arithmetic-expressions-in-swift/</guid>
      <description>&lt;p&gt;While I still cannot fully understand how the release of a new programming language didn&amp;rsquo;t leak before WWDC, most of us got surprised by the announcement of Apple&amp;rsquo;s new Programming Language &lt;strong&gt;Swift&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Like most iOS Developers I immediately took a look at the new language. Most language details seem fairly straightforward - however, arithmetic expressions were the first small pitfall for me.&lt;/p&gt;

&lt;p&gt;If you for example try to run the following lines of code:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// assume margin needs to be of type Float&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;margin&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Float&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;elements&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;3&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;margin&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CGRectGetWidth&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;frame&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;elements&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You will receive a very technical error message (nearly as cryptic as the GCC error messages back in the old days):
&amp;gt; Could not find an overload for &amp;lsquo;/&amp;rsquo; that accepts the supplied arguments&lt;/p&gt;

&lt;p&gt;What the Swift compiler is telling us, is that it cannot divide the &lt;code&gt;Float&lt;/code&gt; on the the left side of the expression by the &lt;code&gt;Int&lt;/code&gt; on the right side. According to the Language Reference Swift never implicitly converts types (page 5):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Values are never implicitly converted to another type. If you need to convert a value to a different type, explicitly make an instance of the desired type.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can solve this problem by explicitly initializing a &lt;code&gt;Float&lt;/code&gt;:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;margin&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CGRectGetWidth&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;frame&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Float&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;elements&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Similar to Java, all basic types have heavily overloaded constructors that allow us to initialize them with other types, here are the &lt;code&gt;CGFloat&lt;/code&gt; initializers:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Float&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UInt8&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int8&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UInt16&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int16&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UInt32&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int32&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UInt64&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int64&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UInt&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Complex arithmetic expressions may get a little bit less readable in future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Objective-C: Accessing backing iVars of properties in subclasses</title>
      <link>http://blog.benjamin-encz.de/post/objective-c-backing-ivars-subclasses/</link>
      <pubDate>Wed, 28 May 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/objective-c-backing-ivars-subclasses/</guid>
      <description>

&lt;p&gt;Most Objective-C developers have a fairly good understanding of properties and instance variables and how these two work together.&lt;/p&gt;

&lt;p&gt;Today I want to discuss an interesting case that will force you to understand the details of the relationship between instance variables and properties. In case you already know these details, this remains an interesting example of how complicated Objective-C can be every once in a while.&lt;/p&gt;

&lt;h2 id=&#34;our-scenario:e0c5b2161d4a1a679573f400d6865a16&#34;&gt;Our Scenario&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s assume we want to create a very simple &lt;strong&gt;ClassA&lt;/strong&gt; with a property called &lt;code&gt;age&lt;/code&gt; of type &lt;code&gt;NSInteger&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassA : NSObject

@property (assign, nonatomic) NSInteger age;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a &lt;strong&gt;ClassB&lt;/strong&gt; that inherits from &lt;strong&gt;ClassA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We want to initialize the &lt;code&gt;age&lt;/code&gt; from within the &lt;code&gt;init&lt;/code&gt; method in &lt;em&gt;ClassA.m&lt;/em&gt;. As per best practice &lt;a href=&#34;http://stackoverflow.com/questions/5932677/initializing-a-property-dot-notation/5932733#5932733&#34;&gt;we don&amp;rsquo;t want to access the property in the initializer method&lt;/a&gt; but want to use the auto synthesized instance variable instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassA

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 6;
    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so simple. Now let&amp;rsquo;s assume that &lt;strong&gt;Class B&lt;/strong&gt; wants to override the initializer (and again we want to avoid accessing a property!):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassB

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 3; // &amp;lt;- compile error
    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately this will result in a &lt;strong&gt;compile error&lt;/strong&gt;. Bummer!&lt;/p&gt;

&lt;p&gt;The instance variable &lt;code&gt;_age&lt;/code&gt; is synthesized in &lt;em&gt;ClassA.m&lt;/em&gt; and therefore is not visible in &lt;em&gt;ClassB.m&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How could we fix this?&lt;/p&gt;

&lt;p&gt;##Synthesize in ClassB.m ?&lt;/p&gt;

&lt;p&gt;This one of the solutions that I have seen around on the web. If &lt;code&gt;_age&lt;/code&gt; is not available in &lt;em&gt;ClassB.m&lt;/em&gt; because it is synthesized in &lt;em&gt;ClassA.m&lt;/em&gt;, why don&amp;rsquo;t we add a synthesize to &lt;em&gt;ClassB.m&lt;/em&gt; to make &lt;code&gt;_age&lt;/code&gt; visible there, too?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassB1

// add synthesize statement to make _age visible
@synthesize age = _age;

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 3;
    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indeed, this will resolve the compile error! Just to be sure that this is a valid solution, let&amp;rsquo;s add some simple tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassB1

@synthesize age = _age;

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 3;

        NSLog(@&amp;quot;ClassB1 _age: %d&amp;quot;, _age);
        NSLog(@&amp;quot;ClassB1 self.age: %d&amp;quot;, self.age);
        NSLog(@&amp;quot;ClassB1 super.age: %d&amp;quot;, super.age);

    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the trimmed console output after initializing &lt;code&gt;ClassB1&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ClassB1 _age: 3&lt;/p&gt;

&lt;p&gt;ClassB1 self.age: 3&lt;/p&gt;

&lt;p&gt;ClassB1 super.age: 6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Wow.&lt;/strong&gt; This is not the behaviour we want! We are overriding the &lt;code&gt;init&lt;/code&gt; method and setting &lt;code&gt;_age&lt;/code&gt; to &amp;ldquo;6&amp;rdquo; but when asking for the &lt;code&gt;age&lt;/code&gt; on our super class we receive &amp;ldquo;3&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Why does this happen? By adding a &lt;code&gt;synthesize&lt;/code&gt; statement to &lt;em&gt;ClassB1.m&lt;/em&gt; we&amp;rsquo;re creating an entirely &lt;strong&gt;new&lt;/strong&gt; instance variable that happens to be called &lt;em&gt;_age&lt;/em&gt; as well, but other than the name has nothing to do with the &lt;em&gt;_age&lt;/em&gt; instance variable declared in &lt;em&gt;ClassA1.m&lt;/em&gt;. The properties of &lt;em&gt;ClassA1&lt;/em&gt; and &lt;em&gt;ClassB1&lt;/em&gt; are now operating on different instance variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Still wonder why this is horrible?&lt;/strong&gt; Take a look at this little test in the &lt;code&gt;init&lt;/code&gt; method of &lt;em&gt;ClassA1.m&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_age = 6;
NSLog(@&amp;quot;ClassA1 self.age: %d&amp;quot;, self.age);
NSLog(@&amp;quot;ClassA1 _age: %d&amp;quot;, _age);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trimmed output:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ClassA1 self.age: 0&lt;/p&gt;

&lt;p&gt;ClassA1 _age: 6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Yikes!&lt;/strong&gt; When accessing &lt;code&gt;self.age&lt;/code&gt; &lt;em&gt;ClassA&lt;/em&gt; is actually accessing the &lt;code&gt;_age&lt;/code&gt; instance variable that is declared in &lt;em&gt;ClassB.m&lt;/em&gt; and stores an entirely different value than  the &lt;code&gt;_age&lt;/code&gt; instance variable available to &lt;em&gt;ClassA.m&lt;/em&gt;. Now that we know the extent of the mess - how do we go about fixing it?&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Scratch this approach&lt;/del&gt;, and move on to option number two.&lt;/p&gt;

&lt;h2 id=&#34;declare-in-classa-h:e0c5b2161d4a1a679573f400d6865a16&#34;&gt;Declare in ClassA.h ?&lt;/h2&gt;

&lt;p&gt;We now know that we cannot synthesize / declare the &lt;code&gt;_age&lt;/code&gt; instance variable in &lt;em&gt;ClassB.m&lt;/em&gt; because we will create a new instance variable instead of using the one of our super class &lt;em&gt;ClassA&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to make the auto synthesized variable &lt;code&gt;_age&lt;/code&gt; visible for &lt;em&gt;ClassB&lt;/em&gt; we can explicitly declare the instance variable in &lt;em&gt;ClassA.h&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassA2 : NSObject {
    NSInteger _age;
}

@property (assign, nonatomic) NSInteger age;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;em&gt;ClassB&lt;/em&gt; will know that &lt;code&gt;_age&lt;/code&gt; exists by importing &lt;em&gt;ClassA.h&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation ClassB2

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 3;

        NSLog(@&amp;quot;ClassB1 _age: %d&amp;quot;, _age);
        NSLog(@&amp;quot;ClassB1 self.age: %d&amp;quot;, self.age);
        NSLog(@&amp;quot;ClassB1 super.age: %d&amp;quot;, super.age);

    }

    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That does the job - no compile errors! What about the logs? (Note: ClassA uses the same test &lt;code&gt;init&lt;/code&gt; method as in the first approach).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ClassA2 self.age: 6&lt;/p&gt;

&lt;p&gt;ClassA2 _age: 6&lt;/p&gt;

&lt;p&gt;ClassB2 _age: 3&lt;/p&gt;

&lt;p&gt;ClassB2 self.age: 3&lt;/p&gt;

&lt;p&gt;ClassB2 super.age: 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now this looks right! First &lt;em&gt;ClassA&lt;/em&gt; gets initialized and gets the same result for &lt;code&gt;_age&lt;/code&gt; and &lt;code&gt;self.age&lt;/code&gt;. Then we override the value of &lt;code&gt;_age&lt;/code&gt; setting it to &amp;ldquo;3&amp;rdquo; in &lt;em&gt;ClassB&lt;/em&gt; and can see that &lt;code&gt;_age&lt;/code&gt;, &lt;code&gt;self.age&lt;/code&gt;, &lt;code&gt;super.age&lt;/code&gt; all return consistent values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice!&lt;/strong&gt; This is a working solution. However, it has one asthetic downside. We are now exposing an instance variable in our header file (&lt;strong&gt;ClassA.h&lt;/strong&gt;) that is not actually part of the interface of our class (the instance variable is &lt;em&gt;protected&lt;/em&gt; and cannot be accessed by other classes that aren&amp;rsquo;t a subclass of &lt;em&gt;ClassA&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at a third solution.&lt;/p&gt;

&lt;h2 id=&#34;use-a-class-extension-in-a-separate-header-file:e0c5b2161d4a1a679573f400d6865a16&#34;&gt;Use a class extension in a separate header file!&lt;/h2&gt;

&lt;p&gt;We now know that the &lt;code&gt;_age&lt;/code&gt; instance variable needs to be part of the interface of &lt;em&gt;ClassA&lt;/em&gt; in order for subclasses to be able to access it.&lt;/p&gt;

&lt;p&gt;A neat way in Objective-C to extract certain parts of the interface that are only relevant to subclasses is creating a &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html&#34;&gt;Class Extension&lt;/a&gt; in a seperate header file.&lt;/p&gt;

&lt;p&gt;In solution number three the interface of &lt;em&gt;ClassA&lt;/em&gt; is nice and clean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassA3 : NSObject

@property (assign, nonatomic) NSInteger age;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_age&lt;/code&gt; instace variable is now declared in  a seperate header called &lt;em&gt;ClassA3_Protected.h&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ClassA3 () {
    @protected
    NSInteger _age;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since instance variables in class extensions are &lt;em&gt;private&lt;/em&gt; by default we need to explicitly declare the &lt;code&gt;_age&lt;/code&gt; variable to be &lt;em&gt;protected&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we can import this class extension into &lt;em&gt;ClassB3.m&lt;/em&gt;  to get access to the &lt;code&gt;_age&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;quot;ClassB3.h&amp;quot;
#import &amp;quot;ClassA3_Protected.h&amp;quot;

@implementation ClassB3

- (instancetype)init {
    self = [super init];

    if (self) {
        _age = 3;

        NSLog(@&amp;quot;ClassB3 _age: %d&amp;quot;, _age);
        NSLog(@&amp;quot;ClassB3 self.age: %d&amp;quot;, self.age);
        NSLog(@&amp;quot;ClassB3 super.age: %d&amp;quot;, super.age);

    }
    return self;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No compile errors and no unnecessary cluttered interface file! What about the logs? (Note: ClassA uses the same test &lt;code&gt;init&lt;/code&gt; method as in the the two previous approaches):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ClassA2 self.age: 6&lt;/p&gt;

&lt;p&gt;ClassA2 _age: 6&lt;/p&gt;

&lt;p&gt;ClassB2 _age: 3&lt;/p&gt;

&lt;p&gt;ClassB2 self.age: 3&lt;/p&gt;

&lt;p&gt;ClassB2 super.age: 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great! This is the same output as in attempt number two. Everything is working as expected and we have a clean interface file only containing the property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This little example shows how complex some Objective-C language details are and how important it can be to undertand them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find the code examples used throughout this tutorial in the &lt;a href=&#34;https://github.com/Ben-G/Property_InstanceVariables_Inheritance&#34;&gt;GitHub repository for this blogpost&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>