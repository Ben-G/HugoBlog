<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[Thinking inside a large box];</title>
    <link>http://blog.benjamin-encz.de/</link>
    <description>Recent content on [Thinking inside a large box];</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 May 2016 12:24:54 -0800</lastBuildDate>
    <atom:link href="http://blog.benjamin-encz.de/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Beware the UIKit Visitors!</title>
      <link>http://blog.benjamin-encz.de/post/disassembling-uikit-tintcolor-visitor/</link>
      <pubDate>Tue, 10 May 2016 12:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/disassembling-uikit-tintcolor-visitor/</guid>
      <description>

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;investigating-the-cause-of-quadratic-time-complexity-when-adding-subviews-in-uikit:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Investigating the Cause of Quadratic Time Complexity When Adding Subviews in UIKit&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;Yesterday&lt;/del&gt; Two weeks ago we identified a performance regression in the PlanGrid app, when entering a view that dynamically adds a large amount of subviews.&lt;/p&gt;

&lt;p&gt;I started this blog post back then, but was recently motivated to finish it quickly by seeing other developers running into this issue as well:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My discovery for the day is iOS has an O(n^2) cost to add a subview so never have too many subviews on a view or performance goes to shit&lt;/p&gt;&amp;mdash; Rupert H (@rpy) &lt;a href=&#34;https://twitter.com/rpy/status/729550705137090560&#34;&gt;May 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For this blog post I wanted to isolate this issue from our code base. I was able to reproduce the issue with this minimal example inside of a blank &lt;code&gt;UIViewController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;viewDidAppear&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;animated&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;viewDidAppear&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;animated&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tintColor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;blueColor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIView&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;addSubview&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above example is obviously extreme, but it reveals an interesting performance issue: when setting a &lt;code&gt;tintColor&lt;/code&gt; on a parent view, and not setting an explicit color on child views the performance of &lt;code&gt;addSubview&lt;/code&gt; reduces itself drastically with a large amount of added subviews.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I could identify within Instrument&amp;rsquo;s time profiler:
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/tint-color-visitor-highlight.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A majority of the time is adding subviews is spent within &lt;code&gt;[_UITintColorVisitor _visitView:]&lt;/code&gt;. In this example it&amp;rsquo;s 64% of the time; and the proportion only increases with the amount of subviews we&amp;rsquo;re adding.&lt;/p&gt;

&lt;p&gt;We like our custom tint color; but not enough to justify such an impact on performance. &lt;strong&gt;By deactivating the custom tint color we bring the overall run time of &lt;code&gt;viewDidAppear&lt;/code&gt; from our example project from over 700ms down to ~10ms.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same affect can be accomplished by specifying the &lt;code&gt;tintColor&lt;/code&gt; on each view we&amp;rsquo;re adding, which stops the expensive &lt;code&gt;_UITintColorVisitor&lt;/code&gt; from stopping by too often.&lt;/p&gt;

&lt;h2 id=&#34;digging-into-uikit:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Digging into UIKit&lt;/h2&gt;

&lt;p&gt;Finding a workaround for this issue is only half of the fun. Let&amp;rsquo;s try to find out what is causing these poor performance characteristics in the first place. We can start by taking a closer look at the time profiler output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/focus-tint-color-visitor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the app doesn&amp;rsquo;t spend too much time in &lt;code&gt;[_UITintColor _visitView]&lt;/code&gt; itself. The majority of the time is consumed by &lt;code&gt;objc_msgSend&lt;/code&gt; which indicates that thi386is method is causing many, many method invocations or the method itself is being called extremely frequently. Further, we&amp;rsquo;re spending a lot of time in &lt;code&gt;[NSArray containsObject:]&lt;/code&gt; which either means that the array is being searched through too often in the first place, or that a data structure that is more efficient for lookups should be used instead of an array (e.g. a dictionary or a set).&lt;/p&gt;

&lt;h3 id=&#34;breakpoints-in-framework-functions:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Breakpoints in Framework Functions&lt;/h3&gt;

&lt;p&gt;We can start by setting a breakpoint within the &lt;code&gt;[_UITintColor _visitView]&lt;/code&gt; method; that will give us an idea of how often that method is called.&lt;/p&gt;

&lt;p&gt;We can do that by setting a breakpoint early in our program to bring up the lldb console (alternatively we could use lldb from the terminal). Then we can enter the following command to set a breakpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) b -[_UITintColorVisitor _visitView:]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can continue execution; soon we should trap into our breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/visit-view-breakpoint.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Checking how often this method is called, I quickly identified that the amount of calls grows with the amount of subviews we have added. As a next step I wanted to see which views exactly are being visited. For that we need to dive into a little bit of assembly code.&lt;/p&gt;

&lt;h3 id=&#34;inspecting-the-assembly-code:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Inspecting the Assembly Code&lt;/h3&gt;

&lt;p&gt;When stepping into the breakpoint in &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt; you are greeted with a cryptic wall of assembly code. I started out with very barebones knowledge of understanding/investigating complex assembly code, but this bug forced me to learn some tricks that hopefully are useful to you as well!&lt;/p&gt;

&lt;h4 id=&#34;running-the-example-app-on-32-bit-mode:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Running the Example App on 32-Bit Mode&lt;/h4&gt;

&lt;p&gt;As a first step, let&amp;rsquo;s ensure that our app runs in &lt;strong&gt;32-Bit&lt;/strong&gt; mode in the simulator. This architecture is known as &lt;strong&gt;i386&lt;/strong&gt;. We choose to run the app in 32-Bit mode since i386 has a simpler way of passing function arguments (which will come in handy shortly). In Xcode 7 the easiest way to run on the i386 architecture is to select the &lt;em&gt;iPad 2&lt;/em&gt; simulator.&lt;/p&gt;

&lt;p&gt;With this setup in place, we can now inspect which views are visited from within our breakpoint in &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt;. Looking at the method signature we can see that this method takes on argument: the view that is being visited. That&amp;rsquo;s the information that we would like to inspect further. In addition to that explicit argument every method call in Objective-C receives &lt;code&gt;self&lt;/code&gt; as the first and the &lt;code&gt;selector&lt;/code&gt; as the second implicit argument.&lt;/p&gt;

&lt;h4 id=&#34;printing-function-arguments-in-assembly:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Printing Function Arguments in Assembly&lt;/h4&gt;

&lt;p&gt;By using &lt;a href=&#34;https://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/&#34;&gt;this handy reference&lt;/a&gt; we can look up where these arguments are stored when a method is called (the reference is old and refers &lt;code&gt;gdb&lt;/code&gt; instead of &lt;code&gt;lldb&lt;/code&gt;, but the info is still up to date.). The order of these arguments is part of what we call a &amp;ldquo;calling convention&amp;rdquo;. It states that on a i386 architecture function arguments are passed as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before prologue:

&lt;ul&gt;
&lt;li&gt;*($esp+4n) ➡ arg(n)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;After prologue:

&lt;ul&gt;
&lt;li&gt;*($ebp+8+4n) ➡ arg(n)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;n&lt;/em&gt; here refers to the index of the argument.&lt;/p&gt;

&lt;p&gt;Without getting into too much detail at this point: the &amp;ldquo;prologue&amp;rdquo; is a sequence at the beginning of a function call that configures the stack pointer and different stack variables. The variable locations for our function arguments are different before and after the prologue (&lt;a href=&#34;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&#34;&gt;this blog post&lt;/a&gt; by Ari Grant has a good description for what the function prologue and epilogue do). All arguments are offset from the base address that is stored in the &lt;code&gt;esp&lt;/code&gt; register.&lt;/p&gt;

&lt;p&gt;For now we&amp;rsquo;ll use the addresses before the prologue, since we&amp;rsquo;ll access the arguments as soon as we trap into our breakpoint at the beginning of the &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When we reach that breakpoint we can print all 3 arguments to our function call as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) po *(id *)($esp+4)
&amp;lt;_UITintColorVisitor: 0xc502540&amp;gt;

(lldb) po *(SEL *)($esp+8)
&amp;quot;_visitView:&amp;quot;

(lldb) po *(id *)($esp+12)
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use this new ability to print the visited view every time we step into our breakpoint, by calling: &lt;code&gt;po *(id *)($esp+12)&lt;/code&gt; (alternatively you can also use a &lt;a href=&#34;http://objectivistc.tumblr.com/post/40854305239/stack-trace-dumping-regular-expression-based&#34;&gt;breakpoint command&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Using this technique I identified that after a new subview is added, the parent view and all of its children are passed to calls of &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt;. For each added view UIKit will iterate all of its siblings.&lt;/p&gt;

&lt;p&gt;Why exactly is that happening? I have not yet been able to track it down definitely, but I have a bunch more clues that I&amp;rsquo;d like to share.&lt;/p&gt;

&lt;h4 id=&#34;let-the-guesswork-begin:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Let the Guesswork begin&lt;/h4&gt;

&lt;p&gt;Since we want to know why the &lt;code&gt;_UITintColorVisitor&lt;/code&gt; is called so frequently, it makes sense to start by investigating the backtrace. We can do this with the &lt;code&gt;bt&lt;/code&gt; lldb command that we can invoke while halted in a breakpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) bt
* thread #1: tid = 0x156ea9, 0x00e4b61c UIKit`-[_UITintColorVisitor _visitView:], queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 9.1
  * frame #0: 0x00e4b61c UIKit`-[_UITintColorVisitor _visitView:]
    frame #1: 0x00e4bfbb UIKit`_UIViewVisitorEntertainVisitors + 107
    frame #2: 0x00e4af30 UIKit`_UIViewVisitorRecursivelyEntertainDescendingVisitors + 162
    frame #3: 0x00e4a8ca UIKit`_UIViewVisitorEntertainDescendingTrackingVisitors + 705
    frame #4: 0x00e4a2be UIKit`_UIViewVisitorEntertainHierarchyTrackingVisitors + 58
    frame #5: 0x00a9ce3f UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 268
    frame #6: 0x005b1440 Foundation`-[NSISEngine withBehaviors:performModifications:] + 150
    frame #7: 0x005b491c Foundation`-[NSISEngine withAutomaticOptimizationDisabled:] + 48
    frame #8: 0x00a9cce4 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 521
    frame #9: 0x00aac7f1 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 2367
    frame #10: 0x00a9acc8 UIKit`-[UIView(Hierarchy) addSubview:] + 56
    frame #11: 0x00002be9 ExampleApp`ViewController.viewDidAppear(animated=false, self=0x0c72cce0) -&amp;gt; () + 825 at ViewController.swift:40
    frame #12: 0x00002cbf ExampleApp`@objc ViewController.viewDidAppear(Bool) -&amp;gt; () + 63 at ViewController.swift:0
    [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Up until &lt;code&gt;frame #11&lt;/code&gt; we&amp;rsquo;re only seeing code that is necessary to set up the example project. &lt;code&gt;frame #10&lt;/code&gt; is the actual starting point for our investigation. It is called whenever a new subview is added and it eventually results in a call to the &lt;code&gt;_UITintColorVisitor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is interesting is that &lt;code&gt;addSubview&lt;/code&gt; is only ever called on our root view, but the &lt;code&gt;_UITintColorVisitor&lt;/code&gt; is called for all of the subviews of that root view. The cause of this problem must lie somewhere between &lt;code&gt;frame #11&lt;/code&gt; and &lt;code&gt;frame #0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point it was not obvious to me why all views were being caused to be visited; at the very end of the next section I might have a likely answer to that question&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;digging-deeper:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Digging Deeper&lt;/h4&gt;

&lt;p&gt;Since I hit a dead end in identifying why all subviews in the view hierarchy were constantly being revisited, I decided to investigate another interesting aspect about this problem that profiler had revealed.&lt;/p&gt;

&lt;p&gt;Earlier we identified that about 25% of the total time is taken up in calls to &lt;code&gt;[NSArray containsObject:]&lt;/code&gt; which is called as part of the implementation of &lt;code&gt;[_UITintColorVisitor visitView:]&lt;/code&gt;. I have used &lt;a href=&#34;http://www.hopperapp.com/&#34;&gt;Hopper Disassembler&lt;/a&gt; to try to understand why that&amp;rsquo;s the case. A disassembler can translate a binary (in machine code) back into assembly instructions which enables us to explore some of the inner workings of closed source software. This is useful, e.g. to explore issues in Apple&amp;rsquo;s UIKit framework.&lt;/p&gt;

&lt;p&gt;If you have never used Hopper before, but would like to follow along, I would recommend reading this &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;brief introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopper has a handy feature that can generate pseudo code from the disassembled binary, which makes it somewhat easier to try and grasp the control flow of a program (if, like me, you&amp;rsquo;re mostly unfamiliar with assembly code).&lt;/p&gt;

&lt;p&gt;By browsing throught the pseudo code generated by Hopper I could identify the section of &lt;code&gt;[_UITintColorVisitor _visitView:]&lt;/code&gt; that calls &lt;code&gt;containsObject&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/visit-view-pseudo-code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I also stepped through the assembly code that corresponds to this pseudo code in the debugger. As part of that effort I identified a few things that are relevant to this snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One &lt;code&gt;_UITintColorVisitor&lt;/code&gt; instance is used to visit all views (at least in this simple example with only one view hierarchy)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_UITintColorVisitor&lt;/code&gt; has a few properties that are persisted between the different invocations of &lt;code&gt;visitView:&lt;/code&gt;. Here&amp;rsquo;s an overview of all properties found in Hopper:
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/tint-color-visitor-properties.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From stepping through the assembly code and investigating different registries I could identify that in the above pseudo code &lt;code&gt;eax&lt;/code&gt; refers to the &lt;code&gt;_originalVisitedView&lt;/code&gt; and &lt;code&gt;edi&lt;/code&gt; refers to the view that is currently being visited.&lt;/p&gt;

&lt;p&gt;This means, that as soon as a &lt;code&gt;_UITintColorVisitor&lt;/code&gt; has an original visited view (which is true after it visited its first view), the outlined code checks if the &lt;code&gt;subviews&lt;/code&gt; array of the &lt;code&gt;originalVisitedView&lt;/code&gt; contains the currently visited view. This check scans the full array of subviews; in cases where the &lt;code&gt;originalVisitedView&lt;/code&gt; is our root view, the cost of this operation grows linearly with the amount of added subviews.&lt;/p&gt;

&lt;p&gt;I investigated this further by creating another breakpoint in UIKit at the point where this check takes place. When disassembling the 32-Bit slice of UIKit and running the app in 32-Bit mode, the address offsets align nicely. By stepping into the breakpoint in &lt;code&gt;-[_UITintColorVisitor visitView:]&lt;/code&gt; I could compare the assembly addresses in the debugger and in Hopper and identify that the addresses match up when replacing the &lt;code&gt;495&lt;/code&gt; in the hopper address with &lt;code&gt;0xe4b&lt;/code&gt;. The relative addresses within UIKit are constant, only the base address at which the framework is loaded is dynamic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/address-align.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we know the memory address offset we can create breakpoints in lldb based on addresses in Hopper.&lt;/p&gt;

&lt;p&gt;Knowing this, I created a new breakpoint based on the &lt;code&gt;loc_4956fd&lt;/code&gt; in Hopper like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b 0xe4b6fd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the breakpoint I printed both the &lt;code&gt;eax&lt;/code&gt; register and the &lt;code&gt;_originalVisitedView&lt;/code&gt; of &lt;code&gt;self&lt;/code&gt; (which is stored in the &lt;code&gt;ebx&lt;/code&gt; register):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) po $eax
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;

(lldb) po [$ebx valueForKey:@&amp;quot;_originalVisitedView&amp;quot;]
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach I identified that with the current sample code, &lt;code&gt;eax&lt;/code&gt; &lt;strong&gt;always refers to the root view&lt;/strong&gt;. This means we are iterating over all subviews of the root view, N times for each subview that is added.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no expert in complexity analysis but it appears that the total cost of &lt;code&gt;[_UITintColor visitView:]&lt;/code&gt; sums up to &lt;code&gt;n^2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;n&lt;/strong&gt; invocations of &lt;code&gt;[_UITintColor visitView:]&lt;/code&gt;) * (&lt;strong&gt;n&lt;/strong&gt; cost of iterating all subviews) where &lt;strong&gt;n&lt;/strong&gt; = amount of added subviews&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why do we have these two code paths outlined above in the first place&lt;/strong&gt;? Why do we need to check if the currently visited view is a subview of the original visited view?&lt;/p&gt;

&lt;p&gt;In both cases, whether it is a subview or not, we end up calling: &lt;code&gt;___34-[_UITintColorVisitor _visitView:]_block_invoke&lt;/code&gt;. In the case of the currently visited view being a subview of the original visited view, we pass two arguments to the block, in the other case we pass only one.&lt;/p&gt;

&lt;p&gt;Before moving on, here&amp;rsquo;s an annotated version of the method we just investigated:
&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/visit-view-pseudo-code-annotated.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at the block that is being invoked from here. By double-clicking onto the call to the block in Hopper, we can jump into the called block. It looks as following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/called-block.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that this block receives two arguments. Using the address translation technique from earlier I decided to create the following breakpoint to jump into this block using lldb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) b 0xe4b7ee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By investigating the registers I found out that &lt;code&gt;ebx&lt;/code&gt; refers to the &lt;code&gt;UIView&lt;/code&gt; instance that is being visited and &lt;code&gt;*(esi + 0x14)&lt;/code&gt; refers to the tint color visitor.
The code seems to switch over the &lt;code&gt;_reasons&lt;/code&gt; property of the &lt;code&gt;[_UITintColorVisitor]&lt;/code&gt; and over some properties of the visited view.&lt;/p&gt;

&lt;p&gt;After stepping through the function prologue we can investigate the relevant values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;po [*(id *)($esi+0x14) valueForKey:@&amp;quot;_reasons&amp;quot;]
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_reasons&lt;/code&gt; property seems to store a bitmask value. Our bitmask is set to &lt;code&gt;1&lt;/code&gt;. The first &lt;code&gt;if&lt;/code&gt; statment in the pseudo code checks if the &lt;code&gt;1&lt;/code&gt; bit of the bitmask is set. A further condition is that the view&amp;rsquo;s &lt;code&gt;_interactionTintColor&lt;/code&gt; needs to be &lt;code&gt;nil&lt;/code&gt; (this check likely explains why setting an explicit &lt;code&gt;tintColor&lt;/code&gt; on a view fixes our performance issue). Since both conditions are met, we execute the body of the first &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Inside of the &lt;code&gt;if&lt;/code&gt; block we finally find a key that might help solve this puzzle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ebx _setAncestorDefinesTintColor:eax];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here UIKit is marking this view, noting that its parent is defining a tint color. I&amp;rsquo;m assuming that this flag is what registers this view in some way to be visited by the &lt;code&gt;_UITintColorVisitor&lt;/code&gt;, since we are passing it as an argument to the &lt;code&gt;_setAncestorDefinesTintColor&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The big question remains why this is flag is set every single time the view is visited and not only in cases where the subview has moved in the view hierarchy or when the parent view changes its tint color. Another interesting question is why the &lt;code&gt;superview&lt;/code&gt; property of the visited view is not used instead of iterating over the array of subviews of the parent view. Both of these mysteries will most likely remain unsolved.&lt;/p&gt;

&lt;p&gt;However, our new findings help explain the two code paths in the piece of code that calls into this block (which we examined earlier):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/UITintColorVisitor/visit-view-pseudo-code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If the currently visited view is not a child view of the original visited view, we don&amp;rsquo;t pass a second argument to this block; which is equivalent to passing &lt;code&gt;nil&lt;/code&gt;. This means that &lt;code&gt;ebx&lt;/code&gt; will be &lt;code&gt;nil&lt;/code&gt;, which in turn means we will never call &lt;code&gt;[ebx _setAncestorDefinesTintColor:eax];&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;When I started out diving into this issue I was almost entirely clueless about how to interpret complex disassembled code - now I&amp;rsquo;m still mostly clueless. However, I learned a few very handy tricks along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I learned how to set breakpoints in private methods &amp;amp; and at any address within the assembly code.&lt;/li&gt;
&lt;li&gt;I learned about the i386 and Objective-C calling conventions, e.g. which arguments are stored in which registers.&lt;/li&gt;
&lt;li&gt;I learned that the addresses in Hopper match the addresses in the actual framework code (besides a base pointers offset depending on where UIKit is loaded into memory). In hindsight this sounds obvious but it definitely was not the case when starting out. &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;This article&lt;/a&gt; was very helpful in getting more comfortable with working with lldb in UIKit alongside of Hopper.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three tools allowed me to explore the code paths &amp;amp; relevant variables a lot faster which in turn made it a lot easier (yet still hard) to get a grasp of what was going on.&lt;/p&gt;

&lt;p&gt;In the end I didn&amp;rsquo;t find a definite answer on how this issue could be fixed, but I found a lot of clues about how the current visitor pattern is implemented and I think I got fairly close to the underlying issue.&lt;/p&gt;

&lt;p&gt;Most importantly I learned how to be more efficient at exploring the inner workings of closed source frameworks which will surely come in handy in future! Attempting to reverse engineer code can be very intimidating and the learning curve is really steep. I hope some day when I have a better grasp myself I can share a beginner friendly guide on all of this!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks a lot to Russ Bishop who tracked down the original issue together with me. He has also filed a radar: 25934331 (fingers crossed)!&lt;/p&gt;

&lt;p&gt;I also recommend the following helpful articles for getting started with reverse engineering closed source Cocoa code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This article was a great introduction to the very basics of using Hopper and lldb side by side: &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;Hopper + lldb for iOS Developers: A Gentle Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Very good discussion of function prologue and epilogue as well as calling conventions: &lt;a href=&#34;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&#34;&gt;Printing Objective-C Invocations in LLDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eecg.toronto.edu/~amza/www.mindsec.com/files/x86regs.html&#34;&gt;x86 Register Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/&#34;&gt;x86 + ObjC Calling Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://objectivistc.tumblr.com/post/40854305239/stack-trace-dumping-regular-expression-based&#34;&gt;Breakpoint Commands in lldb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another post on calling conventions in Objective-C by Jeff Hui, recommended by&lt;a href=&#34;https://twitter.com/rpy&#34;&gt;@rpy&lt;/a&gt;: &lt;a href=&#34;https://www.jeffhui.net/2014/03-reverse-engineering-objective-c.html&#34;&gt;Reverse Engineering Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Decoding Heterogeneous Collections in Swift</title>
      <link>http://blog.benjamin-encz.de/post/decoding-heterogeneous-collections-in-swift/</link>
      <pubDate>Tue, 03 May 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/decoding-heterogeneous-collections-in-swift/</guid>
      <description>

&lt;p&gt;The problem of decoding Swift types from an outside data source, such as JSON, has been mostly solved. Since Swift&amp;rsquo;s release we&amp;rsquo;ve seen more than a dozen popular JSON mapping libraries pop up.&lt;/p&gt;

&lt;p&gt;However, most of the libraries I&amp;rsquo;ve seen so far deal with decoding individual types, not entire collections of heterogeneous types.&lt;/p&gt;

&lt;p&gt;We define how a JSON object representing a user can be mapped to a &lt;code&gt;User&lt;/code&gt; type, as in this example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Decodable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach requires the developer to know that a certain piece of JSON will ever only contain user objects.&lt;/p&gt;

&lt;p&gt;But how can we handle heterogeneous collections like the following one?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [
  {
      &amp;quot;type&amp;quot; : &amp;quot;user&amp;quot;,
      &amp;quot;name&amp;quot; : &amp;quot;test&amp;quot;,
      &amp;quot;age&amp;quot;  : 99
  },
  {
      &amp;quot;type&amp;quot;  : &amp;quot;car&amp;quot;,
      &amp;quot;color&amp;quot; : &amp;quot;green&amp;quot;
  },
  {
      &amp;quot;type&amp;quot; : &amp;quot;phone&amp;quot;,
      &amp;quot;model&amp;quot; : &amp;quot;iPhone&amp;quot;
  },
  {
      &amp;quot;type&amp;quot;  : &amp;quot;car&amp;quot;,
      &amp;quot;color&amp;quot; : &amp;quot;yellow&amp;quot;
  },
  {
      &amp;quot;type&amp;quot; : &amp;quot;phone&amp;quot;,
      &amp;quot;model&amp;quot; : &amp;quot;Anroid Device&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we have three different types: &amp;ldquo;user&amp;rdquo;, &amp;ldquo;car&amp;rdquo; and &amp;ldquo;phone&amp;rdquo;, that can occur anywhere throughout the JSON array. In order to use one of the JSON mapping libraries we would need to inspect each individual element in this list, identify it&amp;rsquo;s type, and then call the initializer of the respective Swift type.&lt;/p&gt;

&lt;h2 id=&#34;dynamically-mapping-json-entities-and-types:bf293cba123ff2f8b761ea95baf2f08c&#34;&gt;Dynamically Mapping JSON Entities and Types&lt;/h2&gt;

&lt;p&gt;In Objective-C it would be fairly easy to solve this problem automatically. We can rely on the Objective-C runtime to dynamically look up a class by its name and create the relevant instance for each entity we find in the JSON array.&lt;/p&gt;

&lt;p&gt;In Swift we cannot rely on these run time mechanisms, but we can still create a mapping between a JSON type and a Swift type.&lt;/p&gt;

&lt;p&gt;The first step is to introduce a protocol for all types that can be deserialized with our new mechanism. These types will need to fulfill two requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They need to be able to be initialized with a JSON entity&lt;/li&gt;
&lt;li&gt;They need to provide a &lt;code&gt;typeIdentifier&lt;/code&gt; string that we can use to match the &amp;ldquo;type&amp;rdquo; identifier from our JSON example above.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s what the protocol looks like in my example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Decodable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that I&amp;rsquo;m relying on the &lt;a href=&#34;https://github.com/Anviking/Decodable&#34;&gt;Decodable&lt;/a&gt; JSON mapping library to require the JSON initializer for me via the &lt;code&gt;Decodable&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;Each of the individual types will now implement this protocol. Here&amp;rsquo;s an example for the &lt;code&gt;User&lt;/code&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is mostly the regular JSON mapping code we&amp;rsquo;re familiar with. The only addition is the static &lt;code&gt;typeIdentifier&lt;/code&gt; member that tells us what this type is called in the JSON array.&lt;/p&gt;

&lt;p&gt;We also implement this protocol for the other types represented in the JSON array (&lt;code&gt;Car&lt;/code&gt;and  &lt;code&gt;Phone&lt;/code&gt;) but I will spare you the details of that&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now to the interesting part.&lt;/strong&gt; We need a component that can take the entire, heterogeneous,  array of JSON objects, can iterate over all of them and create the correct Swift instances based on the types it finds.&lt;/p&gt;

&lt;p&gt;For this example I&amp;rsquo;ve called the type &lt;code&gt;Deserializer&lt;/code&gt;. Here&amp;rsquo;s what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializer&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[:]&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Store all types in lookup table&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[]&lt;/span&gt;

        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Iterate over each entity in the JSON array&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Find metatype for this entity&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelMetatype&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Call initializer on the metatype&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelMetatype&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This type gets initialized with an array of model metatypes (&lt;code&gt;[Deserializable.Type]&lt;/code&gt;). This is necessary in order for the component to know which types can appear within the JSON array it will deserialize. Since we cannot dynamically look up types at runtime, we need to require a developer to manually provide all the types as part of the &lt;code&gt;Deserializer&lt;/code&gt; setup.&lt;/p&gt;

&lt;p&gt;We now store these types in a &lt;code&gt;modelLookupTable&lt;/code&gt;. This is a simple dictionary that maps from the types &lt;code&gt;typeIdentifier&lt;/code&gt; to the metatype itself. We will use this lookup table within the &lt;code&gt;deserialize&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deserialize&lt;/code&gt; method takes a JSON array and returns a heterogenous list of &lt;code&gt;Deserializable&lt;/code&gt; models. The implementation iterates over each entity in the JSON array. It extracts the &amp;ldquo;type&amp;rdquo; property from each entity and uses that string to find the relevant metatype in our &lt;code&gt;modelLookupTable&lt;/code&gt;. If we can find a Swift type that matches the JSON type identifier then we will proceed and try to &lt;code&gt;decode&lt;/code&gt; that type with the current &lt;code&gt;jsonEntity&lt;/code&gt;.
If the decoding works successfully, we add the instantiated type to the &lt;code&gt;parsedModels&lt;/code&gt; array.
At the end of the &lt;code&gt;deserialize&lt;/code&gt; function we return the list of decoded models.&lt;/p&gt;

&lt;p&gt;With all this in place, we can now create an instance of the deserializer and use it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserializer&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Phone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserializer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;jsonArray&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The printed output will now be a list of the different instances that have been decoded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[User(name: &amp;quot;test&amp;quot;, age: 99), Car(color: &amp;quot;green&amp;quot;), Phone(model: &amp;quot;iPhone&amp;quot;), Car(color: &amp;quot;yellow&amp;quot;), Phone(model: &amp;quot;Anroid Device&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this concept is useful to some other Swift developers as well. You can find a playground with the full example code on &lt;a href=&#34;https://github.com/Ben-G/Decoding-Heterogeneous-Collections-Swift/blob/master/Decodable.playground/Contents.swift&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Time vs. Run Time Type Checking in Swift</title>
      <link>http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/</link>
      <pubDate>Wed, 13 Apr 2016 21:09:24 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/</guid>
      <description>

&lt;p&gt;At some point, when learning how to use Swift&amp;rsquo;s type system, it is important to understand that Swift (like many other languages) has two different forms of type checking: static and dynamic. Today I want to briefly discuss the difference between them and why headaches might arise when we try to combine them.&lt;/p&gt;

&lt;p&gt;Static type checking occurs at compile time and dynamic type checking happens at run time. Each of these two stages come with a different, partially incompatible, toolset.&lt;/p&gt;

&lt;h2 id=&#34;compile-time-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Compile Time Type Checking&lt;/h2&gt;

&lt;p&gt;Compile time type checking (or static type checking) operates on the Swift source code. The Swift compiler looks at explicitly stated and inferred types and ensures correctness of our type constraints.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a trivial example of static type checking:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: Cannot convert value of &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// type &amp;#39;String&amp;#39; to specified type &amp;#39;Int&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Based on the source code the type checker can decide that &lt;code&gt;text&lt;/code&gt; is not of type &lt;code&gt;Int&lt;/code&gt; - therefore it will raise a compile error.&lt;/p&gt;

&lt;p&gt;Swift&amp;rsquo;s static type checker can do a lot more powerful things, e.g. verifying generic constraints:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Require a type that is both human and provides a name&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compiles fine:&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compiles fine:&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: cannot invoke &amp;#39;printHumanName&amp;#39; with an &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// argument list of type &amp;#39;(Car)&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, again, all of the type checking occurs at compile time, solely based on the source code. The swift compiler can verify which function calls provide arguments that match the generic constraints of the &lt;code&gt;printHumanName&lt;/code&gt; function; and for ones that don&amp;rsquo;t it can emit a compile error.&lt;/p&gt;

&lt;p&gt;Since Swift&amp;rsquo;s static type system offers these powerful tools we try to verify as much as possible at compile time. However, in same cases run time type verification is necessary.&lt;/p&gt;

&lt;h2 id=&#34;run-time-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Run Time Type Checking&lt;/h2&gt;

&lt;p&gt;In some unfortunate cases relying on static type checking is not possible. The most common example is reading data from an outside resource (network, database, etc.). In such cases the data and thus the type information is not part of the source code, therefore we cannot prove to the static type checker that our data has a specific type (since the static type checker can only operate on type information it can extract from our source code).&lt;/p&gt;

&lt;p&gt;This means instead of being able to &lt;em&gt;define&lt;/em&gt; a type statically, we need to &lt;em&gt;verify&lt;/em&gt; a type dynamically at run time.&lt;/p&gt;

&lt;p&gt;When checking types at run time we rely on the type metadata stored within the memory of all Swift instances). The only tools we have available at this stage are the &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; keywords that use that metadata to confirm whether or not the instance is of a certain type or conforms to a certain protocol.&lt;/p&gt;

&lt;p&gt;This is what all the different Swift JSON mapping libraries do - they provide a convenient API for dynamically casting an unknown type to one that matches the type of a specified variable.&lt;/p&gt;

&lt;p&gt;In many scenarios dynamic type checking enables us to integrate types that are unknown at compile time with our statically checked Swift code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;takesHuman&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;human&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;takesHuman&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All we need to do in order to call the function with &lt;code&gt;unknownData&lt;/code&gt; is to cast it to the argument type of the function.&lt;/p&gt;

&lt;p&gt;However, if we try to use this approach to call a function that defines arguments as generic constraints, we run into issues&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;combining-dynamic-and-static-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Combining Dynamic and Static Type Checking&lt;/h2&gt;

&lt;p&gt;Continuing the earlier &lt;code&gt;printHumanName&lt;/code&gt; example, let&amp;rsquo;s assume we have received data from a network request, and we need to call the &lt;code&gt;printHumanName&lt;/code&gt; method - if the dynamically detected type allows us to do that.&lt;/p&gt;

&lt;p&gt;We know that our type needs to conform to two different protocols in order to be eligible as argument for the &lt;code&gt;printHumanName&lt;/code&gt; function. So let&amp;rsquo;s check that requirement dynamically:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: cannot invoke &amp;#39;printHumanName&amp;#39; &lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// with an argument list of type &amp;#39;(protocol&amp;lt;HasName, HumanType&amp;gt;)&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The dynamic type check in the above example actually works correctly. The body of the &lt;code&gt;if let&lt;/code&gt; block is only executed for types that conform to our two expected protocols. However, we cannot convey this to the compiler. The compiler expects a &lt;em&gt;concrete&lt;/em&gt; type (one that has a fully specified type at compile time) that conforms to &lt;code&gt;HumanType&lt;/code&gt; and &lt;code&gt;HasName&lt;/code&gt;. All we can offer is a dynamically verified type.&lt;/p&gt;

&lt;p&gt;As of Swift 2.2, there is no way to get this to compile. At the end of this post I will briefly touch on which changes to Swift would likely be necessary to make this approach work.&lt;/p&gt;

&lt;p&gt;For now, we need a workaround.&lt;/p&gt;

&lt;h3 id=&#34;workarounds:7523e14371168feae6a10e37d5f0382f&#34;&gt;Workarounds&lt;/h3&gt;

&lt;p&gt;In the past I&amp;rsquo;ve used one of these two approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cast &lt;code&gt;unknowndData&lt;/code&gt; to a concrete type instead of casting it to a protocol&lt;/li&gt;
&lt;li&gt;Provide a second implementation of &lt;code&gt;printHumanName&lt;/code&gt; without generic constraints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concrete type solution would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;visitor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Not beautiful; but it might the best possible solution in some cases.&lt;/p&gt;

&lt;p&gt;A solution that involves providing a second implementation of &lt;code&gt;printHumanName&lt;/code&gt; might look like this (though there are many other possible solutions):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Put implementation code here&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Or call a third function that is shared between&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// both implementations of `printHumanName`&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;fatalError&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Provided Incorrect Type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;_printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In this second solution we have substituted the compile time constraints for a run time check. We cast the &lt;code&gt;Any&lt;/code&gt; type to &lt;code&gt;HasName&lt;/code&gt;, that allows us to access the relevant information for printing a name, and we include an &lt;code&gt;is&lt;/code&gt; check to verify that the type is one that conforms to &lt;code&gt;HumanType&lt;/code&gt;. We have established a dynamic type check that is equivalent to our generic constraint.&lt;/p&gt;

&lt;p&gt;This way we have offered a second implementation that will run code dynamically, if an arbitrary type matches our protocol requirements. In practice I would extract the actual functionality of this function into a third function that gets called from both &lt;code&gt;printHumanName&lt;/code&gt; and &lt;code&gt;_printHumanName&lt;/code&gt; - that way we can avoid duplicate code.&lt;/p&gt;

&lt;p&gt;The solution of the &amp;ldquo;type erased&amp;rdquo; function that accept an &lt;code&gt;Any&lt;/code&gt; argument isn&amp;rsquo;t really nice either; but in practice I have used similar approaches in cases where other code guarantees that the function will be called with the correct type, but there wasn&amp;rsquo;t a way of expressing that within Swift&amp;rsquo;s type system.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:7523e14371168feae6a10e37d5f0382f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The examples above are extremely simplified, but I hope they demonstrate the issues that can arise from differences in compile time and run time type checking. The key takeaways are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The static type checker runs at compile time, operates on the source code and uses type annotations and constraints for type checking&lt;/li&gt;
&lt;li&gt;The dynamic type checker uses run time information and casting for type checking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We cannot cast a an argument dynamically, in order call a function that has generic constraints&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is there potential for adding support for this to Swift? I think we would need the ability to dynamically create &amp;amp; use a constrained metatype. One could imagine a syntax that looks somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I know too little about the Swift compiler to know if this is feasible at all. I would assume that the relative cost of implementing this is huge, compared to the benefits it would provide to a very small part of the average Swift codebase.&lt;/p&gt;

&lt;p&gt;However, according to this &lt;a href=&#34;http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol&#34;&gt;Stack Overflow answer&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Catfish_Man&#34;&gt;David Smith&lt;/a&gt;, Swift currently checks generic constraints at run time (unless the compiler generates specialized copies of a function for performance optimizations). This means the information about generic constraints is still available at run time and, at least in theory, the idea of dynamically created constrained metatypes might be possible.&lt;/p&gt;

&lt;p&gt;For now it is helpful to understand the limitations of mixing static and dynamic type checking and to be aware of the possible workarounds.&lt;/p&gt;

&lt;p&gt;I cannot finish this post without a fabulous quote from &lt;a href=&#34;https://twitter.com/AirspeedSwift&#34;&gt;@AirspeedSwift&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Runtime type checking and compile-time generics are like steak and ice-cream – both are nice but mixing them is a bit weird.
- &lt;a href=&#34;http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol&#34;&gt;Source: StackOverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have corrections or general thoughts on this post, &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;I would love to hear from you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Addendum&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Russ Bishop (in the comments) and Joe Groff (on twitter) pointed out that the idea presented in this post is already being discussed as part of extending Swift&amp;rsquo;s support for generics. The twitter conversation also revealed that all compile time information is available at runtime, too. This opens the door for exciting extensions to Swift&amp;rsquo;s type system in future.&lt;/p&gt;

&lt;p&gt;The relevant conversation on twitter is here:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/xenadu02&#34;&gt;@xenadu02&lt;/a&gt; &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;@benjaminencz&lt;/a&gt; Everything in the static type system is in the runtime too. Making it all available&amp;#39;s a &amp;quot;simple matter of design&amp;quot;&lt;/p&gt;&amp;mdash; Joe Groff (@jckarter) &lt;a href=&#34;https://twitter.com/jckarter/status/720661475405094913&#34;&gt;April 14, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Squashing Commits With Git Rebase: A Very Quick Guide</title>
      <link>http://blog.benjamin-encz.de/post/squashing-commits-with-git-rebase-guide/</link>
      <pubDate>Thu, 24 Mar 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/squashing-commits-with-git-rebase-guide/</guid>
      <description>&lt;p&gt;Git&amp;rsquo;s interactive rebase is extremely useful for keeping a somewhat clear commit history. Here&amp;rsquo;s a very brief guide on how to squash multiple commits into a single one.&lt;/p&gt;

&lt;p&gt;Git rebase allows you to rewrite the history of a git repository. &lt;strong&gt;Yes, you are right, this can be incredibly dangerous, therefore don&amp;rsquo;t use this technique on branches that are shared with other developers&lt;/strong&gt;. To me rebase is most useful for preparing a branch that is about to be merged into the main branch of a project.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume our branch&amp;rsquo;s commit log is in the following state (printed by using &lt;code&gt;git log&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/1_initial_log.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have a bunch of intermediate commits for stages in which our code was not working as expected ending with a commit that indicates that our feature/bug fix is complete.&lt;/p&gt;

&lt;p&gt;Having all of these commits in the history of a project would mean that the commit log would quickly become very difficult to read.&lt;/p&gt;

&lt;p&gt;Git rebase allows us to turn these 3 intermediate commits into a single one.&lt;/p&gt;

&lt;p&gt;The following command will bring you into git&amp;rsquo;s interactive rebase mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are different ways to choose the range of commits you want to rebase. I mostly end up using &lt;code&gt;HEAD~N&lt;/code&gt; to rewrite the latest &lt;code&gt;N&lt;/code&gt; commits.&lt;/p&gt;

&lt;p&gt;This will bring up the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/2_git_rebase.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can now see the 3 commits you are about to rewrite. There are many different commands available, we are only going to use &lt;code&gt;squash&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Type an &lt;code&gt;s&lt;/code&gt; for &lt;code&gt;squash&lt;/code&gt; in front of the commits that you want to squash together. In our example we choose the final commit along with one intermediate commit to be squashed into the first intermediate commit (this will turn 3 commits into one):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/3_git_rebase_squash.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then close the text editor. Next, git will bring up a screen that will allow you to choose some details for each rebasing step. In our example we only have a single step - the one in which we merge 3 commits into one.&lt;/p&gt;

&lt;p&gt;Git will allow you to change the commit message for this new squashed commit. It starts out by showing you the messages of all commits it is about to squash:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/4_git_rebase_step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can choose a new, descriptive, commit message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/5_git_rebase_new_message.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Close the text editor by saving, and you&amp;rsquo;re done. If you take a look at the new commit history via &lt;code&gt;git log&lt;/code&gt;, you should see the following output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/6_git_rebase_done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A clean commit history that is ready to merge!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validated: A Swift μ-Library for Somewhat Dependent Types</title>
      <link>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</link>
      <pubDate>Thu, 25 Feb 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</guid>
      <description>&lt;p&gt;Today I built &amp;amp; published a μ-library that makes it easier to leverage Swift&amp;rsquo;s type checking system for program verification: &lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;Validated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All Swift developers already use the type system to avoid basic type mismatches (e.g. passing an &lt;code&gt;Int&lt;/code&gt; where a &lt;code&gt;String&lt;/code&gt; is expected), this capability is built into the languge itself.&lt;/p&gt;

&lt;p&gt;A type system can however help verifying more than just the abscence of these simple errors. This requires that developers express constraints and semantics of their programs in types. &lt;strong&gt;&lt;code&gt;Validated&lt;/code&gt; provides a simple way to lift requirements about values into the type system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example from the GitHub Readme:&lt;/p&gt;

&lt;p&gt;You might have a function in your code that only knows how to work with a &lt;code&gt;User&lt;/code&gt; value when the user is logged in. Usually you will implement this requirement in code &amp;amp; add documentation, but you don&amp;rsquo;t have an easy way of expressing this invariant in the type signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Please ever only call with a logged-in user!
func performTaskWithUser(user: User) {
    precondition(
    	user.loggedIn,
    	&amp;quot;It is illegal to call this method with a logged out user!&amp;quot;
    )

	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Validated you can quickly create a new type that describes this requirement in the type system. That makes it impossible to call the function with a logged-out user and it makes the method signature express your invariant (instead of relying on documentation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func performTaskWithUser(user: LoggedInUser) {
	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In short: &lt;code&gt;Validated&lt;/code&gt; allows you to create new types, by taking existing types and adding validations to them. These new types can be used throughout your APIs to express expectations not only about types, but also about values.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very interested in hearing whether this is useful to you &amp;amp; how it could be improved!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;To learn how to use this you should head to GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I Write Swift Specs With Quick</title>
      <link>http://blog.benjamin-encz.de/post/how-i-write-swift-specs-with-quick/</link>
      <pubDate>Wed, 24 Feb 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/how-i-write-swift-specs-with-quick/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently tweaked the way I write Quick specs. I came to realize that I was placing a majority of my testing code inside of &lt;code&gt;it&lt;/code&gt; blocks. This &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/7877f99bdfb4be1c82c4804082e99c35d0a93a91/ReactiveCocoaTests/Swift/DisposableSpec.swift#L53-L69&#34;&gt;seems to be common among many code bases that use Quick/Nimble&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I felt that I could gain more readability by focusing on testing expectations within in &lt;code&gt;it&lt;/code&gt; blocks and driving the test code outside.&lt;/p&gt;

&lt;p&gt;I now structure most of my tests in the following way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;describe&lt;/code&gt; or &lt;code&gt;context&lt;/code&gt; block describes the scenario under test&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;beforeEach&lt;/code&gt; block contains code to implement the scenario&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;it&lt;/code&gt; block only validates expectations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result looks somewhat like this, though I have emitted variable declarations in outer scopes for brevity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// describe the scenario under test
context(&amp;quot;when #download is called multiple times with the same URL&amp;quot;) {

	// variables which will be used from `it` blocks
	var downloadDescription: DownloadDescription!

    beforeEach {
    	// code to drive the scenario
        downloadDescription = DownloadDescription(
            url: NSURL(string: &amp;quot;http://test.com/download&amp;quot;)!,
            priority: 500,
            downloadLocation: NSURL(string: &amp;quot;file://&amp;quot;)!
        )

        (1..&amp;lt;10).forEach { _ in
            downloadManager.downloadAsset(downloadDescription)
        }
    }

    // Multiple expectations for that scenario:

    it(&amp;quot;only asks the downloader to download the asset once&amp;quot;) {
        expect(mockDownloader.receivedCallsToStartDownload)
        .to(haveCount(1))
    }

    it(&amp;quot;keeps the ongoing download enqueued&amp;quot;) {
        expect(downloadManager.queue)
        .to(contain(downloadDescription))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;For me it is a lot easier to read these tests, the expectations are clearly separated from the code that drives the test.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This approach has two minor drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;it&lt;/code&gt; block needs to reference variables that are set from within the &lt;code&gt;beforeEach&lt;/code&gt; block. We therefore need to declare more variables in the &lt;code&gt;context&lt;/code&gt;/&lt;code&gt;describe&lt;/code&gt; scope which adds some visual clutter.&lt;/li&gt;
&lt;li&gt;Having the code that drives the test in &lt;code&gt;beforeEach&lt;/code&gt; might look a little awkward at first, as most testing frameworks use these hooks to set up a shared test environment; not to drive the test code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;future-improvements:90f0e2cd696d535cbf87455e17a8085e&#34;&gt;Future Improvements?&lt;/h2&gt;

&lt;p&gt;In future it might be nice to be able to place the test driving code directly in the &lt;code&gt;context&lt;/code&gt; block. Something along these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context(&amp;quot;when multiplying two numbers&amp;quot;) {
	let i = 2 * 2

    it(&amp;quot;stores the correct result&amp;quot;) {
    	expect(i).to(equal(4))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I believe this isn&amp;rsquo;t possible, because Quick can&amp;rsquo;t register the top-level code within &lt;code&gt;context&lt;/code&gt; block to run as part of the tests, though I haven&amp;rsquo;t looked at the implementation in detail.&lt;/p&gt;

&lt;p&gt;This would mitigate the two drawbacks of my current approach and improve the readability of the specs a little more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For now I&amp;rsquo;m happy with the &lt;code&gt;beforeEach&lt;/code&gt; approach.&lt;/strong&gt; How do you write your Swift test suites?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing ReSwift</title>
      <link>http://blog.benjamin-encz.de/post/introducing-reswift/</link>
      <pubDate>Wed, 20 Jan 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/introducing-reswift/</guid>
      <description>&lt;p&gt;For the last two months I have been actively working on Swift Flow with the goal of bringing the ideas of the Flux and Redux libraries to Swift developers.&lt;/p&gt;

&lt;p&gt;At about the same &lt;a href=&#34;https://twitter.com/ARendtslev&#34;&gt;@ARendtslev&lt;/a&gt; started ReduxKit, which had the goal of implementing Redux in Swift. Soon he was joined by &lt;a href=&#34;https://twitter.com/karlbowden&#34;&gt;@karlbowden&lt;/a&gt; who made significant contributions to the project (and provided amazing build and documentation infrastructure for ReduxKit and Swift Flow).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today we have joined forces under a new name - &lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift&lt;/a&gt; [ri:swɪft]&lt;/strong&gt;. To put it in Karl&amp;rsquo;s words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Swift Flow has adopted the name ReSwift and moved to it&amp;rsquo;s new home as a nod to it&amp;rsquo;s Redux roots that remain at it&amp;rsquo;s core. Going forward, our combined efforts will be focused on ReSwift and surrounding tooling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The core of ReSwift is close to a 1.0 release, however the exiting stuff is in its infancy. We will be working on declarative routing, time traveling, state persistence &amp;amp; restoration and more.&lt;/p&gt;

&lt;p&gt;My hope is that we can provide a viable alternative to &lt;em&gt;MVC by default&lt;/em&gt; on iOS by developing a solid core library with great extensions and developer tools.&lt;/p&gt;

&lt;p&gt;Either way, it will be a great learning experience for us and everyone involved!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in the core ideas behind ReSwift, you can &lt;a href=&#34;https://realm.io/news/benji-encz-unidirectional-data-flow-swift/&#34;&gt;watch my talk from the SLUG Meetup last December&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you missed the link: &lt;a href=&#34;https://github.com/ReSwift/ReSwift&#34;&gt;ReSwift is on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Convenient Error Handling in Swift</title>
      <link>http://blog.benjamin-encz.de/post/convenient-error-handling-in-swift/</link>
      <pubDate>Wed, 18 Nov 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/convenient-error-handling-in-swift/</guid>
      <description>

&lt;p&gt;Swift 2 introduced an error handling mechanism that includes &lt;a href=&#34;link to my post&#34;&gt;backwards compatibility with Objective-C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is great news, the new mechanism is a lot stricter.&lt;/strong&gt; Long gone are the days in which one could ignore errors by lavishly throwing &lt;code&gt;nil&lt;/code&gt; at methods that expect a pointer to an &lt;code&gt;NSError&lt;/code&gt; variable.&lt;/p&gt;

&lt;h1 id=&#34;does-every-error-deserve-an-individual-catch:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Does Every Error Deserve an Individual Catch?&lt;/h1&gt;

&lt;p&gt;Swift will require you to provide an error handler when you call a method that &lt;code&gt;throws&lt;/code&gt;, unless you resort to the &lt;code&gt;try?&lt;/code&gt; or &lt;code&gt;try!&lt;/code&gt; operator. Here&amp;rsquo;s an example of &lt;code&gt;try!&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try! NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using this unfaithful approach an unexpectedly occurring error will cause a crash. You should only use &lt;code&gt;try!&lt;/code&gt; if your app cannot continue to work sensibly if the attempted operation fails - i.e. if you fail load the database model for your application from disk.&lt;/p&gt;

&lt;p&gt;Alternatively you can use &lt;code&gt;try?&lt;/code&gt;, which will transform the result of the operation you are performing into an optional. A successful operation will yield a value, a failed operation will yield &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let data = try? NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach all details of an error that occurred will be swallowed entirely which is suboptimal in many cases as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is it worth it writing a custom error handler for every error producing function you call? I don&amp;rsquo;t think so.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many kinds of errors deserve your full attention, you can write code to recover from them or, at the very least, notify the user about unexpected behavior with a meaningful error message.&lt;/p&gt;

&lt;p&gt;Other errors are less suitable for custom error handlers. You cannot recover from them with reasonable effort and they don&amp;rsquo;t affect the user experience. The user will not want to be informed about them. Here are examples of errors that, in my opinion, fall into this category:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching a downloaded image on disk fails&lt;/li&gt;
&lt;li&gt;Your app cannot connect to the ad service you are using&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on the complexity of your app, there might be hundreds of such operations.&lt;/p&gt;

&lt;p&gt;Even though you can&amp;rsquo;t recover from these errors, you should definitely keep track of them through some sort of logging mechanism! How can this be done without writing many individual error handlers?&lt;/p&gt;

&lt;h1 id=&#34;a-good-compromise:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;A Good Compromise?&lt;/h1&gt;

&lt;p&gt;Can we strike a balance between convenience and due diligence? I believe so. In my latest side project I implemented a default error handler that deals with errors that, for one reason or another, don&amp;rsquo;t deserve a custom error handler.&lt;/p&gt;

&lt;p&gt;This error handler doesn&amp;rsquo;t swallow the error completely. Instead, it logs the errors using my analytics service. This behavior is useful for any type of error that might occur in my app. It&amp;rsquo;s the largest common denominator of error handling.&lt;/p&gt;

&lt;p&gt;This is what using the API looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let errorHandler = ErrorHandler()

let fileContent = errorHandler.wrap {
    return try NSString(contentsOfFile: &amp;quot;doesNotExist&amp;quot;, encoding: NSUTF8StringEncoding)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the main characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We wrap the call to call to the error producing function, along with the &lt;code&gt;try&lt;/code&gt; keyword, into a closure that gets handed to &lt;code&gt;errorHandler.wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the closure returns a value, then &lt;code&gt;errorHandler.wrap&lt;/code&gt; will pass it through to its caller&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errorHandler.wrap&lt;/code&gt; always returns an optional type, indicating that the wrapped operation might fail and return &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above example the &lt;code&gt;fileContent&lt;/code&gt; variable has a type of &lt;code&gt;String?&lt;/code&gt;.  We can use this variable in subsequent operations. While we need to check if the optional contains a value before using it, we can ignore the details of a potential error that was thrown. In this case &lt;code&gt;errorHandler.wrap&lt;/code&gt; acts as a glorified version of &lt;code&gt;try?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In most cases I use the default error handler when calling functions without a return value. In these cases the value of the error handler becomes more obvious:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
let errorHandler = ErrorHandler()

errorHandler.wrap {
	try cache.storeImage(image)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can perform a failable operation without writing any code that deals with errors or optional return values, while still capturing details about errors that might occur.&lt;/p&gt;

&lt;h1 id=&#34;implementation-of-the-default-error-handler:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Implementation of the Default Error Handler&lt;/h1&gt;

&lt;p&gt;The implementation of the error handler is very slim, here&amp;rsquo;s the entire code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ErrorHandler {

    func wrap&amp;lt;ReturnType&amp;gt;(@noescape f: () throws -&amp;gt; ReturnType?) -&amp;gt; ReturnType? {
        do {
            return try f()
        } catch let error {
            logError(error)
            return nil
        }
    }

    func logError(error: ErrorType) {
        let stackSymbols = NSThread.callStackSymbols()
        print(&amp;quot;Error: \(error) \n Stack Symbols: \(stackSymbols)&amp;quot;)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;wrap&lt;/code&gt; function takes a function that can &lt;code&gt;throw&lt;/code&gt; and that can provide a return type. It executes the function within a &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;try&lt;/code&gt; block. If the operation is successful it returns the return value of the function. If an error occurs the catch block calls the &lt;code&gt;logError&lt;/code&gt; function and then returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;logError&lt;/code&gt; function should be customized to your needs - as an example I am printing the current stack trace along with the error message. In a production environment you would likely want to log these messages using an analytics service such as Fabric or Mixpanel.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Good error handling is incredibly important for a good user experience - I wanted to make the process as easy as possible. Now my analytics dashboard will inform me about any unhandled error that occurs in production. Going from there I can improve error handling in my apps by adding custom handlers for the most frequent errors.&lt;/p&gt;

&lt;p&gt;I definitely encourage you and myself to handle as many errors as sensible individually - but I believe there&amp;rsquo;s a large number of potential errors that are suitable for this generic error handling scheme.&lt;/p&gt;

&lt;p&gt;You can find the Source Code for this blog post &lt;a href=&#34;https://github.com/Ben-G/DefaultErrorHandlerSwift&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How do you tackle error handling? I would love to hear from you!&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements:85608b12dd7d2681711facf6cd0f8c5a&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/antitypical/Result/blob/master/Result/Result.swift#L153-L159&#34;&gt;&lt;code&gt;Result.materialize&lt;/code&gt;&lt;/a&gt; for inspiring my &lt;code&gt;wrap&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&#34;https://twitter.com/morganchen96&#34;&gt;morganchen96&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/Javi&#34;&gt;javi&lt;/a&gt; for providing feedback on drafts of this post&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Flux Inspired Architecture for iOS</title>
      <link>http://blog.benjamin-encz.de/post/a-flux-inspired-architecture-for-ios/</link>
      <pubDate>Sat, 12 Sep 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/a-flux-inspired-architecture-for-ios/</guid>
      <description>&lt;p&gt;This year I spoke at 360iDev about &amp;ldquo;Safer Swift Code with Value Types&amp;rdquo;. The goal of the talk was to explore an architecture that uses immutable value types for the model layer.&lt;/p&gt;

&lt;p&gt;After reviewing an earlier version of this talk with my developer friend &lt;a href=&#34;https://twitter.com/devknoll&#34;&gt;Gerald Monaco&lt;/a&gt;, who is a big fan of Facebook&amp;rsquo;s open source technologies (React, Flux, etc.), I decided to take a look at how a &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt;-inspired architecture could be applied to an iOS application.&lt;/p&gt;

&lt;p&gt;It turns out that the topic is fairly dense for 45 minutes, but I hope you can extract some interesting ideas from the talk! &lt;a href=&#34;http://www.scopelift.co/blog/360idev-redux&#34;&gt;I know of at least one person that did enjoy it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the slides and the recoding below and the code for this talk is on &lt;a href=&#34;https://github.com/Ben-G/Twitter-Swift-Flux&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;40fe96de88ee419785be74589f52998c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/137543393&#34; width=&#34;500&#34; height=&#34;281&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you have any I feedback, I&amp;rsquo;d love to hear it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Swift Error Handling and Objective-C Interop in Depth</title>
      <link>http://blog.benjamin-encz.de/post/swift-error-handling-and-objective-c-interop-in-depth/</link>
      <pubDate>Thu, 23 Jul 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/swift-error-handling-and-objective-c-interop-in-depth/</guid>
      <description>

&lt;p&gt;For the impatient reader:&lt;/p&gt;

&lt;h1 id=&#34;tl-dr:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ErrorType&lt;/code&gt; protocol has hidden requirements that are automatically fullfilled if you use an &lt;code&gt;enum&lt;/code&gt; to implement the protocol&lt;/li&gt;
&lt;li&gt;Objective-C methods can only be translated to Swift&amp;rsquo;s error handling mechanism if they return Objective-C objects or boolean values&lt;/li&gt;
&lt;li&gt;Swift will invoke the &lt;code&gt;catch&lt;/code&gt; block if the Objective-C method returns &lt;code&gt;nil&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;, independent of whether an &lt;code&gt;NSError&lt;/code&gt; was produced or not&lt;/li&gt;
&lt;li&gt;If an Objective-C method produces an &lt;code&gt;NSError&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; returns a value the &lt;code&gt;catch&lt;/code&gt; blocks is not invoked and the error cannot be retrieved&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ben-G/FunWithErrors&#34;&gt;GitHub project with examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;fun-with-errors:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Fun With Errors&lt;/h1&gt;

&lt;p&gt;Recently I&amp;rsquo;ve spent some time looking into the new error handling mechanism in Swift in depth. I&amp;rsquo;ve especially focused on its interoperability with Objective-C which is documented fairly lightly as of now (Xcode 7 Beta 4).&lt;/p&gt;

&lt;p&gt;It started with the following lines of code, in which I tried to experiment with creating a custom error type using a &lt;code&gt;struct&lt;/code&gt; (instead of the canonical example in which we use an &lt;code&gt;enum&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct MyErrorType: ErrorType {
  var errorDetails: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the following compiler error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type &#39;MyErrorType&#39; does not conform to protocol &#39;ErrorType&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That was pretty surprising, given that the protocol definition for &lt;code&gt;ErrorType&lt;/code&gt; in Xcode looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol ErrorType {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hidden-protocol-requirements:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Hidden Protocol Requirements&lt;/h2&gt;

&lt;p&gt;The error message revealed two hidden protocol requirements:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/rlx8vruu9ecdqko/error.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This means the actual protocol definition for &lt;code&gt;ErrorType&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol ErrorType {
    var _domain: String
    var _code: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using an &lt;code&gt;enum&lt;/code&gt; to define a custom &lt;code&gt;ErrorType&lt;/code&gt; these fields are automatically generated and populated (this is discussed in WWDC 2015 Session 402, 08:20 min).&lt;/p&gt;

&lt;p&gt;These two fields, &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt;, are also provided by &lt;code&gt;NSError&lt;/code&gt;, so I assume these fields are primarily used for compatibility with Objective-C.&lt;/p&gt;

&lt;p&gt;You might wonder how these fields are populated when using a custom &lt;code&gt;ErrorType&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Me too! So let&amp;rsquo;s create this simple error type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum MyError: ErrorType {
  case BasicError, FatalError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And write a throwing function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func badFunction() throws {
  throw B.FatalError
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Along with a catch block to print the &lt;code&gt;_code&lt;/code&gt; and &lt;code&gt;_domain&lt;/code&gt; members of the error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
  try badFunction()
} catch let error as MyError {
  print(&amp;quot;domain: \(error._domain) code:\(error._code)&amp;quot;)
} catch {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the result that you will see in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;domain: FunWithErrors.MyError code: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_domain&lt;/code&gt; member matches the module name in which the custom &lt;code&gt;ErrorType&lt;/code&gt; was defined and the &lt;code&gt;_code&lt;/code&gt; matches the raw enum value (&lt;code&gt;BasicError&lt;/code&gt; = 0, &lt;code&gt;FatalError&lt;/code&gt; = 1).&lt;/p&gt;

&lt;p&gt;Nothing too exciting here, but an interesting look under the covers. Next, let&amp;rsquo;s see how Objective-C&amp;rsquo;s &lt;code&gt;NSError&lt;/code&gt; works with Swift&amp;rsquo;s error handling.&lt;/p&gt;

&lt;h2 id=&#34;throwing-from-objective-c:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Throwing From Objective-C&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s build the simplest throwing Objective-C method following this rule in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the last non-block parameter of an Objective-C method is of type &lt;code&gt;NSError **&lt;/code&gt;, Swift replaces it with the throws keyword, to indicate that the method can throw an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;methods-that-return-void:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Methods That Return &lt;code&gt;void&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is a simple Objective-C class that has a method that should throw:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ErrorProducer : NSObject

+ (void)doWithError:(NSError**)error;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, when calling this method from Swift we need to provide an &lt;code&gt;NSErrorPointer&lt;/code&gt; and the method does not throw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/zz8ev7j00vxz21k/doesntThrow.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some reason the automatic translation promised by Swift is not working in this case.&lt;/p&gt;

&lt;p&gt;After mutating the method signature multiple times, I found out that the method is &lt;strong&gt;only translated to Swift&amp;rsquo;s error handling mechanism if it returns an Objective-C object or a boolean value&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;methods-that-return-objective-c-objects-or-boolean-values:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Methods That Return Objective-C Objects or Boolean Values&lt;/h3&gt;

&lt;p&gt;This method for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can be used from Swift as expected:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/dqoauugwun16t4k/doesThrow.png?dl=1&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s provide a simple implementation for this method to see how we can catch the thrown &lt;code&gt;NSError&lt;/code&gt; in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error {
  if (error) {
    *error = [NSError errorWithDomain:@&amp;quot;FunWithErrors&amp;quot; code:0 userInfo:nil];
  }

  return @&amp;quot;&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And on the call side we provide a &lt;code&gt;do/catch&lt;/code&gt; block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
  try ErrorProducer.provideString()
} catch let error as NSError {
  print(&amp;quot;domain: \(error.domain) code: \(error.code)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this code Swift code&amp;hellip; &lt;strong&gt;nothing will be printed to the console!&lt;/strong&gt; The catch block will never be reached.&lt;/p&gt;

&lt;p&gt;It seems that the return value of an empty string (&lt;code&gt;@&amp;quot;&amp;quot;&lt;/code&gt;) is indicating that the method returned successfully, even though an error was assigned to the error pointer.&lt;/p&gt;

&lt;p&gt;If we change the implementation of the Objective-C method to return &lt;code&gt;nil&lt;/code&gt;, the &lt;code&gt;catch&lt;/code&gt; block is invoked correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideStringWithError:(NSError**)error {
  if (error) {
    *error = [NSError errorWithDomain:@&amp;quot;FunWithErrors&amp;quot; code:0 userInfo:nil];
  }

  return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From Swift&amp;rsquo;s perspective this makes sense. Every Swift function that &lt;code&gt;throws&lt;/code&gt; will return to the caller without providing the expected return value. In Objective-C however, &lt;code&gt;NSError&lt;/code&gt; is sometimes used as an &lt;em&gt;additional&lt;/em&gt; return value indicating that some minor issue occurred, while the main return value could still be created as expected. &lt;strong&gt;In my understanding these &lt;code&gt;NSError&lt;/code&gt; instances cannot be retrieved from Swift.&lt;/strong&gt; It will be interesting to see if and how existing Objective-C frameworks will be modernized to accomodate for this.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more interesting case I want to look at: It almost seems like the return value is the most important factor for determining whether an Objective-C method throws or not. What happens if we return &lt;code&gt;nil&lt;/code&gt; without assigning an &lt;code&gt;NSError&lt;/code&gt; to the error pointer?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ (NSString *)provideNilStringNoErrorWithError:(NSError**)error {
  return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This indeed throws as well! Swift provides us with an instance of &lt;code&gt;_SwiftNativeNSError&lt;/code&gt;, the &lt;code&gt;domain&lt;/code&gt; of the produced error is &lt;code&gt;Foundation._GenericObjCError&lt;/code&gt; and the &lt;code&gt;code&lt;/code&gt; is 0.&lt;/p&gt;

&lt;p&gt;As was pointed out to me, the Cocoa documentation on error handling in Objective-C discusses this emphasis on the return value of a method that can error out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When dealing with errors passed by reference, it’s important to test the return value of the method to see whether an error occurred, as shown above. Don’t just test to see whether the error pointer was set to point to an error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/ErrorHandling/ErrorHandling.html&#34;&gt;Programming with Objective-C | Dealing with Errors&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary:7d6cd9aa87721e34fde537cfc5c1034a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;As of today (Xcode 7 Beta 4) the interopability between Swift&amp;rsquo;s error handling and Objective-C is lacking some documentation. Here are some interesting findings discussed throughout the blog post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objective-C methods can only be translated to Swift&amp;rsquo;s error handling mechanism if they return Objective-C objects or boolean values&lt;/li&gt;
&lt;li&gt;Swift will invoke the &lt;code&gt;catch&lt;/code&gt; block if the Objective-C method returns &lt;code&gt;nil&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;, independent of whether an &lt;code&gt;NSError&lt;/code&gt; was produced or not&lt;/li&gt;
&lt;li&gt;If an Objective-C method produces an &lt;code&gt;NSError&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; returns a value, the &lt;code&gt;catch&lt;/code&gt; blocks is not invoked and the error cannot be retrieved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a small project that contains all of the examples used in this blog post &lt;a href=&#34;https://github.com/Ben-G/FunWithErrors&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks &lt;a href=&#34;https://twitter.com/warrenm&#34;&gt;@warrenm&lt;/a&gt; for providing feedback and improving this post!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;find me on twitter&lt;/a&gt;, too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS 9 Detects Cycles in Layout Trees</title>
      <link>http://blog.benjamin-encz.de/post/ios-9-detects-cycles-in-layout-trees/</link>
      <pubDate>Thu, 09 Jul 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/ios-9-detects-cycles-in-layout-trees/</guid>
      <description>

&lt;p&gt;A couple of months ago I was faced with an issue that was fairly hard to debug:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hackathons are a great place to see noteworthy issues. Yesterday&amp;#39;s highlight: endless recursion in Storyboard &lt;a href=&#34;https://twitter.com/LAHacks&#34;&gt;@LAHacks&lt;/a&gt;&lt;/p&gt;&amp;mdash; Benjamin Encz (@benjaminencz) &lt;a href=&#34;https://twitter.com/benjaminencz/status/584757451469127680&#34;&gt;April 5, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;What I found out, after about 30 minutes of debugging, was the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/kcjgm6sgftmxo5y/accessoryView.png?dl=1&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The hackathon attendee hat mistakenly set the &lt;code&gt;accessoryView&lt;/code&gt; of a &lt;code&gt;UITableViewCell&lt;/code&gt; to the &lt;code&gt;UITableView&lt;/code&gt; in which the cell was contained - causing an endless recursion during the first layout cycle.&lt;/p&gt;

&lt;p&gt;This however wasn&amp;rsquo;t immediately obvious to me since the symptom was an exception within the &lt;code&gt;cellForRowAtIndexPath:&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;fixed-in-ios-9:9df3400d24ce9ec6d67d1afbc4f7edb2&#34;&gt;Fixed in iOS 9&lt;/h2&gt;

&lt;p&gt;Today I wanted to see if it is possible to reproduce the issue with Xcode 7 Beta 3.&lt;/p&gt;

&lt;p&gt;Indeed, I can still cause the crash. However, instead of causing a stack overflow the app now terminates because &lt;code&gt;CALayer&lt;/code&gt; throws an exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CrashTableViewCell[33582:11713163] *** Terminating app due to uncaught exception &#39;CALayerInvalid&#39;, reason: &#39;layer &amp;lt;CALayer: 0x7f875943c730&amp;gt; is a part of cycle in its layer tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I couldn&amp;rsquo;t find any reference to this exception in a Stack Overflow exception so I assume the cycle detection is new in iOS 9.&lt;/p&gt;

&lt;p&gt;This fix will likely save some headaches!&lt;/p&gt;

&lt;p&gt;It also serves as a good real world example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm&#34;&gt;detecting cycles in directed graphs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk: Introduction to FRP on iOS</title>
      <link>http://blog.benjamin-encz.de/post/talk-introduction-to-frp-on-ios/</link>
      <pubDate>Sat, 30 May 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/talk-introduction-to-frp-on-ios/</guid>
      <description>&lt;p&gt;Back in April I gave a talk at &lt;a href=&#34;http://www.meetup.com/nsmeetup/events/220950179/&#34;&gt;NSMeetup in San Francisco&lt;/a&gt; on Functional Reactive Programming on iOS.&lt;/p&gt;

&lt;p&gt;The talk discusses the idea &amp;amp; motivation behind FRP and dives into some practical examples using Reactive Cocoa 2.x. The examples are based on a small &lt;a href=&#34;https://github.com/Ben-G/PeopleCRM&#34;&gt;demo app&lt;/a&gt; that I built for that talk.&lt;/p&gt;

&lt;p&gt;Once Reactive Cocoa 3.0 has a final release I will likely update this talk to Swift - especially generics are extremely useful when working with the FRP toolset.&lt;/p&gt;

&lt;p&gt;You can find a recording of the talk on &lt;a href=&#34;https://www.youtube.com/watch?v=I6mXJwFQ1YY&#34;&gt;YouTube&lt;/a&gt;. The slides are embedded here and available through &lt;a href=&#34;https://speakerdeck.com/benjamin_encz/functional-reactive-programming-on-ios&#34;&gt;Speakerdeck&lt;/a&gt;.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;066b72a201f74767bbb16b29fc767c51&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Breaking Swift with NSObject and Generics</title>
      <link>http://blog.benjamin-encz.de/post/breaking-the-swift-compiler-with-generics/</link>
      <pubDate>Thu, 19 Feb 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/breaking-the-swift-compiler-with-generics/</guid>
      <description>

&lt;p&gt;Today, while trying to implement a generic data source in Swift, I ran into my first Swift compiler segmentation fault, yay (looking at &lt;a href=&#34;http://openradar.appspot.com/search?query=segmentation+fault+swift&#34;&gt;Open Radar&lt;/a&gt; there seem to be many out there)!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I was trying to implement&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ArrayDataSource&amp;lt;T&amp;gt; : NSObject {

  private var array: Array&amp;lt;T&amp;gt;

  public init(array:Array&amp;lt;T&amp;gt;) {
    self.array = array
  }
}


extension ArrayDataSource : UITableViewDataSource {
  public func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
    return 0
  }

  public func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
    return UITableViewCell()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A class that takes an array and implements &lt;code&gt;UITableViewDataSource&lt;/code&gt; using the content of that array (an idea that&amp;rsquo;s discussed in &lt;a href=&#34;http://www.objc.io/issue-1/lighter-view-controllers.html&#34;&gt;objc.io issue #1&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;the-error:ad4d4ff830a667f9bf3648d7b19cfe5c&#34;&gt;The Error&lt;/h1&gt;

&lt;p&gt;As you can see I didn&amp;rsquo;t get very far before running into the compiler error. When you compile the above code (in Xcode 6.1.1 or Xcode 6.3) you&amp;rsquo;ll see the following error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Segmentation Fault 11: While emitting IR for source file /Users/benjaminencz/Development/Private/OSS/ListKitDemo/ListKit/ArrayDataSource.swift
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Along with a nice stack trace from swift compiler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Swift_Crash.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;finding-a-generic-reproducable-example:ad4d4ff830a667f9bf3648d7b19cfe5c&#34;&gt;Finding a generic reproducable example&lt;/h1&gt;

&lt;p&gt;Since this issue exists in both Xcode 6.1.1 and Xcode 6.3 I wanted to file a bug report to make sure this gets resolved in future. I played around with different ways to fix the issue, here are two simple ones that worked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move the conformance to the &lt;code&gt;UITableViewDataSource&lt;/code&gt; protocol into the class definition instead of the class extension&lt;/li&gt;
&lt;li&gt;Remove the generic type from &lt;code&gt;ArrayDataSource&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To actually file a bug report I needed to come up with a generalized, short piece of code that can reproduce the issue. After trying multiple combinations I found this to be the one that describes the problem best:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class D&amp;lt;T&amp;gt;: NSObject {}

extension D: NSObjectProtocol {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two lines are enough code to cause the segmentation fault. The underlying issue seems to be a combination of subclassing from &lt;code&gt;NSObject&lt;/code&gt;, using generics and conforming to &lt;code&gt;NSObjectProtocol&lt;/code&gt; in a class extension while the actual implementation of &lt;code&gt;NSObjectProtocol&lt;/code&gt; happens through inheritance of &lt;code&gt;NSObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t get this minimalistic example to break with any other combination of protocols and subclassing, it seems to be a problem specific to &lt;code&gt;NSObject&lt;/code&gt;. If you find a more general case that causes the segmentation fault, I&amp;rsquo;d love to hear from you.&lt;/p&gt;

&lt;p&gt;For now I have filed a bug report with Apple (19889552) and an &lt;a href=&#34;http://openradar.appspot.com/19889552&#34;&gt;Open Radar Issue&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;I didn&#39;t know that&#34; is the best way to learn</title>
      <link>http://blog.benjamin-encz.de/post/i-didnt-know-that-is-the-best-way-to-learn/</link>
      <pubDate>Thu, 05 Feb 2015 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/i-didnt-know-that-is-the-best-way-to-learn/</guid>
      <description>&lt;p&gt;This is no original thought. Nevertheless I&amp;rsquo;ve been thinking about it often enough to make it worth spending a few minutes framing it in my own words.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently working as a Software Engineer. According to Wikipedia that makes me a &lt;a href=&#34;http://en.wikipedia.org/wiki/Knowledge_worker&#34;&gt;Knowledge Worker&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Knowledge workers are workers whose main capital is knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most Software Engineers that I&amp;rsquo;ve met in my short career know that knowledge is their main asset. Unfortunately this can have very negative side effects.&lt;/p&gt;

&lt;p&gt;Being paid for having knowledge in a scientific field or a certain technology makes it very hard to say &amp;ldquo;I didn&amp;rsquo;t know that&amp;rdquo;. After all, if knowledge is your main asset how could you admit the lack thereof?&lt;/p&gt;

&lt;p&gt;I believe that being honest about what we (believe to) know and what we don&amp;rsquo;t is essential for our learning process as professionals. If it was possible to visualize the knowledge of any two people working in the same profession it would probably look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/knowledge.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the fields we are working today the things we &lt;em&gt;could&lt;/em&gt; know about are growing faster than anyone can learn them. We are essentially knowing less and less about our field, every single day.&lt;/p&gt;

&lt;p&gt;Whatever sort of formal education you have, that portion is only a very small (yet very important) part of your entire knowledge. The rest of your knowledge is based on your personal experience. The chance that you know something your colleague does not know and vice versa is very high, for any given topic and for any point in time.&lt;/p&gt;

&lt;p&gt;I think there are three potential reactions when being confronted with something you don&amp;rsquo;t know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nod and pretend you know about it&lt;/li&gt;
&lt;li&gt;Nod, pretend you know about it and go read about it afterwards&lt;/li&gt;
&lt;li&gt;Admit that you never heard about it and extract as much knowledge as possible from the conversation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong. Reading is great and I think we all should thrive to increase our knowledge in whichever field we are working in. But if you have the chance to learn something you are interested in from a person who knows about it at the small cost of a &amp;ldquo;I didn&amp;rsquo;t know that&amp;rdquo; it wouldn&amp;rsquo;t be smart to let that opportunity pass by.&lt;/p&gt;

&lt;p&gt;Learning from other people is incredibly powerful and one the fastest ways to gain new knowledge. Smart people are happy to share their knowledge. You should ask as many questions as possible.&lt;/p&gt;

&lt;p&gt;While writing this I felt like I should come up with a new definition of a knowledge worker, one that is closer to the reality of explosive information growth in the 21st century:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Knowledge workers are workers with a strong understanding of concepts in their field and an ability to quickly acquire new knowledge by the most efficient means.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You know a little, you know a lot. Make the best out of this contradiction.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching iOS devices and the Keychain</title>
      <link>http://blog.benjamin-encz.de/post/switching-ios-devices-and-the-keychain/</link>
      <pubDate>Sun, 14 Dec 2014 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/switching-ios-devices-and-the-keychain/</guid>
      <description>&lt;p&gt;Unfortunately some of my &lt;a href=&#34;http://www.movieloggr.com/&#34;&gt;MovieLoggr&lt;/a&gt; users ran into the following issue: After switching to a new phone and restoring it from a Backup MovieLoggr would behave unexpectetly (and in some cases crash) because the App could no longer access the user&amp;rsquo;s password and unfortunately did not handle this gracefully.&lt;/p&gt;

&lt;p&gt;Typically iOS applications store passwords in the encrypted &lt;em&gt;Keychain&lt;/em&gt;. When creating unencrypted backups, which is the default for creating backups with iTunes, the iOS Keychain is not stored (it is stored if you create an encrypted one or use iCloud backups).  This means, after restoring your new device from a backup, all of your apps that now run on your new device can no longer access the passwords they have securely stored on your previous device.&lt;/p&gt;

&lt;p&gt;When using the Keychain to store passwords you should be able to handle this case and request the user to re-enter their account credentials when restoring your app from an unecrypted backup.&lt;/p&gt;

&lt;p&gt;If the case that I described occurs, the Keychain will inform you that the password you are looking for could not be found, this is where you need to ask the user to re-enter their password. You can reproduce this case for testing purposes by choosing a different &lt;em&gt;ServiceName&lt;/em&gt; for accessing the Keychain than you used for creating the Keychain entry.&lt;/p&gt;

&lt;p&gt;P.S.: Apple&amp;rsquo;s Keychain API is pretty arcane so I&amp;rsquo;m using &lt;a href=&#34;https://github.com/soffes/sskeychain&#34;&gt;SSKeychain&lt;/a&gt; which provides a nice abstraction instead.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>