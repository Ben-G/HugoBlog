<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[Thinking inside a large box];</title>
    <link>http://blog.benjamin-encz.de/</link>
    <description>Recent content on [Thinking inside a large box];</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Feb 2017 22:24:54 -0800</lastBuildDate>
    <atom:link href="http://blog.benjamin-encz.de/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bridging Swift Types to Objective-C</title>
      <link>http://blog.benjamin-encz.de/post/bridging-swift-types-to-objective-c/</link>
      <pubDate>Tue, 14 Feb 2017 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/bridging-swift-types-to-objective-c/</guid>
      <description>

&lt;p&gt;At PlanGrid we started adopting Swift prior to the 1.0 release. Despite the tooling problems you&amp;rsquo;re probably familiar with, we&amp;rsquo;re still excited Swift users and have written almost all new code since the summer of 2014 in Swift. We are doing that within a large legacy codebase so more than 50% of our application code is still in Objective-C. As in many projects Swift and Objective-C need to co-exist.&lt;/p&gt;

&lt;p&gt;Throwing an &lt;code&gt;@objc&lt;/code&gt; onto our new Swift types would have been the easiest way to interop with Objective-C. However, many Swift features aren&amp;rsquo;t bridgable and we quickly noticed that this approach would water down our Swift code to Objective-C code with a different syntax (no structs, enums with associated values, default arguments, etc.).&lt;/p&gt;

&lt;h2 id=&#34;a-recipe-for-bridging-swift-types:7f9788483f7bdff88f178bf8178831fb&#34;&gt;A Recipe for Bridging Swift Types&lt;/h2&gt;

&lt;p&gt;We decided to create separate types that would be responsible for bridging our Swift types to Objective-C (and vice versa). These types wrap around the Swift types and take care of translating language concepts where necessary.&lt;/p&gt;

&lt;p&gt;We came up with a simple recipe for creating these bridged types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new type called &lt;code&gt;_ObjC{type_name}&lt;/code&gt; and rename that type for Objective-C using the &lt;code&gt;@objc&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Create an initializer that takes the Swift type.&lt;/li&gt;
&lt;li&gt;Create a public read, private write property to store the underlying Swift type.&lt;/li&gt;
&lt;li&gt;Expose getters, setters and methods that reflect the members of the underlying Swift type and implement them by calling to the underlying Swift type.&lt;/li&gt;
&lt;li&gt;If the type needs to have an initializer thats visible in Objective-C implement that initializer by constructing the underlying Swift type.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;bridging-example:7f9788483f7bdff88f178bf8178831fb&#34;&gt;Bridging Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at an example of bridging Swift types to Objective-C with the method described above. Below we have a shopping cart type and a checkout options type.&lt;/p&gt;

&lt;p&gt;In this example we wouldn&amp;rsquo;t be able to expose the type to Objective-C, because enums with associated types can&amp;rsquo;t be bridged.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CheckoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;creditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;paypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CheckoutOption&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;
  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;

  &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CheckoutOption&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;
      &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we&amp;rsquo;re anticipating our entire codebase to move to Swift over time, we shouldn&amp;rsquo;t compromise our new types for bridgeability. Instead, let&amp;rsquo;s create a wrapper type:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;@objc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_ObjCShoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSObject&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// The underlying Swift type is stored in the bridged type. This way&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Swift code that consumes the bridged Objective-C type can pull out and&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// use the underlying Swift type.  &lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// All initializers construct the underlying Swift type&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// This initializer allows Swift code to create a bridged value and pass&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// it to Objective-C code.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Computed properties are implemented based on properties of the&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// underlying Swift type.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;newValue&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Properties and methods can translate language features where needed.&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// E.g. turn enums with associated types into distinct Objective-C types.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;creditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;):&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_ObjCCheckoutOptionCreditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;paypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;):&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_ObjCCheckoutOptionPaypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// We can also provide convenience methods for Objective-C. Like the following&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// two methods that allow setting enums with associated values from Objective-C.&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;setCheckoutOptionToCreditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;withCCNumber&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;creditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;setCheckoutOptionToPayPal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;withEmail&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shoppingCart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;checkoutOption&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;paypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;@objc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;CheckoutOptionCreditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_ObjCCheckoutOptionCreditCard&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSObject&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;creditCardNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;creditCardNumber&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ccNumber&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;@objc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;CheckoutOptionPaypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_ObjCCheckoutOptionPaypal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSObject&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;email&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This example is pretty verbose, since we&amp;rsquo;re expressing the cases of our enums
as Objective-C types. How thorough you want to map Swift types to Objective-C
will depend on your use case.&lt;/p&gt;

&lt;p&gt;Now this type can be used from Objective-C:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cart&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ShoppingCart&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;alloc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f57900&#34;&gt;initWithItems&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;@[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;@&amp;quot;TV&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;@&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;cart&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;items&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;@[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;@&amp;quot;TV&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cart&lt;/span&gt; &lt;span style=&#34;color: #f57900&#34;&gt;setCheckoutOptionToPayPalWithEmail&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;@&amp;quot;test@test.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We can now pass this instance to Swift code and the receiver can use the
underlying Swift type, stored within the bridged type, with all of its rich language features.&lt;/p&gt;

&lt;p&gt;The principles outlined above are also used for the Swift
Foundation overlay to create Swift wrappers around Objective-C types (&lt;a href=&#34;https://github.com/apple/swift/blob/adc54c8a4d13fbebfeb68244bac401ef2528d6d0/stdlib/public/SDK/Foundation/Calendar.swift#L143-L150&#34;&gt;see Calendar.swift&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Last September my friend Russ Bishop proposed exposing the &lt;code&gt;_ObjectiveCBridgeable&lt;/code&gt; protocol as part of the standard library. That proposal has been deferred but if it&amp;rsquo;s implemented it will further formalize a recipe for bridging types between Swift and Objective-C and potentially other languages?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We agree that it would be valuable to give library authors the ability to bridge their own types from Objective-C into Swift using the same mechanisms as Foundation. However, we lack the confidence and implementation experience to commit to _ObjectiveCBridgeable in its current form as public API. In its current form, as its name suggests, the protocol was designed to accommodate the specific needs of bridging Objective-C object types to Swift value types. In the future, we may want to bridge with other platforms, including C++ value types or other object systems such as COM, GObject, JVM, or CLR. It isn&amp;rsquo;t clear at this point whether these would be served by a generalization of the existing mechanism, or by bespoke bridging protocols tailored to each case. This is a valuable area to explore, but we feel that it is too early at this point to accept our current design as public API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0058-objectivecbridgeable.md&#34;&gt;Swift Evolution Proposal: Allow Swift types to provide custom Objective-C representations&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I don&#39;t Believe in Uber&#39;s Success</title>
      <link>http://blog.benjamin-encz.de/post/why-i-dont-believe-in-ubers-success/</link>
      <pubDate>Thu, 19 Jan 2017 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/why-i-dont-believe-in-ubers-success/</guid>
      <description>&lt;p&gt;I wanted to write this blog post for well over half a year. &lt;strong&gt;I don&amp;rsquo;t believe Uber will be a successful business&lt;/strong&gt;. I&amp;rsquo;ve been making my points in individual conversations over and over again - with this post I&amp;rsquo;m creating a writeup of my arguments that I can share in future.&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;ve had a lot of discussions about Uber in person, it makes the most sense to write this piece in the platonic dialogue form.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Why would you believe Uber won&amp;rsquo;t be successful? They are growing extremely fast, both in the US and internationally.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uber&amp;rsquo;s growth is fueled by subsidies, both for riders and drivers. From the financials that have been leaked so far we can see that Uber is generating a huge and growing loss&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:572a621f19f2c166f4012f2a43318fb1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:572a621f19f2c166f4012f2a43318fb1:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The leaked financials only show Uber&amp;rsquo;s results on a company level - a loss of $2 billion in 2015. This includes various subsidies, marketing costs and Uber&amp;rsquo;s gigantic losses it generated in China in 2015.  As a result, they don&amp;rsquo;t allow us to calculate by exactly how much Uber is subsidizing its service.&lt;/p&gt;

&lt;p&gt;However, there is enough anecdotal evidence to see that individual rides are subsidized heavily. Within San Francisco I barely take an Uber Pool ride for more than $6 (often times these are 20 minute trips with only one additional rider). On my recent trip to Buenos Aires our average 10 minute Uber ride cost between $2-$3, compare to $6-$7 with a regular cab.&lt;/p&gt;

&lt;p&gt;These subsidies are not only causing a loss for Uber, they are also distorting the potential customer base. More people are riding with Uber than with regular Taxis because it&amp;rsquo;s significantly cheaper. If Uber would increase the prices their growth would slow significantly.&lt;/p&gt;

&lt;p&gt;Drivers are also heavily subsidized&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:572a621f19f2c166f4012f2a43318fb1:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:572a621f19f2c166f4012f2a43318fb1:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. Additionally, again from anecdotal evidence and from the &lt;a href=&#34;https://www.cnet.com/news/uber-drivers-demand-better-pay-in-nation-wide-protest/&#34;&gt;driver protests last year&lt;/a&gt;, it seems obvious that many drivers are miscalculating their earnings often ignoring tax, insurance and wear &amp;amp; tear implications of using their personal car. This means it will cost Uber even more to attract drivers in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fair enough, but this is how startups work, right? They generate a loss in order to grow. Once they are a huge business that can leverage network effects, economies of scale or a monopoly position they switch gears and become profitable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this regard Uber is pretty different from other fast growing startups.&lt;/p&gt;

&lt;p&gt;Economies of scale won&amp;rsquo;t help, since Uber has a high fixed cost per unit associated with their service - the drivers - that won&amp;rsquo;t become significantly cheaper as the service grows.&lt;/p&gt;

&lt;p&gt;Network effects are mostly irrelevant for Uber&amp;rsquo;s business. Yes, they need a large supply of drivers to make the service viable, but this isn&amp;rsquo;t an advantage of Uber compared to regular cabs which have sufficient availability in most cities. I also don&amp;rsquo;t see a potential network effect in Uber&amp;rsquo;s global availability. Most users take rides in their home city and they would happily switch to a local competitor with lower prices, even if that means they would need to use a different service when they are traveling.&lt;/p&gt;

&lt;p&gt;Even though Uber is growing fast, it seems extremely unlikely that they are able to build a transportation monopoly. There&amp;rsquo;s too much competition, most importantly public transportation that&amp;rsquo;s funded by the government. Even if they could out-price most of their competition and become a monopoly, they would see the competition reappear quickly after they tried to use that position to raise prices. It also seems unlikely that Uber will find enough investors to fund this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&amp;rsquo;re forgetting about self-driving cars. Uber is obviously betting on heavily reducing the cost of their service by eliminating drivers from the equation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we will see fully autonomous vehicles that can navigate city traffic in the near future, even though that in itself seems very unlikely. If this technology becomes available, &lt;em&gt;I doubt that Uber will have a monopoly on self-driving car technology&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Car manufacturers have been working in this area for decades and other, better funded, technology companies, like Google, are competing as well. I think it&amp;rsquo;s safe to say that many companies will have access to self-driving car technology. At that point it seems very likely that some cars with self-driving technology will be sold to the public (Tesla is already doing this).&lt;/p&gt;

&lt;p&gt;Now self-driving cars are a commodity, just like airplanes, that can be acquired by any Uber competitor. In this scenario I don&amp;rsquo;t see how Uber can generate reasonable profits. If they are turning a large profit in any given market it will be easy for competitors with sufficient capital to enter that market and compete on price. At this point the ride sharing business looks a lot like the airline business, with meager profit margins of less than 1%&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:572a621f19f2c166f4012f2a43318fb1:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:572a621f19f2c166f4012f2a43318fb1:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;As soon as self-driving technology is ready for the mass market, I don’t see any network effects or proprietary technology that make Uber’s business defensible against competitors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interesting thoughts! So you think the investors and all folks in the tech industry that are bullish on Uber are wrong? What do you think will happen to the company?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t see a success scenario for Uber in the case in which self-driving cars become mass market ready in the near future. Of the services that Uber is currently offering, I can only see one that could end up successful: ride sharing.&lt;/p&gt;

&lt;p&gt;Assuming Uber continues to build a large network of drivers &amp;amp; riders they might be able to offer shared rides that are cheap &lt;em&gt;and&lt;/em&gt; generate a profit. When Uber Pool works well, it becomes a viable alternative to using public transportation or to owning your own car. Does this outlook justify Uber&amp;rsquo;s latest valuation of $68 billion?&lt;/p&gt;

&lt;p&gt;Without running the numbers myself, I doubt it&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:572a621f19f2c166f4012f2a43318fb1:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:572a621f19f2c166f4012f2a43318fb1:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. And I can&amp;rsquo;t imagine investors would be satisfied with Uber focusing on becoming a ride-sharing company. So Uber might be in a similar situation to Twitter - it could offer a good, profitable service if it weren&amp;rsquo;t for it&amp;rsquo;s sky high valuation and ambition.&lt;/p&gt;

&lt;p&gt;I certainly think there is room for a company that offers cheap shared rides based on a large network of drivers and riders and a good matching algorithm. At this point it seems like that needs to be a company with a smaller valuation and smaller ambitions.&lt;/p&gt;

&lt;p&gt;Unless Uber is working on some unpublished new products that entirely change the direction of the company, I&amp;rsquo;m pretty convinced they will run out of money and become a major footnote in Silicon Valley&amp;rsquo;s history.&lt;/p&gt;

&lt;p&gt;But then again, I might be missing something that the investors are seeing?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also discuss &lt;a href=&#34;https://news.ycombinator.com/item?id=13437414&#34;&gt;this post on Hacker News.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:572a621f19f2c166f4012f2a43318fb1:1&#34;&gt;&lt;a href=&#34;http://www.nakedcapitalism.com/2016/11/can-uber-ever-deliver-part-one-understanding-ubers-bleak-operating-economics.html#_edn3&#34;&gt;A post on nakedcapatlism&lt;/a&gt; has shared the leaked financials. Note, that it appears &lt;a href=&#34;https://twitter.com/EricNewcomer/status/804470392123363328&#34;&gt;that losses of Uber in China are included in these financials&lt;/a&gt;, even though the article claims the opposite.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:572a621f19f2c166f4012f2a43318fb1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:572a621f19f2c166f4012f2a43318fb1:2&#34;&gt;&lt;a href=&#34;https://www.bloomberg.com/news/articles/2016-08-25/uber-loses-at-least-1-2-billion-in-first-half-of-2016&#34;&gt;Uber Loses at Least $1.2 Billion in First Half of 2016&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:572a621f19f2c166f4012f2a43318fb1:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:572a621f19f2c166f4012f2a43318fb1:3&#34;&gt;&lt;a href=&#34;http://www.economist.com/blogs/economist-explains/2014/02/economist-explains-5&#34;&gt;The Economist explains: Why airlines make such meagre profits&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:572a621f19f2c166f4012f2a43318fb1:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:572a621f19f2c166f4012f2a43318fb1:4&#34;&gt;Fivethirtyeight took a shot at analzying &lt;a href=&#34;https://fivethirtyeight.com/features/uber-isnt-worth-17-billion/&#34;&gt;Uber&amp;rsquo;s valuation from 2014 in light of the size of the global taxi business&lt;/a&gt;. Based on these numbers Uber would need to increase the size of its target market significantly to justify its current valuation (to ~5x-10x of the taxi business today, depending on how much it can increase its market share at the same time).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:572a621f19f2c166f4012f2a43318fb1:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Data Race Detection by Implementing it in Swift</title>
      <link>http://blog.benjamin-encz.de/post/understanding-data-race-detection-by-implementing-in-swift/</link>
      <pubDate>Fri, 18 Nov 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/understanding-data-race-detection-by-implementing-in-swift/</guid>
      <description>&lt;p&gt;TL;DR: In order to learn more about how Thread Sanitizer&amp;rsquo;s data race detection works I&amp;rsquo;ve implemented a very simple version in Swift. &lt;a href=&#34;https://github.com/Ben-G/DataRaceDetector&#34;&gt;You can find it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We all know concurrency is hard. It&amp;rsquo;s easy to make mistakes when attempting to synchronize access to shared resources and the resulting issues are often extremely hard to reproduce and debug.&lt;/p&gt;

&lt;p&gt;So I was very excited when I learned about data race detection in LLVM&amp;rsquo;s Thread Sanitizer in this year&amp;rsquo;s WWDC Session 412.&lt;/p&gt;

&lt;p&gt;Thread Sanitizer is a runtime analyzer that (among other things) detects the potential for data races. It ships with Xcode 8 and supports C++, Objective-C and Swift &amp;gt;= 3.0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(In case you haven&amp;rsquo;t heard the term data race before: a data race is a condition in concurrent code where multiple threads read/write to/from a shared memory location without being synchronized by some locking mechanism. These races can lead to crashes or unexpected behavior).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The astonishing aspect of Thread Sanitizer is that it detects the potential for data races without needing them to actually occur. This means you&amp;rsquo;ll no longer need to run your app or your tests hundreds of times trying to reproduce data races.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s the secret sauce that makes this possible?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thread Sanitizer was originally developed by Google, and they published a paper that describes the algorithm in detail &lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/35604.pdf&#34;&gt;here&lt;/a&gt; (if you&amp;rsquo;re not a fan of reading dense papers that include formal logic, rather stick with this blog post and the Swift code on GitHub).&lt;/p&gt;

&lt;p&gt;The data race detection uses a general algorithm named &lt;a href=&#34;https://en.wikipedia.org/wiki/Vector_clock&#34;&gt;vector clock&lt;/a&gt;. In WWDC Session 412 an Apple engineer does a great job at describing the general algorithm in simple terms. &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2016/412/?time=993&#34;&gt;Here&amp;rsquo;s the relevant part of the session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here&amp;rsquo;s the gist of how it works:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When run with Thread Sanitizer, LLVM instruments your code such that all accesses to memory locations are recorded. With this recording, Thread Sanitizer keeps track which memory locations have been accessed by which threads.&lt;/p&gt;

&lt;p&gt;Each thread stores a counter for each memory location (that&amp;rsquo;s the &lt;em&gt;vector clock&lt;/em&gt;) that gets increased every time the thread accesses the memory location. Whenever an access to a memory location occurs, the counter of the currently active thread is also stored in storage that is associated with the memory location. Thus the memory location has the latest values of the counters of all threads that have ever accessed it.&lt;/p&gt;

&lt;p&gt;A thread does not only keep track of its own counter value; it also stores the counter values of all the other threads that are accessing the same memory location (in practice there&amp;rsquo;s an upper bound to the amount of threads that are tracked to avoid excessive memory consumption). However, a thread only gets access to the counter values of other threads when a synchronization event occurs (i.e. when a mutex or a serial dispatch queue is used) before a value is accessed.&lt;/p&gt;

&lt;p&gt;This aspect of the algorithm can be used to detect data races when a memory location is being accessed. The algorithm compares the counters for &lt;em&gt;all&lt;/em&gt; threads that are stored alongside the memory location with the counters of all threads that are stored as part of the &lt;em&gt;currently active thread&lt;/em&gt;. If any of the values are out of sync, we have detected the potential for a data race, since we can assume that the currently active thread has concurrently accessed a shared memory location without using a synchronization mechanism.&lt;/p&gt;

&lt;p&gt;This description skips over some details that you can find in my Swift implementation and its documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation in Swift:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a fun little exercise that helped me understand this algorithm better, I&amp;rsquo;ve implemented a simplified &lt;a href=&#34;https://github.com/Ben-G/DataRaceDetector&#34;&gt;data race detection algorithm in Swift. You can find it on GitHub&lt;/a&gt;. I&amp;rsquo;ve added test cases and a whole bunch of documentation, so that I&amp;rsquo;ll be able to remember how this thing works a few weeks from now. If you&amp;rsquo;re curious to learn more about the details of the algorithm they might be interesting to you, too!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple Isn&#39;t Doomed Quite Yet</title>
      <link>http://blog.benjamin-encz.de/post/apple-is-not-doomed-quite-yet/</link>
      <pubDate>Mon, 31 Oct 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/apple-is-not-doomed-quite-yet/</guid>
      <description>

&lt;p&gt;The outcry in the Apple community after the latest Apple event has been huge. For many of its loyal customers it seems that the last bit of the remaining magic of the Jobs era has vanished.&lt;/p&gt;

&lt;p&gt;I personally have only been following Apple more or less closely since 2012. From this position I feel like I&amp;rsquo;m able to view the state of Apple from a mainstream consumer&amp;rsquo;s angle. From that vantage point it seems like Apple has made mistakes, but it is not doomed quite yet.&lt;/p&gt;

&lt;h2 id=&#34;what-has-changed:e8c640405ea6d997eb27107cface5d12&#34;&gt;What Has Changed?&lt;/h2&gt;

&lt;p&gt;What struck me the most about the MacBook announcement was the seemingly obvious product design mistakes that Apple made. To me this was a first for Apple. In the past I used to describe my affection to Apple and its products like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You know that feeling when you are using a product and you get irritated by some of its flaws and you wonder how any reasonable, talented person could make such an obvious mistake? I never had this with Apple products and I don&amp;rsquo;t think I can say that about any other company out there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To me that was Apple in a nutshell. In the products I bought and used they never made huge design mistakes and often they would surprise you with small, fascinating details (i.e. MagSafe). &lt;strong&gt;It felt like Apple magically was able to create a sound, whole product that was free from artifacts of politics, design-by-committee, short-term-thinking and other plagues that must be the underlying reasons for flaws in most of the products we buy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The MacBook announcement brought a lot of changes. Some of them are disliked for nostalgic reasons (i.e. the removal of the startup sound or the backlit Apple Logo). I think we can leave these aside. But some changes seem like glaring mistakes with no reasonable excuse:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why does the headphone jack remain in the new MacBooks while it was removed from the latest iPhone?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why didn&amp;rsquo;t Apple address other compatibility issues, like the fact that the latest iPhone cannot be connected to the latest MacBook without an adapter?&lt;/em&gt; (A USB-C to Lightning Cable that ships out of the box would seem like an easy fix.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Why is there no separate product name for the 13-inch MacBook Pro without Touch Bar?&lt;/em&gt; &lt;a href=&#34;https://twitter.com/marcoarment/status/792818935695601664&#34;&gt;Marco Arment named it the MacBook Escape&lt;/a&gt;, but its official name appears to be &lt;em&gt;The MacBook Pro (13-inch, Late 2016, Two Thunderbolt 3 Ports)&lt;/em&gt;. Apple&amp;rsquo;s product names were an extremely important part of their brand&amp;rsquo;s success. No one talks about the LG 43LH5700 or the Dell i5368-0027GRY Inspiron 13, but people used to refer to Apple products by their actual name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the perspective of a mainstream consumer these things stand out to me the most. Out of the box, Apple hardware is no longer well integrated. And Apple&amp;rsquo;s product lineup is confusing, even to people that follow the company fairly closely. More importantly, Apple is no longer the company that avoids obvious mistakes; what does that mean for future products?&lt;/p&gt;

&lt;h2 id=&#34;pricing-quality:e8c640405ea6d997eb27107cface5d12&#34;&gt;Pricing &amp;amp; Quality&lt;/h2&gt;

&lt;p&gt;There are two further trends that worry me. While Apple hasn&amp;rsquo;t discontinued the MacBook Air, it seems like they will in the near future. This would remove the $999 entry level Apple Notebook. I assume that Apple will try to increase profits by making the MacBook the new entry level notebook, which currently stands at $1299. The price hike doesn&amp;rsquo;t end there. Since additional adapters are required and the power cord extension no longer ships out of the box you can easily expect another $100-$200 in cost.&lt;/p&gt;

&lt;p&gt;Apple has always been a premium brand and its loyal customers have embraced it. But this premium price was paid for a whole product that worked well out of the box and was well integrated into Apple&amp;rsquo;s ecosystem. Today this increase in price stands in a stark contrast to the decrease in software quality in the last years and the product design issues I discussed.&lt;/p&gt;

&lt;p&gt;I am not worried about loyal customers jumping ship due to this price hike anytime soon, but I am afraid that Apple might have a harder time attracting new customers to its ecosystem.&lt;/p&gt;

&lt;p&gt;Especially when it comes to the price changes it seems that Apple has recently prioritized maximizing profits over true innovation.&lt;/p&gt;

&lt;p&gt;Steve Jobs used to frequently point out that Apple was guided strictly by the customer&amp;rsquo;s opinion. If they like it they buy it, if not, they don&amp;rsquo;t. I think this feedback loop no longer exists in the same form. In many segments Apple has become the dominant company. For many customers buying Apple is the default and it takes a strong reason to leave the ecosystem. Thus for the most loyal and important customers the buying decisions will be a lagging indicator for Apple. Once the loyal fans leave the platform it will probably be too late to respond.&lt;/p&gt;

&lt;h2 id=&#34;not-doomed-quite-yet:e8c640405ea6d997eb27107cface5d12&#34;&gt;Not Doomed Quite Yet&lt;/h2&gt;

&lt;p&gt;I think the biggest point in favor of Apple is that it still doesn&amp;rsquo;t have very strong competitors fighting for its core audience. While the quality of product design and software might have declined, for many it&amp;rsquo;s still leaps and bounds ahead of other companies. It might just be the legacy of Steve Jobs, but most of Apple&amp;rsquo;s products are still the closest you can get to &lt;em&gt;&amp;ldquo;it just works&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To remain successful in future, I don&amp;rsquo;t think that the Apple needs to invent a new product category. Apple&amp;rsquo;s most successful products have relied on extraordinary execution, not on true innovation. I think they need to go back to the roots and once again become the company that focuses more on product details than any other.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shareholders will likely disagree. They want to see Apple create a new product category like the iPhone (within VR, self-driving cars, etc.) while extracting as much profit as possible from their existing, successful products. This might be the biggest problem Apple will be facing in future. Optimizing a product lineup for shareholder value means making it worse for customers.&lt;/p&gt;

&lt;p&gt;The iPhone wasn&amp;rsquo;t created with the goal of making Apple the most valuable company in the world. And products created with the goal of keeping Apple the most valuable company in the world are unlikely to be as revolutionary as the iPhone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple&amp;rsquo;s true innovation has been a long-term focus on customer value. Let&amp;rsquo;s go back to that future.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Declarative API Design in Swift</title>
      <link>http://blog.benjamin-encz.de/post/declarative-api-design-in-swift/</link>
      <pubDate>Mon, 03 Oct 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/declarative-api-design-in-swift/</guid>
      <description>

&lt;p&gt;In my first real job as an iOS developer I built an XML parser and a simple layout engine - both had in common that they had a declarative interface. The parsers was driven by a &lt;code&gt;.plist&lt;/code&gt; file that mapped XML elements to Objective-C classes. The layout engine allowed you to describe layouts in an HTML-like language (this was before AutoLayout &amp;amp; CollectionViews existed).&lt;/p&gt;

&lt;p&gt;Though neither of these libraries were even close to perfect, they showed me four main advantages of declarative code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Separation of concerns&lt;/strong&gt;: The parts of the code that are written in a declarative style only declare an intent, without having any understanding of the underlying implementation. Separation of concerns happens naturally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less repeated code&lt;/strong&gt;: A declarative system shares a common implementation. Most of the code is configuration. No risk of repeating implementation details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptional API design&lt;/strong&gt;: Declarative APIs allow consumers to configure an existing implementation instead of providing their own one. The API surface can be kept minimal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;/strong&gt;: Signal to noise ratio of declarative code is great!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These days I write most of my code in Swift which lends itself well for a declarative programming style&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b989f8f58ed8c5aa5f8ff74af770fe9e:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b989f8f58ed8c5aa5f8ff74af770fe9e:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The majority of types I define are simple structs that either describe a piece of data or an intent. Separate types, typically generic classes, are then responsible for consuming these intents and implementing the necessary work. We also use this approach throughout all new Swift code we&amp;rsquo;re writing in the PlanGrid app. It has had a huge impact on code readability and developer efficiency.&lt;/p&gt;

&lt;p&gt;Today I want to discuss an API from the PlanGrid app, that used to be implemented using &lt;code&gt;NSOperationQueue&lt;/code&gt; and since has been moved to a more declarative approach - discussing this API should demonstrate the various benefits of a declarative programming style.&lt;/p&gt;

&lt;h2 id=&#34;building-a-declarative-request-sequence-in-swift:b989f8f58ed8c5aa5f8ff74af770fe9e&#34;&gt;Building a Declarative Request Sequence in Swift&lt;/h2&gt;

&lt;p&gt;The API that we&amp;rsquo;ve re-written is responsible for syncing local changes (that might have occurred offline) with our API server. I won&amp;rsquo;t go into details of the change tracking approach, but will instead only discuss the generation &amp;amp; execution of network requests.&lt;/p&gt;

&lt;p&gt;For this post I want to focus on one particular request type: uploading locally generated images. Due to various reasons (outside of the scope of this blog post) three separate requests are involved in uploading an image:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Request to API Server. API Server responds with information for an image upload to AWS.&lt;/li&gt;
&lt;li&gt;Image Upload to AWS (using information from previous request).&lt;/li&gt;
&lt;li&gt;Request to API Server to confirm completed upload.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since we have a few upload tasks that involve such request sequences, we decided to model this as a type and support in our upload infrastructure.&lt;/p&gt;

&lt;h3 id=&#34;defining-the-request-sequence-protocol:b989f8f58ed8c5aa5f8ff74af770fe9e&#34;&gt;Defining the Request Sequence Protocol&lt;/h3&gt;

&lt;p&gt;We decided to introduce a separate type that is only responsible for describing a sequence of network requests. That type is consumed by our uploader class which turns the descriptions into actual network requests (the uploader itself won&amp;rsquo;t be discussed as part of this post).&lt;/p&gt;

&lt;p&gt;The following type captures the essence of our control flow: we have a sequences of requests. Each request might depend on the result of the previous request.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Some types names might seem a little odd, but they mostly follow an app-specific ontology (e.g. Operation). Others should simply be renamed; still waiting for that refactor capability for Swift code&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;typealias&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; 
	&lt;span style=&#34;color: #000000&#34;&gt;response&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSURLResponse&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; 
	&lt;span style=&#34;color: #000000&#34;&gt;responseBody&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;JsonValue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// A sequence of push requests required to sync this operation with the server.&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// As soon as a request of this sequence completes, &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// `PushSyncQueueManager` will poll the sequence for the next request.&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// If `nil` is returned for the `nextRequest` then &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// this sequence is considered complete.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;OperationRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// When this method returns `nil` the entire `OperationRequestSequence` &lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// is considered completed.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;nextRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previousRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When asking the request sequence to generate a request, by calling the &lt;code&gt;nextRequest:&lt;/code&gt; method, we provide a reference to previous request, a &lt;code&gt;NSURLResponse&lt;/code&gt; and if available the JSON response body. Each request might result in a subsequent request (returns a new &lt;code&gt;PushRequest&lt;/code&gt;), no subsequent request (returns &lt;code&gt;nil&lt;/code&gt;) or an in an error in case the previous request didn&amp;rsquo;t provide the response that is necessary to continue (in which case the request sequence &lt;code&gt;throws&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting that &lt;code&gt;PushRequest&lt;/code&gt; isn&amp;rsquo;t an ideal name for the return type of this method. The type is only a description of a request (endpoint, HTTP method, etc.), it doesn&amp;rsquo;t perform any work on its own. That&amp;rsquo;s an important aspect of this declarative design.&lt;/p&gt;

&lt;p&gt;You might also have noticed that the protocol comes with a &lt;code&gt;class&lt;/code&gt; requirement. We made this decision after realizing that the &lt;code&gt;OperationRequestSequence&lt;/code&gt; is a stateful type. It needs to be able to capture and use results from previous requests (the third request might need to access the response from the first request). While this could have been modeled with a struct with &lt;code&gt;mutating&lt;/code&gt; methods, that approach made the code in the uploader a fair bit more complex (correctly re-assigning mutated struct values can require some boilerplate code).&lt;/p&gt;

&lt;p&gt;After implementing the first request sequence based on the &lt;code&gt;OperationRequestSequence&lt;/code&gt; protocol, we noticed that it often would be more convenient to simply provide an array of chained requests instead of implementing the &lt;code&gt;nextRequest&lt;/code&gt; method. We added an &lt;code&gt;ArrayRequestSequence&lt;/code&gt; protocol that provides a default implementation based on an array of requests:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// If each requests implements the signature of the `nextRequest` method itself,&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// we can provide an implementation of `nextRequest` that simply composes all&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// requests in the `requests` array by iterating over them.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;typealias&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;RequestContinuation&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ArrayRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;OperationRequestSequence&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;currentRequestIndex&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;RequestContinuation&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ArrayRequestSequence&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;nextRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;currentRequestIndex&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Iterate over all requests in the requests array. &lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Pass result from previous request to next one.&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;nextRequest&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;currentRequestIndex&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;currentRequestIndex&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;nextRequest&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point it became almost trivial to define a new upload sequence.&lt;/p&gt;

&lt;h3 id=&#34;implementing-the-request-sequence-protocol:b989f8f58ed8c5aa5f8ff74af770fe9e&#34;&gt;Implementing the Request Sequence Protocol&lt;/h3&gt;

&lt;p&gt;As an example, let&amp;rsquo;s take a look at the upload sequence for uploading snapshots (snapshots in PlanGrid capture a blueprint + annotations in an image that can be exported):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Describes a sequence of requests for uploading a snapshot.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SnapshotUploadRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ArrayRequestSequence&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Removed boilerplate initializer &amp;amp; &lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// instance variable definition code...&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// This is the definition of the request sequence&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;RequestContinuation&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// 1. Get AWS Upload Package from API&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_allocationRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// 2. Upload Snapshot to AWS&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_awsUploadRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// 3. Confirm Upload with API&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_metadataRequest&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}()&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// It follows the detailed definition of the individual requests:&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_allocationRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Generate an API request for this file upload&lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Pass file size in JSON format in the request body&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushInMemoryRequestDescription&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;relativeURL&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ApiEndpoints&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocation&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;httpMethod&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;jsonBody&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;JsonValue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;
                    &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;filesize&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;imageUploadDescription&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;fullFileSize&lt;/span&gt;
                &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;requestIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SnapshotUploadRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;allocationRequest&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_awsUploadRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Check for presence of AWS allocation data in response body&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;allocationData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;responseBody&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ImageCreationOperationError&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;MissingAllocationData&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
	
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Attempt to parse AWS allocation data&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AWSAllocationPackage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;allocationData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;snapshot&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt;

        &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ImageCreationOperationError&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;MissingAllocationData&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Get filesystem path for this snapshot&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thumbImageFilePath&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSURL&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;fileURLWithPath&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;SnapshotModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;pathForUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;imageUploadDescription&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;modelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Full&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Generate a multipart/form-data request&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// that uploads the image to AWS&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AWSMultiPartRequestDescription&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;targetURL&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;targetUrl&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;httpMethod&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;fileURL&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thumbImageFilePath&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;requestIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SnapshotUploadRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotAWS&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;formParameters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocationData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;fields&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_metadataRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;previous&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PreviousRequestTuple&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushRequest&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Generate an API request to confirm the completed upload&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PushInMemoryRequestDescription&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;relativeURL&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ApiEndpoints&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotAllocation&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;),&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;httpMethod&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;PUT&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;jsonBody&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;snapshotMetadata&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;operationId&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;affectedModelUid&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;requestIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SnapshotUploadRequestSequence&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;metadataRequest&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A few things should stand out in this implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has almost no imperative code. Most code describes network request based on instance variables and previous requests.&lt;/li&gt;
&lt;li&gt;It doesn&amp;rsquo;t call the networking layer, nor does it have any knowledge of the type that actually performs the upload. It just describes the intent of each request. In fact, the code has no observable side effects at all, it only mutates internal state.&lt;/li&gt;
&lt;li&gt;There is almost no error handling code here. The responsibility of this type is only to handle errors specific to this request sequence (e.g. missing required data from a previous request). All other errors are generically handled in the networking layer.&lt;/li&gt;
&lt;li&gt;We are using separate types (&lt;code&gt;PushInMemoryRequestDescription&lt;/code&gt;/&lt;code&gt;AWSMultipartRequestDescription&lt;/code&gt;) to model requests to our API vs. requests to AWS. Our uploader switches over these types and uses a different &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; for each. This way we don&amp;rsquo;t send our API auth token to AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won&amp;rsquo;t discuss the entire code in detail, but I hope this sample shows the various advantages of a declarative approach that I mentioned earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Separation of concerns&lt;/strong&gt;: this type has the single responsibility of describing a sequence of requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Less repeated code&lt;/strong&gt;: this type only contains code for describing a request sequence; we&amp;rsquo;re not at risk of repeating any network communication / error handling code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptional API design&lt;/strong&gt;: this API places as little burden as possible onto the developer. They only need to implement a simple protocol that produces a subsequent request description based on the result of a previous request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Readability&lt;/strong&gt;: once again, the code listing above is extremely focused; there&amp;rsquo;s no need to skim over boilerplate code to find the intention. That said, to understand this code quickly, some familiarity with our abstractions is required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How does this compare to our previous solution that was using &lt;code&gt;NSOperationQueue&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&#34;what-about-nsoperationqueue:b989f8f58ed8c5aa5f8ff74af770fe9e&#34;&gt;What About NSOperationQueue?&lt;/h3&gt;

&lt;p&gt;The solution using an &lt;code&gt;NSOperationQueue&lt;/code&gt; was a lot less concise, so there&amp;rsquo;s no good way to present its code in this blog post. We can still discuss the issues that the approach had on a high level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Separation of concerns&lt;/strong&gt; was a lot harder to come by. Instead of simply describing a request sequence, the NSOperations in the NSOperationQueue themselves were responsible for kicking off a network request. This promptly introduced a bunch of other responsibilities such as request cancellation and error handling. While similar code had been implemented in other places that dealt with creating upload requests there was no good way of sharing that implementation. Subclassing wasn&amp;rsquo;t an option since most upload requests were modeled as a single &lt;code&gt;NSOperation&lt;/code&gt;, while this upload request sequence was modeled as an &lt;code&gt;NSOperation&lt;/code&gt; that wrapped an &lt;code&gt;NSOperationQueue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;signal/noise ratio&lt;/strong&gt; of the NSOperationQueue based solution was a lot worse. The code was littered with references to the network layer and with &lt;code&gt;NSOperation&lt;/code&gt; specific code, such as the &lt;code&gt;main&lt;/code&gt; and operation f methods.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;API was a lot worse to deal with for developers&lt;/strong&gt;. Instead of simply implementing a protocol, as in the new Swift solution, one needed to understand a set of conventions. While most conventions were documented there was no way of enforcing them programmatically.&lt;/p&gt;

&lt;p&gt;Among other issues, this resulted in some bugs around error reporting for network requests. In order to avoid each operation implementing its own error reporting code, it was handled in a central location. The error handling code would run whenever a operation finished. The code would check for the presence of a value in the &lt;code&gt;error&lt;/code&gt; property of the operation. In order to report an error a developer needed to set the &lt;code&gt;error&lt;/code&gt; property on the &lt;code&gt;NSOperation&lt;/code&gt; subclass before the operation completed. Since this was a non-obvious convention (that wasn&amp;rsquo;t well documented) a bunch of new code forgot to set that property. This resulted in a decent amount of unreported errors.&lt;/p&gt;

&lt;p&gt;TL;DR: we&amp;rsquo;re glad that we&amp;rsquo;re now able to provide a more explicit API that results in code that is easier to read.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:b989f8f58ed8c5aa5f8ff74af770fe9e&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using a declarative programming approach has had a huge impact on our codebase and our productivity. We can provide constrained APIs that can be only used in one way and don&amp;rsquo;t leave a lot of room for error. We can avoid subclassing as a means of polymorphism and instead implement generic types that are controlled by declarative code. We can write code with excellent signal to noise ratio. The declarative code we write is extremely easy to test (to the point where even testing enthusiasts might deem tests unnecessary). So what are the downsides, if any?&lt;/p&gt;

&lt;p&gt;Firstly, there&amp;rsquo;s some cost associated with understanding our custom abstractions. However, the cost can be mitigated by careful API design, and by providing tests that serve as example implementations.&lt;/p&gt;

&lt;p&gt;Secondly, and more importantly, declarative programming isn&amp;rsquo;t always applicable. You need a problem that is solved multiple times throughout your codebase in a very similar way. If you try to apply declarative programming principles to code that needs a high degree of customization, you&amp;rsquo;ve built the wrong abstraction and will end up with convoluted semi-declarative code. As with any abstraction, introducing it too early will cause harm.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one last observation I&amp;rsquo;d like to squeeze into this post: &lt;strong&gt;Declarative APIs place more burden onto the API developer and less onto the API consumer&lt;/strong&gt;. In order to provide a declarative API a developer needs to be able to isolate the interface strictly from the implementation details; this is a lot less true for imperative APIs. React and GraphQL have demonstrated that the simplicity of declarative APIs can enable a great developer experience while making it easier for development teams to write coherent code at scale.&lt;/p&gt;

&lt;p&gt;Soon after I started working on apps I naively wondered why we couldn&amp;rsquo;t just build them by configuring pre-existing components, without writing much, if any, custom code. Libraries like React and GraphQL have made this future a little more likely. I think this is just a first step, and going forward we&amp;rsquo;ll see more sophisticated libraries hide their complexity by providing simple, declarative, interfaces.&lt;/p&gt;

&lt;p&gt;And hopefully, some day, we&amp;rsquo;ll get a declarative UI library for building iOS apps&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b989f8f58ed8c5aa5f8ff74af770fe9e:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b989f8f58ed8c5aa5f8ff74af770fe9e:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b989f8f58ed8c5aa5f8ff74af770fe9e:1&#34;&gt;I&amp;rsquo;ll use the term &lt;em&gt;declarative programming&lt;/em&gt; even though its &lt;a href=&#34;https://existentialtype.wordpress.com/2013/07/18/what-if-anything-is-a-declarative-language/&#34;&gt;definition is disputed&lt;/a&gt;. So far I&amp;rsquo;ve liked the definition in &lt;a href=&#34;https://awelonblue.wordpress.com/2012/01/12/defining-declarative/&#34;&gt;this post&lt;/a&gt; the most. It identifies the following characteristics of declarative code: Idempotent, Commutative, Concurrent (declarations hold at overlapping times), Reactive (meaning is context dependent). Overall this is a fairly theoretical (yet relevant debate) that I&amp;rsquo;ll might cover in a future post - this post is going to be more pragmatic.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b989f8f58ed8c5aa5f8ff74af770fe9e:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b989f8f58ed8c5aa5f8ff74af770fe9e:2&#34;&gt;Comparing React&amp;rsquo;s declarative API to UIKit&amp;rsquo;s imperative one is an interesting lense for looking at the general trade-offs between declarative/imperative APIs, I&amp;rsquo;ve done that in my &lt;a href=&#34;https://realm.io/news/altconf-benji-encz-uikit-inside-out-declarative-programming/&#34;&gt;2016 Alt Conf Talk&lt;/a&gt;. As part of that talk I experimented with what a &lt;a href=&#34;https://github.com/Ben-G/UILib&#34;&gt;React like API wrapper for UIKit&lt;/a&gt; would look like.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b989f8f58ed8c5aa5f8ff74af770fe9e:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Broken Toolchain Post Mortem</title>
      <link>http://blog.benjamin-encz.de/post/broken-toolchain/</link>
      <pubDate>Thu, 15 Sep 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/broken-toolchain/</guid>
      <description>

&lt;p&gt;Dependency managers, IDEs, continuous integration, automated tests - all these tools are created to supercharge a developer team&amp;rsquo;s productivity. While modern development tools are amazing in many ways, they unfortunately also add maintenance burden to a project.&lt;/p&gt;

&lt;p&gt;Ask me about migrating our Bitrise &amp;amp; fastlane CI workflows to Xcode 8.&lt;/p&gt;

&lt;p&gt;The goal of this post it not to blame any individual party. I&amp;rsquo;m writing this for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;share my frustration (if you&amp;rsquo;re feeling stupid for struggling with tooling, hopefully you won&amp;rsquo;t anymore after reading this)&lt;/li&gt;
&lt;li&gt;keep track of the issues I encountered &amp;amp; fixed (always helpful, and I&amp;rsquo;ll never forget why it took 3 days to fix all CI workflows)&lt;/li&gt;
&lt;li&gt;reflect on what the causes of complicated tooling are and how they might be fixed in future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also have a somewhat special relationship to tools. I remember how, as a student, complicated tooling almost deterred me from a career in software development - &amp;ldquo;If I can&amp;rsquo;t even get a J2EE app configured and running, I probably shouldn&amp;rsquo;t be a software developer&amp;rdquo;. This post is some form of self-therapy&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-xcode-8:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;Migrating to Xcode 8&lt;/h2&gt;

&lt;p&gt;This is a somewhat chronological sequence of various issues I encountered when updating our CI server to work (again) with Xcode 8.&lt;/p&gt;

&lt;h4 id=&#34;1-broken-code-signing:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;1. Broken Code Signing&lt;/h4&gt;

&lt;p&gt;Xcode 8 set out to fix one of the major tool annoyances that developers encounter: code signing. The &amp;ldquo;Fix issue&amp;rdquo; button has been removed and automatic code signing has been overhauled. You can enable it with a simple checkbox (which will trigger Xcode to generate provisioning profiles automatically):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/auto_sign.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, this option is not compatible with &lt;code&gt;xcodebuild&lt;/code&gt;. I haven&amp;rsquo;t dug into the details, but when this option is checked you need to be signed into a development team so I believe the feature cannot be used on a CI machine from the command line.&lt;/p&gt;

&lt;p&gt;Other folks ran into this issue &lt;a href=&#34;https://github.com/fastlane/fastlane/issues/6055&#34;&gt;as well&lt;/a&gt;. You can just disable automatic code signing and select specific profiles as mentioned in the &lt;a href=&#34;https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Codesigning/XcodeProject.md#readme&#34;&gt;fastlane codesigning docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, this approach is not compatible with our current build configuration. We create various different PlanGrid builds (daily, release candidates, etc.) with slightly different configurations. As part of these configurations we change the bundle identifier to allow multiple builds to be installed on a device side by side.&lt;/p&gt;

&lt;p&gt;In Xcode 7 we could use a script to rename the bundle identifier and the &lt;code&gt;Automatic&lt;/code&gt; provisioning setting would pick the right provisioning profile based on the bundle identifier.&lt;/p&gt;

&lt;p&gt;However, this option is no longer available in Xcode 8 (you can go fully automated or you need to explicitly specify a profile for each target &amp;amp; build configuration).&lt;/p&gt;

&lt;p&gt;I could work around this by defining an environment variable that specifies the correct provisioning profile for each lane and using that environment variable as part of the build configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First issue solved; this one was easy as I could reproduce it on a local machine.&lt;/strong&gt; At this point fastlane builds were passing locally, but for some mysterious reason they were still failing on CI with the catchall error &lt;code&gt;Exit status: 65&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway 1:&lt;/strong&gt; It would be great if Apple would have documented if/how automatic signing should be used with &lt;code&gt;xcodebuild&lt;/code&gt;. But admittedly our use case for changing bundle identifiers dynamically is a little unconventional (we could just have separate targets).&lt;/p&gt;

&lt;h4 id=&#34;2-ruby-issues:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;2. Ruby Issues&lt;/h4&gt;

&lt;p&gt;At this point I was investigating our &lt;code&gt;buid_deploy_latest&lt;/code&gt; lane, which runs whenever we merge to &lt;code&gt;dev&lt;/code&gt;. It creates a build, ships it to HockeyApp, runs the test suite and reports code coverage to codecov.&lt;/p&gt;

&lt;p&gt;This lane was failing on both steps (archiving &amp;amp; testing) on CI, while it was passing locally. This was the error message in the CI build log:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/ruby_crash.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the past, &lt;code&gt;Exit status: 65&lt;/code&gt; mostly meant codesigning issues, so I spent some time investigating in the wrong direction here. The log was claiming that a build script failure was failing the build. In particular the script that uploads our dSYM to Bugsnag.&lt;/p&gt;

&lt;p&gt;For too long I assumed this error message to be incorrect. The Bugsnag script is one of the last steps before codesigning so I assumed Xcode is attributing the error incorrectly. Especially since it seemed extremely unlikely that a script that hasn&amp;rsquo;t caused any issues so far would pass locally and fail on CI.&lt;/p&gt;

&lt;p&gt;After spending too much time on investigating code signing as the potential issue, I found out that the build logs referred to additional log data in the &lt;code&gt;Derived Data&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I modified the Bitrise workflow to add a step that deployed the &lt;code&gt;Derived Data&lt;/code&gt; folder to S3 after building (Bitrise offers a convenient &amp;ldquo;Artifact Deploy&amp;rdquo; step for this).&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;Derived Data&lt;/code&gt; folder I found &lt;code&gt;.xcactivitylog&lt;/code&gt; files. These log files capture the output that you can see in the build log in the  Xcode IDE. StackOverflow told me that these are &lt;a href=&#34;http://stackoverflow.com/questions/13861658/is-it-possible-to-search-though-all-xcodes-logs&#34;&gt;files that can be unzipped&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Luckily these logs contained a lot more details on the failed script phase:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/ruby_crash_details.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following line stands out as the root cause of the script failure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Could not find json-1.8.3 in any of the sources (Bundler::GemNotFound)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point I found out that the Bitrise macOS image install the latest version of ruby from homebrew, which was version &lt;code&gt;2.3.1&lt;/code&gt; while I was using the macOS system default, ruby &lt;code&gt;2.0.0&lt;/code&gt;, on my local machine.&lt;/p&gt;

&lt;p&gt;Looking at the stacktrace we can see that the script is calling ruby &lt;code&gt;2.0.0&lt;/code&gt;&amp;rsquo;s &lt;code&gt;require&lt;/code&gt; function which is then calling the ruby &lt;code&gt;2.3.0&lt;/code&gt; &lt;code&gt;bundler&lt;/code&gt; gem. The Bugnsag script is executed with &lt;code&gt;usr/bin/ruby&lt;/code&gt; (which is the system default of &lt;code&gt;2.0.0&lt;/code&gt; on Bitrise). I could temporarily fix the issue by calling the script with &lt;code&gt;usr/local/bin/ruby&lt;/code&gt; (which is ruby &lt;code&gt;2.3.0&lt;/code&gt; installed by homebrew on Bitrise).
I&amp;rsquo;m tapping a little in the dark if this version mismatch is actually the root of the problem - if you&amp;rsquo;re better versed in the ruby universe than I am, please drop a comment!&lt;/p&gt;

&lt;p&gt;Eventually I decided that the best solution would be to leave the script untouched and instead ensure that Bitrise uses the system version of ruby. That&amp;rsquo;s the default on any new developer&amp;rsquo;s machine and should therefore cause the least discrepancy between local and CI builds.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;brew unlink ruby&lt;/code&gt; (thanks Bitrise support for the tip!) I was able to switch back to the system ruby on Bitrise and the error vanished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway 2:&lt;/strong&gt; Read xcodebuild&amp;rsquo;s error messages exactly and believe them even though they can be misleading sometimes. Probably should also pin the ruby version used locally and on CI using &lt;code&gt;RVM&lt;/code&gt; or &lt;code&gt;chruby&lt;/code&gt; to avoid such mismatches in future (though this would increase the time for spinning up a new machine on Bitrise). I will also need to investigate further why this issue started ocurring after switching to the Xcode 8 toolchain. So far I&amp;rsquo;m assuming the Bitrise image was updated as part of the Xcode update and installed a newer version of ruby.&lt;/p&gt;

&lt;h4 id=&#34;3-xcode-test-manager-timeouts:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;3. Xcode Test Manager Timeouts&lt;/h4&gt;

&lt;p&gt;This one is still a complete mystery to me. At this point I can run all lanes on fastlane locally. I can run &lt;code&gt;xcodebuild test&lt;/code&gt; on Bitrise. However, running tests via fastlane on Bitrise is still failing. The failure only occurs in this combination. I&amp;rsquo;ve opened tickets with both tools - I&amp;rsquo;m aware that likely no one will feel responsible for fixing this since both tools work in isolation. But maybe someone else finds these issues useful? (&lt;a href=&#34;https://github.com/bitrise-io/bitrise.io/issues/66&#34;&gt;Bitrise&lt;/a&gt;, &lt;a href=&#34;https://github.com/fastlane/fastlane/issues/6111&#34;&gt;fastlane&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;On the surface (looking at xcodebuild output piped to fastlane/xcpretty) the error reporting is again very limited: &lt;code&gt;**TEST FAILED** and&lt;/code&gt;Exit status: 65`:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/test-hangs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I again resorted to investigating the &lt;code&gt;xcactivitylog&lt;/code&gt; files; this time for the test activity instead of the build activity. From there it became pretty obvious what is happening:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/test-hangs-details.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For some reason the communication between &lt;code&gt;testmanagerd&lt;/code&gt;, Xcode and the Simulator is broken and timing out, which eventually causes the test suite to fail. For now my patience is over and I&amp;rsquo;ve replaced this particular fastlane step with a manual call to &lt;code&gt;xcodebuild test&lt;/code&gt;. I&amp;rsquo;m planning on filing a radar, though I feel bad for not really having a reproduction case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaway 3:&lt;/strong&gt; Interop between various tools is the worst. If you encounter issues that only occur when you combine multiple tools, it is very hard to narrow down the root cause. In this case it seems like an &lt;code&gt;xcodebuild&lt;/code&gt; bug. Why is it only happening when using fastlane on Bitrise? I don&amp;rsquo;t know (yet?).&lt;/p&gt;

&lt;h4 id=&#34;4-github-request-timeouts-hockeyapp-deploy-failure:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;4. GitHub Request Timeouts &amp;amp;  HockeyApp Deploy Failure&lt;/h4&gt;

&lt;p&gt;Various builds would fail due to GitHub request timeouts that caused CocoaPods to fail. Sometimes uploads from Bitrise to HockeyApp would fail as well. Nothing to learn here, just want to demonstrate the amount of pain I went through:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/hockey-deploy-failed.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/github_timeout.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:2e81d9f000ef3ae5966238c2b9bf864a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I should probably accept that our tools are complex and fragile and that a significant portion of my job responsibility is simply to keep things running as various tools change over time.&lt;/p&gt;

&lt;p&gt;However, working with tools in Apple&amp;rsquo;s ecosystem often feels unnecessary painful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xcodebuild&lt;/code&gt; is one of the prime examples: there&amp;rsquo;s barely any (up to date) documentation and the unstructured build output is still a huge issue. Maybe Apple is trying to push Xcode Server? Even if that&amp;rsquo;s the case they shouldn&amp;rsquo;t ignore the fact that most companies &amp;amp; open source projects rely on &lt;code&gt;xcodebuild&lt;/code&gt; as of today.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m under the impression that Apple is building tools that work great for small teams and indie developers - the new automatic code signing is the latest example. But it&amp;rsquo;s time to admit that a lot of app development happens in large companies that rely heaviliy on automation and therefore need a solid command line interface for the entire toolchain.&lt;/p&gt;

&lt;p&gt;So far the open source community has done a great job at filling the various gaps in Apple&amp;rsquo;s developer tool ecosystem. But I sincerely hope these are just temporary solutions. The combinatorial complexity of piecing together various third party solutions will always lead to issues that are extremely difficult to track down and fix.&lt;/p&gt;

&lt;p&gt;Recent hiring efforts on Apple&amp;rsquo;s developer tools team make me optimistic.&lt;/p&gt;

&lt;p&gt;For now I will work on my patience and on improving my toolkit debugging skills.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Couldn&amp;rsquo;t stop myself from adding these, too&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/last_two.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/Website/master/static/assets/broken-toolchain/last_one.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bridging Existentials &amp; Generics in Swift 2</title>
      <link>http://blog.benjamin-encz.de/post/bridging-existentials-generics-swift-2/</link>
      <pubDate>Thu, 21 Jul 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/bridging-existentials-generics-swift-2/</guid>
      <description>

&lt;p&gt;We are back to another episode of discussing generics, protocols with associated types and some type system limitations in Swift 2. This time we will dive into an interesting workaround that the infamous &lt;a href=&#34;https://twitter.com/jckarter&#34;&gt;jckarter&lt;/a&gt; has taught me. We will also discuss how this workaround might become unnecessary through enhanced existential support in future Swift versions. But what are existentials anyway?&lt;/p&gt;

&lt;h2 id=&#34;existentials-in-swift:66f71b701ececee95a5057b67030251d&#34;&gt;Existentials in Swift&lt;/h2&gt;

&lt;p&gt;Generally speaking existentials allow us to define type variables using type requirements. We can use these type variables throughout our program without knowing which concrete underlying type implements the requirements.&lt;/p&gt;

&lt;p&gt;In Swift 2 the only way to define an existential type is using the &lt;code&gt;protocol&amp;lt;&amp;gt;&lt;/code&gt; syntax (&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0095-any-as-existential.md&#34;&gt;which will be replaced with the &lt;code&gt;&amp;amp;&lt;/code&gt; syntax in Swift 3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;By defining e.g. a function that takes an existential argument, we are able to use any members of the existential type without knowing which concrete type was passed to the function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Saveable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Loadable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;doThing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Saveable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Loadable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In many ways existentials are very similar to generics. Why would we choose one over the other? My friend Russ Bishop has covered this in detail in a blog post on existentials &amp;amp; generics - &lt;a href=&#34;http://www.russbishop.net/swift-associated-types-cont&#34;&gt;if you&amp;rsquo;re curious about the details you should go read it&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;bridging-between-existentials-and-generics:66f71b701ececee95a5057b67030251d&#34;&gt;Bridging Between Existentials and Generics&lt;/h2&gt;

&lt;p&gt;In an &lt;a href=&#34;http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/&#34;&gt;earlier blog post&lt;/a&gt; I pointed out some incompatibilities between type information that is statically known at compile time (Generics) and type information that is dynamically available at runtime (Existentials).&lt;/p&gt;

&lt;p&gt;Today I want to focus on a concrete (though simplified) example that we have encountered in the PlanGrid app.&lt;/p&gt;

&lt;p&gt;As part of our client-server synchronization process we persist objects that we have parsed from JSON in our database. We do that via a generic data access object. The data access object has a generic type parameter that specifies the type of object that is going to be persisted.&lt;/p&gt;

&lt;p&gt;In our simplified examples we are going to persist &lt;code&gt;Cat&lt;/code&gt;, &lt;code&gt;Dog&lt;/code&gt; and &lt;code&gt;Cow&lt;/code&gt; instances.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Types that will be persisted&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Cat&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Dog&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Cow&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// DAO that provides a generic persistence mechanism&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ObjectType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;objectType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ObjectType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Saved \(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;objectType&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;) in \(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ObjectType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;) DAO&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the PlanGrid app we have a coordination point that has a reference to all specialized instances of our generic DAO. During the synchronization process we encounter a variety of different types that need be stored in the correct instance of the generic DAO type (e.g. cows should be stored via an instance of &lt;code&gt;GenericDAO&amp;lt;Cow&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Given a heterogenous list of different instances that can be persisted we want to automatically find &amp;amp; call the DAO based on the type of object we encounter.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// A list of our generic data stores&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;genericDAOs&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Cat&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;(),&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Dog&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;(),&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Cow&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;()]&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// A list of instances we have parsed &amp;amp; need to persist&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;instances&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Cat&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Dog&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Cow&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;How can we implement a loop that iterates over all elements in &lt;code&gt;instances&lt;/code&gt; and stores them in the generic DAO that has the matching type parameter for the object we want to store?
Ideally we would want to do something like the following (which is syntactically invalid in Swift 2):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// `element` is an existential since we don&amp;#39;t know the concrete type&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// we only know it conforms to the `PeristedType` protocol.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;instances&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Invalid! Cannot use existential type as generic type parameter&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;dao&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;genericDAOs&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;dao&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Some potential, future improvements to Swift could make this possible, but for now we cannot dynamically refer to the type of the existential (&lt;code&gt;element.Self&lt;/code&gt;) and use it as a generic type parameter.&lt;/p&gt;

&lt;h2 id=&#34;the-workaround:66f71b701ececee95a5057b67030251d&#34;&gt;The Workaround&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.Self&lt;/code&gt; member, which would refer to the concrete type of the existential doesn&amp;rsquo;t exist in Swift 2. However, we can access the concrete type of the existential using &lt;code&gt;Self&lt;/code&gt; from within protocols &amp;amp; protocol extensions.&lt;/p&gt;

&lt;p&gt;Using a clever inversion of control we can use that &lt;code&gt;Self&lt;/code&gt; type from within the &lt;code&gt;PersistedType&lt;/code&gt; protocol (which all persisted types implement) to dynamically specify the generic type parameter of our &lt;code&gt;GenericDAO&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;PersistedType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Pass in a list of all DAOs.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;saveInCorrectDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;potentialDAOs&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Iterate until we find GenericDAO with type parameter that matches&lt;/span&gt;
    	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// our existential type.&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;dao&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;GenericDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;potentialDAOs&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;dao&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// ...&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;instances&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;saveInCorrectDAO&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;genericDAOs&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;From within the protocol extension we can successfully use the underlying type of the existential (&lt;code&gt;Self&lt;/code&gt;) as a generic type parameter.
Even though the inverted control flow is anything but beautiful, this workaround can be useful to bridge the gap between existentials and generics.&lt;/p&gt;

&lt;h2 id=&#34;the-future-is-bright:66f71b701ececee95a5057b67030251d&#34;&gt;The Future is Bright&lt;/h2&gt;

&lt;p&gt;Among many other critical improvements, the changes suggested by the &lt;a href=&#34;https://github.com/austinzheng/swift-evolution/blob/az-existentials/proposals/XXXX-enhanced-existentials.md&#34;&gt;enhanced existential proposal &lt;strong&gt;draft&lt;/strong&gt;&lt;/a&gt; would eliminate this workaround by allowing to refer to the underlying type of an existential via &lt;code&gt;.Self&lt;/code&gt; and making it possible to use that type as a generic type parameter.&lt;/p&gt;

&lt;p&gt;Even though the enhanced existential proposal is still under active development it is well worth a read. If it the final implementation will cover what is in the proposal draft today, we will be able to seemingly bridge between existentials and generics. More importantly working with protocols with associated types would no longer be a painful experience - probably the most significant improvement to Swift since its inception?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Interested in pushing the limits of Swift? &lt;strong&gt;&lt;a href=&#34;http://grnh.se/8fcutd&#34;&gt;we&amp;rsquo;re hiring&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/austinzheng/swift-evolution/blob/az-existentials/proposals/XXXX-enhanced-existentials.md&#34;&gt;Enhanced Existentials Proposal Draft&lt;/a&gt; - Proposal draft that is slowly taking shape and outlines drastic improvements to Swift&amp;rsquo;s existential support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift/blob/c39da37525255d3bc141038ff567b4aca57d316e/docs/GenericsManifesto.md&#34;&gt;Generics Manifesto&lt;/a&gt; - Doug Gregor&amp;rsquo;s original swift-evolution email that outlines various potential improvements to Swift&amp;rsquo;s generics (including enhanced existentials).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf&#34;&gt;Abstract Types Have Existential Type&lt;/a&gt; - The paper that formalized the idea of existential types in programming languages. Most relevant quote for my understanding of existentials: &amp;ldquo;Existential types provide just enough information to verify the matching condition [&amp;hellip;], without providing any information about the representation of the carrier or the algorithms used to implement the operations.&amp;ldquo;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Real World Flux Architecture on iOS</title>
      <link>http://blog.benjamin-encz.de/post/real-world-flux-ios/</link>
      <pubDate>Sun, 10 Jul 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/real-world-flux-ios/</guid>
      <description>

&lt;p&gt;About half a year ago we started adopting the Flux architecture in the PlanGrid iOS app. This post will discuss our motivation for transitioning from traditional MVC to Flux and will share the experience we have gathered so far.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m attempting to describe large parts of our Flux implementation by discussing code that is in production today. If you&amp;rsquo;re only interested in the high level conclusion you can skip the middle part of this post.&lt;/p&gt;

&lt;h2 id=&#34;why-we-transitioned-away-from-mvc:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Why We Transitioned Away from MVC&lt;/h2&gt;

&lt;p&gt;To put our decision into context I want to describe some of the challenges the PlanGrid app faces. Some of them are unique to enterprise software, others should apply to most iOS apps.&lt;/p&gt;

&lt;h3 id=&#34;we-have-all-the-state:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;We Have All the State&lt;/h3&gt;

&lt;p&gt;PlanGrid is a fairly complex iOS app. It allows users to view blueprints and to collaborate on them using different types of annotations, issues and attachments (and a lot of other stuff that requires industry specific knowledge).&lt;/p&gt;

&lt;p&gt;An important aspect of the app is that it is offline first. Users can interact with all features in the app, whether they have an internet connection or not. This means that we need to store a lot of data &amp;amp; state on the client. We also need to enforce a subset of the business rules locally (e.g. which annotation can a user delete?).&lt;/p&gt;

&lt;p&gt;The PlanGrid app runs on both iPad and iPhone, but its UI is optimized to make use of the larger available space on tablets. This means that unlike many iPhone apps we often present multiple view controllers at a time. These view controllers tend to share a decent amount of state.&lt;/p&gt;

&lt;h3 id=&#34;the-state-of-state-management:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;The State of State Management&lt;/h3&gt;

&lt;p&gt;All of this means that our app puts a lot of effort into managing state. Any mutation within the app results in more or less the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update state in local object.&lt;/li&gt;
&lt;li&gt;Update UI.&lt;/li&gt;
&lt;li&gt;Update database.&lt;/li&gt;
&lt;li&gt;Enqueue change that will be sent to server upon available network connection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notify other objects about state change.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Though I plan on covering other aspects of our new architecture in future blog posts, I want to focus on the 5. step today. &lt;em&gt;How should we populate state updates within our app?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the billion dollar question of app development.&lt;/p&gt;

&lt;p&gt;Most iOS engineers, including early developers of the PlanGrid app, come up with the following answers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delegation&lt;/li&gt;
&lt;li&gt;KVO&lt;/li&gt;
&lt;li&gt;NSNotificationCenter&lt;/li&gt;
&lt;li&gt;Callback Blocks&lt;/li&gt;
&lt;li&gt;Using the DB as source of truth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these approaches can be valid in different scenarios. However, this menu of different options is a big source of inconsistencies in a large codebase that has grown over multiple years.&lt;/p&gt;

&lt;h3 id=&#34;freedom-is-dangerous:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Freedom is Dangerous&lt;/h3&gt;

&lt;p&gt;Classic MVC only advocates the separation of data and its representation. With the lack of other architectural guidance, everything else is left up to individual developers.&lt;/p&gt;

&lt;p&gt;For the longest time the PlanGrid app (like most iOS apps) didn&amp;rsquo;t have a defined pattern for state management.&lt;/p&gt;

&lt;p&gt;Many of the existing state management tools such as delegation and blocks tend to create strong dependencies between components that might not be desirable - two view controllers quickly become tightly coupled in an attempt to share state updates with each other.&lt;/p&gt;

&lt;p&gt;Other tools, such as KVO and Notifications, create invisible dependencies. Using them in a large codebase can quickly lead to code changes that cause unexpected side effects. It is far to easy for a controller to observe details of the model layer which it shouldn&amp;rsquo;t be interested in.&lt;/p&gt;

&lt;p&gt;Thorough code reviews &amp;amp; style guides can only do so much, many of these architectural issues start with small inconsistencies and take a long time to evolve into serious problems. With well defined patterns in place it is a lot easier to detect deviations early.&lt;/p&gt;

&lt;h3 id=&#34;an-architectural-pattern-for-state-management:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;An Architectural Pattern for State Management&lt;/h3&gt;

&lt;p&gt;One of our most important goals during refactoring the PlanGrid app was putting clear patterns &amp;amp; best practices in place. This would allow future features to be written in a more consistent way and make onboarding of new engineers a lot more efficient.&lt;/p&gt;

&lt;p&gt;State management was one of the largest sources of complexity in our app, so we decided to define a pattern that all new features could use going forward.&lt;/p&gt;

&lt;p&gt;A lot of the pain we felt in our existing codebase reminded us strongly of the issues that Facebook brought up when they first presented the Flux pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unexpected, Cascading State Updates&lt;/li&gt;
&lt;li&gt;Hard to Understand Dependencies Between Components&lt;/li&gt;
&lt;li&gt;Tangled Flow of Information&lt;/li&gt;
&lt;li&gt;Unclear Source of Truth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seemed that Flux would be a great fit for solving many of the issues we were experiencing.&lt;/p&gt;

&lt;h2 id=&#34;a-brief-intro-to-flux:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;A Brief Intro to Flux&lt;/h2&gt;

&lt;p&gt;Flux is a very lightweight architectural pattern that Facebook uses for client-side web applications. Even though there is a &lt;a href=&#34;https://github.com/facebook/flux&#34;&gt;reference implementation&lt;/a&gt;, Facebook emphasizes that the ideas of the Flux pattern are a lot more relevant than this particular implementation.&lt;/p&gt;

&lt;p&gt;The pattern can be described best alongside a diagram that shows the different flux components:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./Flux_Original.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the Flux architecture a &lt;strong&gt;store&lt;/strong&gt; is the single source of truth for a certain part of the app. Whenever the state in the store updates, it will send a change event to all views that subscribed to the store. The &lt;strong&gt;view&lt;/strong&gt; receives changes only through this one interface that is called by the store.&lt;/p&gt;

&lt;p&gt;State updates can only occur via &lt;strong&gt;actions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;action&lt;/strong&gt; describes an intended state change, but it doesn&amp;rsquo;t implement the state change itself. All components that want to change any state send an &lt;strong&gt;action&lt;/strong&gt; to the global &lt;strong&gt;dispatcher&lt;/strong&gt;.
The stores register with the dispatcher and let it know which actions they are interested in. Whenever an action is dispatched, all interested stores will receive it.&lt;/p&gt;

&lt;p&gt;In response to actions some stores will update their state and notify the views about that new state.&lt;/p&gt;

&lt;p&gt;The Flux architecture enforces a unidirectional data flow as shown in the diagram above. It also enforces a strict separation of concerns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Views will only receive data from stores. Whenever a store updates, the handler method on the view is invoked.&lt;/li&gt;
&lt;li&gt;Views can only change state by dispatching actions. Because actions are only descriptions of intents, the business logic is hidden from the view.&lt;/li&gt;
&lt;li&gt;A store only updates its state when it receives an action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These constraints make designing, developing and debugging new features a lot easier.&lt;/p&gt;

&lt;h2 id=&#34;flux-in-plangrid-for-ios:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Flux in PlanGrid for iOS&lt;/h2&gt;

&lt;p&gt;For the PlanGrid iOS app we have deviated slightly from the Flux reference implementation. We enforce that each store has an observable &lt;code&gt;state&lt;/code&gt; property. Unlike in the original Flux implementation we don&amp;rsquo;t emit a change event when a store updates. Instead views observe the &lt;code&gt;state&lt;/code&gt; property of the store. Whenever the views observe a state change, they update themselves in response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./Flux.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is a very subtle deviation from the Flux reference implementation, but covering it is helpful for the upcoming sections.&lt;/p&gt;

&lt;p&gt;With an understanding of the basics of the Flux architecture, let&amp;rsquo;s dive into some of the implementation details and questions we needed to answer while implementing Flux in the PlanGrid app.&lt;/p&gt;

&lt;h3 id=&#34;what-is-the-scope-of-a-store:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What is the Scope of a Store?&lt;/h3&gt;

&lt;p&gt;The scope of each individual store is a very interesting question that quickly comes up when using the Flux pattern.&lt;/p&gt;

&lt;p&gt;Since Facebook published the Flux pattern, different variations have been developed by the community. One of them, called Redux, iterates on the Flux pattern by enforcing that each application should only have a single store. This store stores the state for the entire application (there are many other, subtler, differences that are outside of the scope of this post).&lt;/p&gt;

&lt;p&gt;Redux gained a lot of popularity as the idea of a single store further simplifies the architecture of many applications. In traditional Flux, with multiple stores, apps can run into cases where they need to combine state that is stored in separate stores in order to render a certain view. That approach can quickly re-introduce problems that the Flux pattern tried to solve, such as complicated dependencies between different components in an app.&lt;/p&gt;

&lt;p&gt;For the PlanGrid app we still decided to go with traditional Flux instead of using Redux. We were unsure how the approach with a single store that stores the entire app state would scale with such a huge app. Further, we identified that we would have very few inter-store dependencies which made it less important to consider Redux as an alternative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We have yet to identify a hard rule on the scope of each individual store&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far I can identify two patterns in our codebase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature/View Specific Stores:&lt;/strong&gt; Each view controller (or each group of closely related view controllers) receives its own store. This store models the view specific state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared State Stores:&lt;/strong&gt; We have stores that store &amp;amp; manage state that is shared between many views. We try to keep the amount of these stores minimal. An example of such a store is the &lt;code&gt;IssueStore&lt;/code&gt;. It is responsible for managing the state of all issues that are visible on the currently selected blueprint. Many views that display and interact with issues derive information from this store. These types of stores essentially act like a live-updating database query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are currently in the process of implementing our first &lt;em&gt;shared state stores&lt;/em&gt; and are still deciding the best way to model the multiple dependencies of different views onto these types of stores.&lt;/p&gt;

&lt;h3 id=&#34;implementing-a-feature-using-the-flux-pattern:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Implementing a Feature Using the Flux Pattern&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s dive a little bit deeper into some of the implementation details of features that are built with the Flux pattern.&lt;/p&gt;

&lt;p&gt;As an example throughout the next couple of sections we&amp;rsquo;ll use a feature that&amp;rsquo;s used in production within the PlanGrid app. The feature allows users to filter annotations on a blueprint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./filter_screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The feature we&amp;rsquo;ll discuss lives in the popover that&amp;rsquo;s presented on the left hand side of the screenshot.&lt;/p&gt;

&lt;h4 id=&#34;step-1-defining-the-state:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Step 1: Defining the State&lt;/h4&gt;

&lt;p&gt;Usually I begin implementing a new feature by determining the relevant state for it. The state represents everything the UI needs to know in order to render the representation of a certain feature.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dive right into our example by taking a look at the state for the annotation filter feature shown above:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterState&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hideEverythingFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;RepresentableAnnotationFilter&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;shareStatusFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;RepresentableAnnotationFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;issueFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;RepresentableAnnotationFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;generalFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;RepresentableAnnotationFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;selectedFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterGroupType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Indicates whether any filter is active right now&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Bool&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;false&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The state consists of a list of different filters, a currently selected filter group and a boolean flag that indicates whether any of the filters are active.&lt;/p&gt;

&lt;p&gt;This state is exactly tailored to the needs of the UI. The list of filters is rendered in a table view. The selected filter group is used to present/hide the details
of an individually selected filter group. And the &lt;code&gt;isFiltering&lt;/code&gt; flag is used to determine whether or not a button to clear all filters should be enabled or disabled in the UI.&lt;/p&gt;

&lt;h4 id=&#34;step-2-defining-the-actions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Step 2: Defining the Actions&lt;/h4&gt;

&lt;p&gt;After defining the shape of the state for a certain feature I usually think about the different state mutations in the next step. In the Flux architecture state mutations are modeled in the form of actions that describe which state change is intended. For the annotation filter feature the list of actions is fairly short:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilteringActions&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Enables/disables a filter.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ToggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnyAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterType&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Navigates to details of a filter group.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;EnterFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnyAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterGroupType&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Leaves detail view of a filter group.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;LeaveFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnyAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Disables all filters.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ResetFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnyAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Disables all filters within a filter group.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ResetFiltersInGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnyAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterGroupType&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even without an in-depth understanding of the feature it should be somewhat understandable which state transitions these actions initiate. One of the many benefits of the Flux architecture is that this list of actions is an exhaustive overview of all state changes that can be triggered for this particular feature.&lt;/p&gt;

&lt;h4 id=&#34;step-3-implement-the-response-to-actions-in-the-store:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Step 3: Implement the Response to Actions in the Store&lt;/h4&gt;

&lt;p&gt;In this step we implement the core business logic of a feature. I personally tend to implement this step using TDD, which I&amp;rsquo;ll discuss a little later. The implementation of a store can be summarized as following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register store with dispatcher for all actions it is interested in. In the current example that would be all &lt;code&gt;AnnotationFilteringActions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Implement a handler that will be called for each of the individual actions.&lt;/li&gt;
&lt;li&gt;Within the handler, perform the necessary business logic and update the state upon completion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a concrete example we can take a look at how the &lt;code&gt;AnnotationFilterStore&lt;/code&gt; handles the &lt;code&gt;toggleFilterAction&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;handleToggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;toggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilteringActions&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ToggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;toggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt;
    &lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Check for issue specific filters&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IssueAssignedToFilter&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IssueStatusAnnotationFilter&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IssueAssignedToFilter&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IssueUnassignedFilter&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// if no annotation types are filtered, activate the issue/punchItem type&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;issueTypeFilter&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_annotationFilterService&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;annotationTypeFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;issueTypeFilter&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_annotationFilterService&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;annotationTypeFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;activeFilterCount&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;issueTypeFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;issueTypeFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;true&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_applyFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example is purposefully not simplified. So let&amp;rsquo;s break it down a little. The &lt;code&gt;handleToggleFilterAction&lt;/code&gt; is invoked whenever a &lt;code&gt;ToggleFilterAction&lt;/code&gt; is dispatched.
The &lt;code&gt;ToggleFilterAction&lt;/code&gt; carries information about which specific filter should be toggled.&lt;/p&gt;

&lt;p&gt;As a very first step of implementing this business logic, the method simply toggles the filter by toggling the value of the &lt;code&gt;filter.enabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we implement some custom business logic for this feature. When working with filters that are intended to filter issue annotations we have some cases in which we need to activate the &lt;code&gt;issueTypeFilter&lt;/code&gt;. It wouldn&amp;rsquo;t make sense to dive into the specifics of this PlanGrid feature, but the idea is that this method encapsulates any business logic related to toggling filters.&lt;/p&gt;

&lt;p&gt;At the end of the method we&amp;rsquo;re calling the &lt;code&gt;_applyFilter()&lt;/code&gt; method. This is a shared method that is used by multiple action handlers:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_applyFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_annotationFilterService&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;applyFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_annotationFilterService&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;allFilterGroups&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;reduce&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filterGroup&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;activeFilterCount&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Phantom state update to refresh the cell state, technically not needed since filters are reference types&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// and previous statement already triggers a state update.&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The call to &lt;code&gt;self._annotationFilterService.applyFilter()&lt;/code&gt; is the one that actually triggers the filtering of annotations that are displayed on a sheet. The filtering logic itself is somewhat complex, so it makes sense to move this into a separate, dedicated type.&lt;/p&gt;

&lt;p&gt;The role of each store is to provide the state information that is relevant for the UI and to be the coordination point for state updates. This doesn&amp;rsquo;t mean that the entire business logic needs to be implemented in the store itself.&lt;/p&gt;

&lt;p&gt;The very last step of each action handler is to update the state. Within the &lt;code&gt;_applyFilter()&lt;/code&gt; method, we&amp;rsquo;re updating the &lt;code&gt;isFiltering&lt;/code&gt; state value by checking if any of the filters are now activated.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one important thing to note about this particular store: you might expect to see an additional state update that updates the values of the filters that are stored in the &lt;code&gt;AnnotationFilterState&lt;/code&gt;. Generally that is how we implement our stores, but this implementation is a little special.&lt;/p&gt;

&lt;p&gt;Since the filters that are stored in the &lt;code&gt;AnnotationFilterState&lt;/code&gt; need to interact with much of our existing Objective-C code, we decided to model them as classes. This means they are reference types and the store and the annotation filter UI share a reference to the same instances. This in turn means that all mutations that happen to filters within the store are implicitly visible to the UI. Generally we try to avoid this by exclusively using value types in our state structs - but this is a blog post about real world Flux and in this particular case the compromise for making Objective-C interop easier was acceptable.&lt;/p&gt;

&lt;p&gt;If the filters were value types, we would need to assign the updated filter values to our state property in order for the UI to observe the changes.
Since we&amp;rsquo;re using reference types here, we perform a phantom state update instead:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Phantom state update to refresh the cell state, technically not needed since filters are reference types&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// and previous statement already triggers a state update.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The assignment to the &lt;code&gt;_state&lt;/code&gt; property will now kick off the mechanism that updates the UI - we&amp;rsquo;ll discuss the details of that process in a second.&lt;/p&gt;

&lt;p&gt;We dived pretty deep into the implementation details so I want to end this section with a reminder of the high level store responsibilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register store with dispatcher for all actions it is interested in. In the current example that would be all &lt;code&gt;AnnotationFilteringActions&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Implement a handler that will be called for each of the individual actions.&lt;/li&gt;
&lt;li&gt;Within the handler, perform the necessary business logic and update the state upon completion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s move on to discussing how the UI receives state updates from the store.&lt;/p&gt;

&lt;h4 id=&#34;step-4-binding-the-ui-to-the-store:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Step 4: Binding the UI to the Store&lt;/h4&gt;

&lt;p&gt;One of the core Flux concepts is that an automatic UI update is triggered whenever a state update occurs. This ensures that the UI always represents the latest state and makes away with any code that is required to maintain these updates manually. This step is very similar to the bindings of a View to the ViewModel in the MVVM architecture.&lt;/p&gt;

&lt;p&gt;There are many ways to implement this - in PlanGrid we decided to use ReactiveCocoa to allow the store to provide an observable state property. Here&amp;rsquo;s how the &lt;code&gt;AnnotationFilterStore&lt;/code&gt; implements this pattern:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// The current `AnnotationFilterState`, this should be observed within the view layer.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SignalProducer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterState&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;NoError&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;/// Internal state.&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MutableProperty&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterState&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MutableProperty&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;_state&lt;/code&gt; property is used within the store to mutate the state. The &lt;code&gt;state&lt;/code&gt; property is used by clients that want to subscribe to the store.
This allows store subscribers to receive state updates but doesn&amp;rsquo;t allow them to mutate state directly (state mutation should only happen through actions!).&lt;/p&gt;

&lt;p&gt;In the initializer the internal observable property is simply bound to the external signal producer:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;producer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now any update to &lt;code&gt;_state&lt;/code&gt; will automatically send the latest state value through the signal producer stored in &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All that is left, is the code that makes sure that the UI updates whenever a new &lt;code&gt;state&lt;/code&gt; value is emitted. This can be one of the trickiest parts when getting started with the Flux pattern on iOS. On the web Flux plays extremely well with Facebook&amp;rsquo;s React framework. React was designed for this specific scenario: &lt;em&gt;re-render the UI upon state updates without requiring any additional code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When working with UIKit we don&amp;rsquo;t have this luxury, instead we need to implement UI updates manually. I cannot dive into this in detail within this post, otherwise the length of it would explode. The bottom line is that we have built some components that provide a React like API for &lt;code&gt;UITableView&lt;/code&gt; and &lt;code&gt;UICollectionView&lt;/code&gt;, we&amp;rsquo;ll take a brief look at them later on.&lt;/p&gt;

&lt;p&gt;If you want to learn more about these components, you can check out a &lt;a href=&#34;https://skillsmatter.com/skillscasts/8179-turning-uikit-inside-out&#34;&gt;talk I gave recently&lt;/a&gt;, as well as the two GitHub repositories that go along with it (&lt;a href=&#34;https://github.com/Ben-G/AutoTable&#34;&gt;AutoTable&lt;/a&gt;, &lt;a href=&#34;https://github.com/Ben-G/UILib&#34;&gt;UILib&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s again take a look at some real world code (in this case it is slightly shortened) from the annotation filter feature. This code lives in the &lt;code&gt;AnnotationFilterViewController&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_bind&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compositeDisposable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CompositeDisposable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// On every state update, recalculate the cells for this table view and provide them to&lt;/span&gt;
	&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// the data source.&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;compositeDisposable&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tableViewDataSource&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tableViewModel&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;~&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ignoreNil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;weak&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt;
	        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;annotationFilterViewProvider&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tableViewModelForState&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;weak&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt;
	        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tableViewDataSource&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;refreshViews&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;})&lt;/span&gt;
	
	&lt;span style=&#34;color: #000000&#34;&gt;compositeDisposable&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ignoreNil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;take&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;startWithNext&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;weak&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt;
	        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tableView&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;reloadData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
	    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
	
	 &lt;span style=&#34;color: #000000&#34;&gt;compositeDisposable&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;navigationItem&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;rightBarButtonItem&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;!.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;racEnabled&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;~&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;
	        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In our codebase we follow a convention where each view controller has a &lt;code&gt;_bind&lt;/code&gt; method that is called from within &lt;code&gt;viewWillAppear&lt;/code&gt;. This &lt;code&gt;_bind&lt;/code&gt; method is responsible for subscribing to the store&amp;rsquo;s state and providing code that updates the UI when state changes occur.&lt;/p&gt;

&lt;p&gt;Since we need to implement partial UI updates ourselves and cannot rely on a React-like framework, this method usually contains code that describes how a certain state update maps to a UI update. Here ReactiveCocoa comes in very handy as it provides many different operators (&lt;code&gt;skipUntil&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) that make it easier to set up these relationships. If you haven&amp;rsquo;t used a Reactive library before this code might look a little confusing - but the small subset of ReactiveCocoa that we use can be learnt pretty quickly.&lt;/p&gt;

&lt;p&gt;The first line in the example &lt;code&gt;_bind&lt;/code&gt; method above ensures that the table view gets updated whenever a state update occurs. We use the ReactiveCocoa &lt;code&gt;ignoreNil()&lt;/code&gt; operator to ensure that we don&amp;rsquo;t kick off updates for an empty state. We then use the &lt;code&gt;map&lt;/code&gt; operator to map the latest state from the store into a description of how the table view should look like.&lt;/p&gt;

&lt;p&gt;This mapping occurs via the &lt;code&gt;annotationFilterViewProvider.tableViewModelForState&lt;/code&gt; method. This is where our custom React-like UIKit wrapper comes into play.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t dive into all implementation details, but here is what the &lt;code&gt;tableViewModelForState&lt;/code&gt; method looks like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;tableViewModelForState&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterState&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hideEverythingSection&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SectionModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerTitle&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerHeight&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;cellViewModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterViewProvider&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cellViewModelsForGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hideEverythingFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;shareStatusSection&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SectionModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerTitle&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;annotation_filters.share_status_section.title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;translate&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerHeight&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;cellViewModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterViewProvider&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cellViewModelsForGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;shareStatusFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;issueFilterSection&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SectionModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerTitle&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;annotation_filters.issues_section.title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;translate&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerHeight&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;cellViewModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterViewProvider&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cellViewModelsForGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;issueFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;generalFilterSection&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SectionModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerTitle&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;annotation_filters.general_section.title&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;translate&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;headerHeight&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;cellViewModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterViewProvider&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;cellViewModelsForGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;generalFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;FluxTableViewModel&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sectionModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;hideEverythingSection&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;shareStatusSection&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;issueFilterSection&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;generalFilterSection&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tableViewModelForState&lt;/code&gt; is a pure function that receives the latest state as its input and returns a description of table view in the form of a &lt;code&gt;FluxTableViewModel&lt;/code&gt;. The idea of this method is similar to React&amp;rsquo;s render function. The &lt;code&gt;FluxTableViewModel&lt;/code&gt; is entirely independent of UIKit and is a simple struct that describes the  content of the table. You can find an open source example implementation of this in the &lt;a href=&#34;https://github.com/Ben-G/AutoTable/blob/master/AutoTable/AutoTable/TableViewModel.swift&#34;&gt;AutoTable repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The result of this method is then bound to the &lt;code&gt;tableViewDataSource&lt;/code&gt; property of the view controller. The component stored in that property is responsible for updating the &lt;code&gt;UITableView&lt;/code&gt; based on the information provided in the &lt;code&gt;FluxTableViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Other binding code is a lot simpler, e.g. the code that enables/disables the &amp;ldquo;Clear Filter&amp;rdquo; button based on the &lt;code&gt;isFiltering&lt;/code&gt; state:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;compositeDisposable&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;navigationItem&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;rightBarButtonItem&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;!.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;racEnabled&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;~&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;store&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Implementing the UI bindings is definitely one of the trickier parts, since it doesn&amp;rsquo;t fit perfectly well together with UIKit&amp;rsquo;s programming model. But it only takes little effort to write custom components to make this easier. In our experience we&amp;rsquo;ve saved multiples of our invested time by implementing these components instead of sticking with the classical MVC approach in which these UI updates are redundantly implemented across many, many view controllers.&lt;/p&gt;

&lt;p&gt;With these UI bindings in place, we&amp;rsquo;ve discussed the last part of implementing a Flux feature. Since I covered a lot I want to give a quick recap before moving on to discussing the testing approach for Flux features.&lt;/p&gt;

&lt;h4 id=&#34;implementation-recap:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Implementation Recap&lt;/h4&gt;

&lt;p&gt;When implementing a Flux feature I will typically split the work into the following segments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the shape of the state type.&lt;/li&gt;
&lt;li&gt;Define the actions.&lt;/li&gt;
&lt;li&gt;Implement business logic and state transitions for each of the actions - this implementation lives in the store.&lt;/li&gt;
&lt;li&gt;Implement UI bindings that map the state to a view representation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This wraps up all of the implementation details we discussed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s move on to discuss how to test Flux features.&lt;/p&gt;

&lt;h3 id=&#34;writing-tests:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Writing Tests&lt;/h3&gt;

&lt;p&gt;One of the main benefits of the Flux architecture is that it separates concerns strictly. This makes it really easy to test the business logic and large parts of the UI code.&lt;/p&gt;

&lt;p&gt;Each Flux feature has two main areas that need to be tested:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The business logic in the store.&lt;/li&gt;
&lt;li&gt;The view model providers (these are our React-like functions that produce a description of the UI based on an input state).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;testing-stores:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Testing Stores&lt;/h4&gt;

&lt;p&gt;Testing stores is typically very simple. We can drive interactions with the store by passing in actions and we can observe the state changes by either subscribing to the store or by observing the internal &lt;code&gt;_state&lt;/code&gt; property in our tests.&lt;/p&gt;

&lt;p&gt;Additionally, we can mock any outside types that the store might need to communicate with in order to implement a certain feature (this could be an API client or a data access object) and inject these in the store&amp;rsquo;s initializer. This allows us to validate that these types are called as expected.&lt;/p&gt;

&lt;p&gt;Within PlanGrid we write our tests in a behavioral style using Quick and Nimble. Here is a simple example of a test from our annotation filter store specification:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;describe&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;toggling a filter&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hideAllFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilterType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;!&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;beforeEach&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;hideAllFilter&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;annotationFilterService&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hideAllFilterGroup&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;toggleFilterAction&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilteringActions&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ToggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #3465a4&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hideAllFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;annotationFilterStore&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_handleActions&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;toggleFilterAction&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #000000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;toggles the selected filter&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hideAllFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;beTrue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #000000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;enables filtering mode&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;annotationFilterStore&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;beTrue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #000000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;when subsequently resetting filters&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    
        &lt;span style=&#34;color: #000000&#34;&gt;beforeEach&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;annotationFilterStore&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_handleActions&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;AnnotationFilteringActions&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ResetFilters&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
        &lt;span style=&#34;color: #000000&#34;&gt;it&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;deactivates previously active filters and stops filter mode&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;hideAllFilter&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;enabled&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;beFalse&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;annotationFilterStore&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_state&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isFiltering&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;beFalse&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Once again, testing stores would merit it&amp;rsquo;s own blog post, so I won&amp;rsquo;t dive into the details of this particular test. However, the testing philosophy should be clear. We send actions to the store and validate the response in form of state changes or calls to injected mocks.&lt;/p&gt;

&lt;p&gt;(You might wonder why we&amp;rsquo;re calling the &lt;code&gt;_handleActions&lt;/code&gt; method on the store instead of dispatching an action using the dispatcher. Originally our dispatcher used asynchronous dispatch when delivering actions, which would have meant our tests needed to be asynchronous as well. Therefore we called the handler on the store directly. The implementation of the dispatcher has since changed, so we could be using the dispatcher in our tests going forward.)&lt;/p&gt;

&lt;p&gt;When implementing the business logic in a store I now mostly write my tests first. The structure of the our store code along with the behavioral Quick specs lends itself extremely well to a test driven development process.&lt;/p&gt;

&lt;h4 id=&#34;testing-views:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Testing Views&lt;/h4&gt;

&lt;p&gt;The Flux architecture combined with our declarative UI layer makes
testing views pretty simple. Internally we are still debating the amount of
coverage we should aim for on the view layer.&lt;/p&gt;

&lt;p&gt;Practically all of our view code is fairly straightforward. It binds the state
in the store to different properties of our UI layer. For our app we have
decided to cover most of this code through UI automation tests.&lt;/p&gt;

&lt;p&gt;However, there are many alternatives. Since the view layer is set up to render
an injected state, snapshot tests work really well, too.
Artsy has covered the idea of snapshot testing in various talks and blog
posts, &lt;a href=&#34;https://www.objc.io/issues/15-testing/snapshot-testing/&#34;&gt;including a great article on
objc.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our app we have decided that our UI automation coverage is sufficient, so
that we don&amp;rsquo;t need additional snapshot tests.&lt;/p&gt;

&lt;p&gt;I have also experimented with unit testing the view provider functions (e.g. the &lt;code&gt;tableViewModelForState&lt;/code&gt; function we&amp;rsquo;ve seen earlier). These view providers are pure functions that map a state to a UI description, so they are very easy to test based on an input and a return value. However, I found that these tests don&amp;rsquo;t add too much value as they mirror the declarative description of the implementation very closely.&lt;/p&gt;

&lt;p&gt;Using the Flux architecture view testing becomes fairly simple because the view code is well isolated from the rest of the app. You only need to inject a state that should be rendered in your tests and you are good to go.&lt;/p&gt;

&lt;p&gt;As we&amp;rsquo;ve seen there are may alternatives for testing the UI, I&amp;rsquo;m interested to see which one we (and other developers) will pick in the long term.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After diving into many implementation details I&amp;rsquo;d like to close with high level summary of our experience so far.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve only been using the Flux architecture for about 6 months, but we are already seeing many benefits in our code base:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New features are implemented consistently. The structure of stores, view providers and view. controllers across features is almost identical.&lt;/li&gt;
&lt;li&gt;By inspecting the state, the actions and the BDD-style tests it is very easy to understand how a feature works within a matter of minutes.&lt;/li&gt;
&lt;li&gt;We have a strong separation of concerns between stores and views. There&amp;rsquo;s seldom ambiguity about where certain code should live.&lt;/li&gt;
&lt;li&gt;Our code reads a lot simpler. The state upon which a view depends is always explicit. This makes debugging really easy, too.&lt;/li&gt;
&lt;li&gt;All of the above points make onboarding new developers a lot easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously there are also some &lt;strong&gt;pain points&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First and foremost the integration with UIKit components can be a little painful. Unlike React components, UIKit views don&amp;rsquo;t provide an API to simply update themselves based on a new state. This burden lies on us and we either need to implement it manually in our view bindings or need to write custom components that wrap UIKit components.&lt;/li&gt;
&lt;li&gt;Not all of our new code strictly follows the Flux pattern yet. E.g. we haven&amp;rsquo;t yet tackled a navigation/routing system that works with Flux. We need to either integrate a &lt;a href=&#34;http://khanlou.com/2015/10/coordinators-redux/&#34;&gt;coordinator pattern&lt;/a&gt; into our Flux architecture or use an actual router similar to &lt;a href=&#34;https://github.com/ReSwift/ReSwift-Router&#34;&gt;ReSwift Router&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We need to come up with a good pattern for state that is shared across large portions of the app (as discussed very early in this post: &amp;ldquo;What is the Scope of a Store?&amp;rdquo;). Should we have dependencies between stores as in the original Flux pattern? What are the alternatives?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;There are many, many more implementation details, advantages and disadvantages that I would like to dive into so I hope to cover some aspects in more detail in future blog posts.&lt;/p&gt;

&lt;p&gt;So far I&amp;rsquo;m very happy with our choice and I hope this blog posts gives you some insight into whether the Flux architecture is suitable for you as well.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And finally, if you&amp;rsquo;re interested in working with Flux in Swift, or simply want to help deliver an important product to a huge industry, &lt;strong&gt;&lt;a href=&#34;http://grnh.se/8fcutd&#34;&gt;we&amp;rsquo;re hiring&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks a lot to &lt;a href=&#34;https://twitter.com/zats&#34;&gt;@zats&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/kubanekl&#34;&gt;@kubanekl&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pixelpartner&#34;&gt;@pixelpartner&lt;/a&gt; for reading drafts of this post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt; - Facebook&amp;rsquo;s official Flux website including the original talk introducing it&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://realm.io/news/benji-encz-unidirectional-data-flow-swift/&#34;&gt;Unidirectional Data Flow in Swift&lt;/a&gt; - a talk I gave at Swift about Redux concepts and the original ReSwift implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reswift/reswift&#34;&gt;ReSwift&lt;/a&gt; - an implementation of Redux in Swift&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReSwift/ReSwift-Router&#34;&gt;ReSwift Router&lt;/a&gt; - a declarative router for ReSwift apps&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>WWDC 2016 5 Minute Update: Opening Up iOS, Xcode Extensions, Apple Filesystem, Swift Playgrounds on iPad</title>
      <link>http://blog.benjamin-encz.de/post/wwdc-2016-open-ios-xcode-extensions-apple-file-system/</link>
      <pubDate>Tue, 14 Jun 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/wwdc-2016-open-ios-xcode-extensions-apple-file-system/</guid>
      <description>

&lt;p&gt;A very brief summary of changes &amp;amp; impressions from WWDC 2016 Day One.&lt;/p&gt;

&lt;h2 id=&#34;opening-up-ios:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Opening up iOS&lt;/h2&gt;

&lt;p&gt;The most notable changes to iOS were the addition of many APIs and Extension points. Apple wants to allow developers to build apps that integrate stronger with system services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/Intents/Conceptual/SiriIntegrationGuide/index.html#//apple_ref/doc/uid/TP40016875-CH11-SW1&#34;&gt;SiriKit&lt;/a&gt; will allow developers to integrate with Siri on iOS.&lt;/li&gt;
&lt;li&gt;iMessage now comes with its own App Store and the &lt;a href=&#34;https://developer.apple.com/reference/messages&#34;&gt;Messages framework&lt;/a&gt; that allows apps to enrich iMessage conversations.&lt;/li&gt;
&lt;li&gt;A new VOIP Api, &lt;a href=&#34;https://developer.apple.com/reference/callkit&#34;&gt;CallKit&lt;/a&gt; will allow third party apps to integrate with the native iOS calling experience (e.g. real ringtones, lock screen notifications on calls, integration with address book, etc.)&lt;/li&gt;
&lt;li&gt;Via &lt;a href=&#34;https://developer.apple.com/maps/&#34;&gt;Map Extensions&lt;/a&gt;, Apple Maps is now open to third party integrations as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xcode-extensions:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Xcode Extensions&lt;/h2&gt;

&lt;p&gt;Xcode 8 comes with support for Extensions. For now these extensions will be limited to the source editor itself. At the same time Apple is shutting down &lt;a href=&#34;http://alcatraz.io/&#34;&gt;Alcatraz&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/fzwob&#34;&gt;@fzwob&lt;/a&gt; Xcode 8 uses library validation. It won&amp;#39;t load in-process plugins anymore.&lt;/p&gt;&amp;mdash; Joe Groff (@jckarter) &lt;a href=&#34;https://twitter.com/jckarter/status/742471686935568384&#34;&gt;June 13, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still glad to see an official (albeit for the time limited) API for building Xcode extensions. From the presentation it seemed clear that Apple wants to expand the scope of Xcode extensions quickly.&lt;/p&gt;

&lt;h2 id=&#34;new-apple-filesystem:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;New Apple Filesystem&lt;/h2&gt;

&lt;p&gt;While this won&amp;rsquo;t affect most developers a lot, this is still an important step in modernizing Apple&amp;rsquo;s Operating Systems and it will have benefits for users, such as much faster backups and copy-on-write clones. Ars Technica has a good writeup on the key features of &lt;a href=&#34;http://arstechnica.com/apple/2016/06/digging-into-the-dev-documentation-for-apfs-apples-new-file-system/&#34;&gt;APFS&lt;/a&gt;. Apple has also published a &lt;a href=&#34;https://developer.apple.com/library/prerelease/content/documentation/FileManagement/Conceptual/APFS_Guide/NewFeatures/NewFeatures.html#//apple_ref/doc/uid/TP40016999-CH3-SW1&#34;&gt;guide&lt;/a&gt; that announces a release in 2017 and mentions that while there is no open source implementation for now, the APFS volume format specification will be published.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re curios why Apple needed a new file system you can read this blog post about some of the issues with the current &lt;a href=&#34;https://t.co/wB40yheV39&#34;&gt;HFS+ file system&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;swift-playgrounds-on-ipad:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Swift Playgrounds on iPad&lt;/h2&gt;

&lt;p&gt;The new Swift Playgrounds app for iPad promises to be a great educational tool and demonstrates the emphasize that Apple has been putting on Swift as a beginner friendly language. The app will be open to third party educational content.&lt;/p&gt;

&lt;p&gt;Besides the compiler the app is also entirely written in Swift, which most likely makes it the largest in house Swift project at Apple to date.&lt;/p&gt;

&lt;h2 id=&#34;xcode-memory-graph-debugger:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Xcode Memory Graph Debugger&lt;/h2&gt;

&lt;p&gt;This feature, announced during the State of the Union, had the largest &lt;em&gt;WOW&lt;/em&gt; effect. Xcode 8 ships with a memory graph debugger that allows halting a program and inspecting a memory management graph at runtime. This will make tracking down retain cycles a lot easier in future.&lt;/p&gt;

&lt;h2 id=&#34;logging-api:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Logging API&lt;/h2&gt;

&lt;p&gt;Apple has released a new &lt;a href=&#34;https://developer.apple.com/reference/os/1891852-logging&#34;&gt;logging system&lt;/a&gt;. It&amp;rsquo;s great to see such an important issue tackled by a first party API.&lt;/p&gt;

&lt;h2 id=&#34;surprises-machine-learning-server-side-swift:95912072f1fe7b71c7be6f84c3b33b21&#34;&gt;Surprises: Machine Learning &amp;amp; Server Side Swift&lt;/h2&gt;

&lt;p&gt;To me, two surprises on the WWDC session schedule were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Session 415: Going Server-side with Swift Open Source&lt;/li&gt;
&lt;li&gt;Session 715: Neural Networks and Accelerate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s great to see Apple so openly promote the use of Swift on other platforms. Being featured as part of WWDC gives the current efforts of building server side Swift frameworks a lot more credibility.&lt;/p&gt;

&lt;p&gt;Apples new push into machine learning is also evident this year. I plan on attending the &amp;ldquo;Neural Networks and Accelerate&amp;rdquo; session; and it appears that Metal also provides new APIs relevant to machine learning:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Metal now has a set of comprehensive APIs for building convolutional neural networks. &lt;a href=&#34;https://t.co/BppyeRJurJ&#34;&gt;https://t.co/BppyeRJurJ&lt;/a&gt; &lt;a href=&#34;https://t.co/syfbUy63Jm&#34;&gt;pic.twitter.com/syfbUy63Jm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Indragie Karunaratne (@indragie) &lt;a href=&#34;https://twitter.com/indragie/status/742484067996704768&#34;&gt;June 13, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;It seems that Apple is pioneering on device machine learning which goes hand in hand with their privacy efforts (e.g. Differential Privacy). I&amp;rsquo;m very curios to see if it possible to create great results in machine learning while maintaining users privacy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCD&#39;s Main Queue vs. Main Thread</title>
      <link>http://blog.benjamin-encz.de/post/main-queue-vs-main-thread/</link>
      <pubDate>Sun, 05 Jun 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/main-queue-vs-main-thread/</guid>
      <description>

&lt;p&gt;The correct way to ensure that code runs on the main thread / main queue is a recurring issue that causes some confusion among Cocoa developers.
The topic came up again this week as part of an issue with ReactiveCocoa and MapKit:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Apple DTS “explicitly stated that main queue and the main thread are not the same thing, have subtle differences”. &lt;a href=&#34;https://t.co/YxAbqkvtse&#34;&gt;https://t.co/YxAbqkvtse&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ole Begemann (@olebegemann) &lt;a href=&#34;https://twitter.com/olebegemann/status/738656134731599872&#34;&gt;June 3, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-problem:997ed369e26584277379d51208fcfef8&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;When interacting with certain frameworks, e.g. UIKit, we need to ensure that all calls into the framework happen from the main thread.
Typically we have some sort of check to determine whether our code is already executing on the main thread or whether we are on a background thread and actively need to dispatch to the main thread.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a function that generates an image as a trivial example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;createImageUnsafe&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// TODO: Check for Main Thread&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;contentsOfFile&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;the-easy-solution:997ed369e26584277379d51208fcfef8&#34;&gt;The Easy Solution&lt;/h2&gt;

&lt;p&gt;The easiest way to check if we are currently executing on the main thread is using &lt;code&gt;NSThread.isMainThread()&lt;/code&gt; - GCD lacks a similarly convenient API for checking if we are running on the main queue, so many developers use the &lt;code&gt;NSThread&lt;/code&gt; API instead. Our updated function will look somewhat like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;createImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;NSThread&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;isMainThread&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;contentsOfFile&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// /!\ Use dispatch_sync cautiously&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// it can cause deadlocks!&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;dispatch_sync&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;contentsOfFile&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works in most cases, &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/issues/2635#issuecomment-170215083&#34;&gt;until it doesn&amp;rsquo;t&lt;/a&gt;. Here&amp;rsquo;s the excerpt from the issue on the ReactiveCocoa repo:
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/public/assets/mainqueue-mainthread/rac_issue_queue_thread.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The underlying problem is that the &lt;code&gt;VektorKit&lt;/code&gt; API is checking if it is being called on the main queue instead of checking that it is running on the main thread.&lt;/strong&gt; This issue has also been filed as a &lt;a href=&#34;http://www.openradar.me/24025596&#34;&gt;radar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While every app will ever only have one main thread, it is possible for many different queues to execute on this one main thread.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling an API from a non-main queue that is executing on the main thread will lead to issues if the library (like VektorKit) relies on checking for execution on the main queue.&lt;/p&gt;

&lt;p&gt;It is surprisingly easy to get a non-main queue to execute on the main thread. While doing some research for this post I found a commit to &lt;code&gt;libdispatch&lt;/code&gt; that &lt;a href=&#34;https://libdispatch.macosforge.org/trac/changeset/156&#34;&gt;ensures that blocks dispatched with &lt;code&gt;dispatch_sync&lt;/code&gt; are always executed on the current thread&lt;/a&gt;. This means if you use &lt;code&gt;dispatch_sync&lt;/code&gt; to dispatch a block from the main queue to a concurrent background queue, the code executing on the background queue will actually be executed on the main thread. While this might not be entirely intuitive, it makes sense: since the main queue needs to wait until the dispatched block completed, the main thread will be available to process blocks from queues other than the main queue.&lt;/p&gt;

&lt;h2 id=&#34;the-safer-solution:997ed369e26584277379d51208fcfef8&#34;&gt;The Safer Solution&lt;/h2&gt;

&lt;p&gt;Technically I think this is a MapKit / VektorKit bug, Apple&amp;rsquo;s UI frameworks typically guarantee to work correctly when being called from the main thread, no part of the documentation mentions that code needs to be executed on the main queue.&lt;/p&gt;

&lt;p&gt;However, now that we know that certain APIs rely not only on running on the main thread, but also on the main queue, it is safer to check for the current queue instead of checking for the current thread.&lt;/p&gt;

&lt;p&gt;Checking for the current queue also makes better use of the abstraction that GCD provides over threading. Technically we shouldn&amp;rsquo;t know/care that the main queue is a special kind of queue that is always bound to the main thread.&lt;/p&gt;

&lt;p&gt;Unfortunately GCD doesn&amp;rsquo;t have a very convenient API for checking for the queue we&amp;rsquo;re currently running on (which most likely is the reason why many developers use &lt;code&gt;NSThread.isMainThread()&lt;/code&gt; in the first place).&lt;/p&gt;

&lt;p&gt;We need to use the &lt;code&gt;dispatch_queue_set_specific&lt;/code&gt; function in order to associate a key-value pair with the main queue; later we can use &lt;code&gt;dispatch_queue_get_specific&lt;/code&gt; to check for the presence of key &amp;amp; value. Here&amp;rsquo;s the updated image function example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mainQueueKey&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Void&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;alloc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mainQueueValue&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;UnsafeMutablePointer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;Void&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;alloc&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Associate a key-value pair with the main queue&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;dispatch_queue_set_specific&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(),&lt;/span&gt; 
    &lt;span style=&#34;color: #000000&#34;&gt;mainQueueKey&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color: #000000&#34;&gt;mainQueueValue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;createImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;nil&lt;/span&gt;

    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Check for presence of key-value pair on current queue&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;dispatch_get_specific&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;mainQueueKey&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mainQueueValue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// if we found right value for key, execute immediately&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;contentsOfFile&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;main queue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// otherwise dispatch on main queue now&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// /!\ Use dispatch_sync cautiously&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// it can cause deadlocks!&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;dispatch_sync&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIImage&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;contentsOfFile&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;not main queue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;image&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Both, key and value are simple &lt;code&gt;Void&lt;/code&gt; pointers - we only need to use them for an equality check.&lt;/p&gt;

&lt;p&gt;The function above will now not only check that we&amp;rsquo;re running on the main thread, but also ensure we&amp;rsquo;re on the main queue.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:997ed369e26584277379d51208fcfef8&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;By combining GCD and Cocoa&amp;rsquo;s &lt;code&gt;NSThread&lt;/code&gt; API we are drilling through the abstraction that CGD should provide in the first place. APIs that fully rely on GCD and ignore the presence of the underlying threads can run into problems if you call them on the main thread but not the main queue. This means, especially when calling into other frameworks, we should prefer using &lt;code&gt;dispatch_queue_set_specific&lt;/code&gt; and &lt;code&gt;dispatch_get_specific&lt;/code&gt; to check if our code is running on the main queue over using &lt;code&gt;NSThread.isMainThread()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Blog Posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@&lt;a href=&#34;https://twitter.com/krzyzanowskim&#34;&gt;krzyzanowskim&lt;/a&gt; has written a &lt;a href=&#34;http://blog.krzyzanowskim.com/2016/06/03/queues-are-not-bound-to-any-specific-thread/&#34;&gt;great blog post about the relationship of threads, queues and runloops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Beware the UIKit Visitors!</title>
      <link>http://blog.benjamin-encz.de/post/disassembling-uikit-tintcolor-visitor/</link>
      <pubDate>Tue, 10 May 2016 12:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/disassembling-uikit-tintcolor-visitor/</guid>
      <description>

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;investigating-the-cause-of-quadratic-time-complexity-when-adding-subviews-in-uikit:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Investigating the Cause of Quadratic Time Complexity When Adding Subviews in UIKit&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;Yesterday&lt;/del&gt; Two weeks ago we identified a performance regression in the PlanGrid app, when entering a view that dynamically adds a large amount of subviews.&lt;/p&gt;

&lt;p&gt;I started this blog post back then, but was recently motivated to finish it quickly by seeing other developers running into this issue as well:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My discovery for the day is iOS has an O(n^2) cost to add a subview so never have too many subviews on a view or performance goes to shit&lt;/p&gt;&amp;mdash; Rupert H (@rpy) &lt;a href=&#34;https://twitter.com/rpy/status/729550705137090560&#34;&gt;May 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For this blog post I wanted to isolate this issue from our code base. I was able to reproduce the issue with this minimal example inside of a blank &lt;code&gt;UIViewController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;viewDidAppear&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;animated&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Bool&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;viewDidAppear&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;animated&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;tintColor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;blueColor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #3465a4&#34;&gt;UIView&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;addSubview&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above example is obviously extreme, but it reveals an interesting performance issue: when setting a &lt;code&gt;tintColor&lt;/code&gt; on a parent view, and not setting an explicit color on child views the performance of &lt;code&gt;addSubview&lt;/code&gt; reduces itself drastically with a large amount of added subviews.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I could identify within Instrument&amp;rsquo;s time profiler:
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/tint-color-visitor-highlight.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A majority of the time is adding subviews is spent within &lt;code&gt;[_UITintColorVisitor _visitView:]&lt;/code&gt;. In this example it&amp;rsquo;s 64% of the time; and the proportion only increases with the amount of subviews we&amp;rsquo;re adding.&lt;/p&gt;

&lt;p&gt;We like our custom tint color; but not enough to justify such an impact on performance. &lt;strong&gt;By deactivating the custom tint color we bring the overall run time of &lt;code&gt;viewDidAppear&lt;/code&gt; from our example project from over 700ms down to ~10ms.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same affect can be accomplished by specifying the &lt;code&gt;tintColor&lt;/code&gt; on each view we&amp;rsquo;re adding, which stops the expensive &lt;code&gt;_UITintColorVisitor&lt;/code&gt; from stopping by too often.&lt;/p&gt;

&lt;h2 id=&#34;digging-into-uikit:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Digging into UIKit&lt;/h2&gt;

&lt;p&gt;Finding a workaround for this issue is only half of the fun. Let&amp;rsquo;s try to find out what is causing these poor performance characteristics in the first place. We can start by taking a closer look at the time profiler output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/focus-tint-color-visitor.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the app doesn&amp;rsquo;t spend too much time in &lt;code&gt;[_UITintColor _visitView]&lt;/code&gt; itself. The majority of the time is consumed by &lt;code&gt;objc_msgSend&lt;/code&gt; which indicates that this method is causing many, many method invocations or the method itself is being called extremely frequently. Further, we&amp;rsquo;re spending a lot of time in &lt;code&gt;[NSArray containsObject:]&lt;/code&gt; which either means that the array is being searched through too often in the first place, or that a data structure that is more efficient for lookups should be used instead of an array (e.g. a dictionary or a set).&lt;/p&gt;

&lt;h3 id=&#34;breakpoints-in-framework-functions:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Breakpoints in Framework Functions&lt;/h3&gt;

&lt;p&gt;We can start by setting a breakpoint within the &lt;code&gt;[_UITintColor _visitView]&lt;/code&gt; method; that will give us an idea of how often that method is called.&lt;/p&gt;

&lt;p&gt;We can do that by setting a breakpoint early in our program to bring up the lldb console (alternatively we could use lldb from the terminal). Then we can enter the following command to set a breakpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) b -[_UITintColorVisitor _visitView:]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can continue execution; soon we should trap into our breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/visit-view-breakpoint.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Checking how often this method is called, I quickly identified that the amount of calls grows with the amount of subviews we have added. As a next step I wanted to see which views exactly are being visited. For that we need to dive into a little bit of assembly code.&lt;/p&gt;

&lt;h3 id=&#34;inspecting-the-assembly-code:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Inspecting the Assembly Code&lt;/h3&gt;

&lt;p&gt;When stepping into the breakpoint in &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt; you are greeted with a cryptic wall of assembly code. I started out with very barebones knowledge of understanding/investigating complex assembly code, but this bug forced me to learn some tricks that hopefully are useful to you as well!&lt;/p&gt;

&lt;h4 id=&#34;running-the-example-app-on-32-bit-mode:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Running the Example App on 32-Bit Mode&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;I have gotten feedback from multiple readers, that Hopper works just as well in 64-Bit mode, and actually makes accessing arguments easier. For my next disassembly adventure I will try 64 instead of 32-Bit.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a first step, let&amp;rsquo;s ensure that our app runs in &lt;strong&gt;32-Bit&lt;/strong&gt; mode in the simulator. This architecture is known as &lt;strong&gt;i386&lt;/strong&gt;. We choose to run the app in 32-Bit mode since i386 has a simpler way of passing function arguments (which will come in handy shortly). In Xcode 7 the easiest way to run on the i386 architecture is to select the &lt;em&gt;iPad 2&lt;/em&gt; simulator.&lt;/p&gt;

&lt;p&gt;With this setup in place, we can now inspect which views are visited from within our breakpoint in &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt;. Looking at the method signature we can see that this method takes on argument: the view that is being visited. That&amp;rsquo;s the information that we would like to inspect further. In addition to that explicit argument every method call in Objective-C receives &lt;code&gt;self&lt;/code&gt; as the first and the &lt;code&gt;selector&lt;/code&gt; as the second implicit argument.&lt;/p&gt;

&lt;h4 id=&#34;printing-function-arguments-in-assembly:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Printing Function Arguments in Assembly&lt;/h4&gt;

&lt;p&gt;By using &lt;a href=&#34;https://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/&#34;&gt;this handy reference&lt;/a&gt; we can look up where these arguments are stored when a method is called (the reference is old and refers &lt;code&gt;gdb&lt;/code&gt; instead of &lt;code&gt;lldb&lt;/code&gt;, but the info is still up to date.). The order of these arguments is part of what we call a &amp;ldquo;calling convention&amp;rdquo;. It states that on a i386 architecture function arguments are passed as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before prologue:

&lt;ul&gt;
&lt;li&gt;*($esp+4n) ➡ arg(n)&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;After prologue:

&lt;ul&gt;
&lt;li&gt;*($ebp+8+4n) ➡ arg(n)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;n&lt;/em&gt; here refers to the index of the argument.&lt;/p&gt;

&lt;p&gt;Without getting into too much detail at this point: the &amp;ldquo;prologue&amp;rdquo; is a sequence at the beginning of a function call that configures the stack pointer and different stack variables. The variable locations for our function arguments are different before and after the prologue (&lt;a href=&#34;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&#34;&gt;this blog post&lt;/a&gt; by Ari Grant has a good description for what the function prologue and epilogue do). All arguments are offset from the base address that is stored in the &lt;code&gt;esp&lt;/code&gt; register.&lt;/p&gt;

&lt;p&gt;For now we&amp;rsquo;ll use the addresses before the prologue, since we&amp;rsquo;ll access the arguments as soon as we trap into our breakpoint at the beginning of the &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;When we reach that breakpoint we can print all 3 arguments to our function call as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) po *(id *)($esp+4)
&amp;lt;_UITintColorVisitor: 0xc502540&amp;gt;

(lldb) po *(SEL *)($esp+8)
&amp;quot;_visitView:&amp;quot;

(lldb) po *(id *)($esp+12)
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use this new ability to print the visited view every time we step into our breakpoint, by calling: &lt;code&gt;po *(id *)($esp+12)&lt;/code&gt; (alternatively you can also use a &lt;a href=&#34;http://objectivistc.tumblr.com/post/40854305239/stack-trace-dumping-regular-expression-based&#34;&gt;breakpoint command&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Using this technique I identified that after a new subview is added, the parent view and all of its children are passed to calls of &lt;code&gt;-[_UITintColorVisitor _visitView:]&lt;/code&gt;. For each added view UIKit will iterate all of its siblings.&lt;/p&gt;

&lt;p&gt;Why exactly is that happening? I have not yet been able to track it down definitely, but I have a bunch more clues that I&amp;rsquo;d like to share.&lt;/p&gt;

&lt;h4 id=&#34;let-the-guesswork-begin:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Let the Guesswork begin&lt;/h4&gt;

&lt;p&gt;Since we want to know why the &lt;code&gt;_UITintColorVisitor&lt;/code&gt; is called so frequently, it makes sense to start by investigating the backtrace. We can do this with the &lt;code&gt;bt&lt;/code&gt; lldb command that we can invoke while halted in a breakpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) bt
* thread #1: tid = 0x156ea9, 0x00e4b61c UIKit`-[_UITintColorVisitor _visitView:], queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 9.1
  * frame #0: 0x00e4b61c UIKit`-[_UITintColorVisitor _visitView:]
    frame #1: 0x00e4bfbb UIKit`_UIViewVisitorEntertainVisitors + 107
    frame #2: 0x00e4af30 UIKit`_UIViewVisitorRecursivelyEntertainDescendingVisitors + 162
    frame #3: 0x00e4a8ca UIKit`_UIViewVisitorEntertainDescendingTrackingVisitors + 705
    frame #4: 0x00e4a2be UIKit`_UIViewVisitorEntertainHierarchyTrackingVisitors + 58
    frame #5: 0x00a9ce3f UIKit`__45-[UIView(Hierarchy) _postMovedFromSuperview:]_block_invoke + 268
    frame #6: 0x005b1440 Foundation`-[NSISEngine withBehaviors:performModifications:] + 150
    frame #7: 0x005b491c Foundation`-[NSISEngine withAutomaticOptimizationDisabled:] + 48
    frame #8: 0x00a9cce4 UIKit`-[UIView(Hierarchy) _postMovedFromSuperview:] + 521
    frame #9: 0x00aac7f1 UIKit`-[UIView(Internal) _addSubview:positioned:relativeTo:] + 2367
    frame #10: 0x00a9acc8 UIKit`-[UIView(Hierarchy) addSubview:] + 56
    frame #11: 0x00002be9 ExampleApp`ViewController.viewDidAppear(animated=false, self=0x0c72cce0) -&amp;gt; () + 825 at ViewController.swift:40
    frame #12: 0x00002cbf ExampleApp`@objc ViewController.viewDidAppear(Bool) -&amp;gt; () + 63 at ViewController.swift:0
    [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Up until &lt;code&gt;frame #11&lt;/code&gt; we&amp;rsquo;re only seeing code that is necessary to set up the example project. &lt;code&gt;frame #10&lt;/code&gt; is the actual starting point for our investigation. It is called whenever a new subview is added and it eventually results in a call to the &lt;code&gt;_UITintColorVisitor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is interesting is that &lt;code&gt;addSubview&lt;/code&gt; is only ever called on our root view, but the &lt;code&gt;_UITintColorVisitor&lt;/code&gt; is called for all of the subviews of that root view. The cause of this problem must lie somewhere between &lt;code&gt;frame #11&lt;/code&gt; and &lt;code&gt;frame #0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point it was not obvious to me why all views were being caused to be visited; at the very end of the next section I might have a likely answer to that question&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;digging-deeper:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Digging Deeper&lt;/h4&gt;

&lt;p&gt;Since I hit a dead end in identifying why all subviews in the view hierarchy were constantly being revisited, I decided to investigate another interesting aspect about this problem that profiler had revealed.&lt;/p&gt;

&lt;p&gt;Earlier we identified that about 25% of the total time is taken up in calls to &lt;code&gt;[NSArray containsObject:]&lt;/code&gt; which is called as part of the implementation of &lt;code&gt;[_UITintColorVisitor visitView:]&lt;/code&gt;. I have used &lt;a href=&#34;http://www.hopperapp.com/&#34;&gt;Hopper Disassembler&lt;/a&gt; to try to understand why that&amp;rsquo;s the case. A disassembler can translate a binary (in machine code) back into assembly instructions which enables us to explore some of the inner workings of closed source software. This is useful, e.g. to explore issues in Apple&amp;rsquo;s UIKit framework.&lt;/p&gt;

&lt;p&gt;If you have never used Hopper before, but would like to follow along, I would recommend reading this &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;brief introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopper has a handy feature that can generate pseudo code from the disassembled binary, which makes it somewhat easier to try and grasp the control flow of a program (if, like me, you&amp;rsquo;re mostly unfamiliar with assembly code).&lt;/p&gt;

&lt;p&gt;By browsing throught the pseudo code generated by Hopper I could identify the section of &lt;code&gt;[_UITintColorVisitor _visitView:]&lt;/code&gt; that calls &lt;code&gt;containsObject&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/visit-view-pseudo-code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I also stepped through the assembly code that corresponds to this pseudo code in the debugger. As part of that effort I identified a few things that are relevant to this snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One &lt;code&gt;_UITintColorVisitor&lt;/code&gt; instance is used to visit all views (at least in this simple example with only one view hierarchy)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_UITintColorVisitor&lt;/code&gt; has a few properties that are persisted between the different invocations of &lt;code&gt;visitView:&lt;/code&gt;. Here&amp;rsquo;s an overview of all properties found in Hopper:
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/tint-color-visitor-properties.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From stepping through the assembly code and investigating different registries I could identify that in the above pseudo code &lt;code&gt;eax&lt;/code&gt; refers to the &lt;code&gt;_originalVisitedView&lt;/code&gt; and &lt;code&gt;edi&lt;/code&gt; refers to the view that is currently being visited.&lt;/p&gt;

&lt;p&gt;This means, that as soon as a &lt;code&gt;_UITintColorVisitor&lt;/code&gt; has an original visited view (which is true after it visited its first view), the outlined code checks if the &lt;code&gt;subviews&lt;/code&gt; array of the &lt;code&gt;originalVisitedView&lt;/code&gt; contains the currently visited view. This check scans the full array of subviews; in cases where the &lt;code&gt;originalVisitedView&lt;/code&gt; is our root view, the cost of this operation grows linearly with the amount of added subviews.&lt;/p&gt;

&lt;p&gt;I investigated this further by creating another breakpoint in UIKit at the point where this check takes place. When disassembling the 32-Bit slice of UIKit and running the app in 32-Bit mode, the address offsets align nicely. By stepping into the breakpoint in &lt;code&gt;-[_UITintColorVisitor visitView:]&lt;/code&gt; I could compare the assembly addresses in the debugger and in Hopper and identify that the addresses match up when replacing the &lt;code&gt;495&lt;/code&gt; in the hopper address with &lt;code&gt;0xe4b&lt;/code&gt;. The relative addresses within UIKit are constant, only the base address at which the framework is loaded is dynamic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/address-align.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we know the memory address offset we can create breakpoints in lldb based on addresses in Hopper.&lt;/p&gt;

&lt;p&gt;Knowing this, I created a new breakpoint based on the &lt;code&gt;loc_4956fd&lt;/code&gt; in Hopper like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b 0xe4b6fd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within the breakpoint I printed both the &lt;code&gt;eax&lt;/code&gt; register and the &lt;code&gt;_originalVisitedView&lt;/code&gt; of &lt;code&gt;self&lt;/code&gt; (which is stored in the &lt;code&gt;ebx&lt;/code&gt; register):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) po $eax
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;

(lldb) po [$ebx valueForKey:@&amp;quot;_originalVisitedView&amp;quot;]
&amp;lt;UIView: 0xc131830; frame = (0 0; 768 1024); autoresize = W+H; tintColor = UIDeviceRGBColorSpace 0 0 1 1; layer = &amp;lt;CALayer: 0xc1176d0&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach I identified that with the current sample code, &lt;code&gt;eax&lt;/code&gt; &lt;strong&gt;always refers to the root view&lt;/strong&gt;. This means we are iterating over all subviews of the root view, N times for each subview that is added.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m no expert in complexity analysis but it appears that the total cost of &lt;code&gt;[_UITintColor visitView:]&lt;/code&gt; sums up to &lt;code&gt;n^2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;n&lt;/strong&gt; invocations of &lt;code&gt;[_UITintColor visitView:]&lt;/code&gt;) * (&lt;strong&gt;n&lt;/strong&gt; cost of iterating all subviews) where &lt;strong&gt;n&lt;/strong&gt; = amount of added subviews&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why do we have these two code paths outlined above in the first place&lt;/strong&gt;? Why do we need to check if the currently visited view is a subview of the original visited view?&lt;/p&gt;

&lt;p&gt;In both cases, whether it is a subview or not, we end up calling: &lt;code&gt;___34-[_UITintColorVisitor _visitView:]_block_invoke&lt;/code&gt;. In the case of the currently visited view being a subview of the original visited view, we pass two arguments to the block, in the other case we pass only one.&lt;/p&gt;

&lt;p&gt;Before moving on, here&amp;rsquo;s an annotated version of the method we just investigated:
&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/visit-view-pseudo-code-annotated.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at the block that is being invoked from here. By double-clicking onto the call to the block in Hopper, we can jump into the called block. It looks as following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/called-block.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that this block receives two arguments. Using the address translation technique from earlier I decided to create the following breakpoint to jump into this block using lldb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lldb) b 0xe4b7ee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By investigating the registers I found out that &lt;code&gt;ebx&lt;/code&gt; refers to the &lt;code&gt;UIView&lt;/code&gt; instance that is being visited and &lt;code&gt;*(esi + 0x14)&lt;/code&gt; refers to the tint color visitor.
The code seems to switch over the &lt;code&gt;_reasons&lt;/code&gt; property of the &lt;code&gt;[_UITintColorVisitor]&lt;/code&gt; and over some properties of the visited view.&lt;/p&gt;

&lt;p&gt;After stepping through the function prologue we can investigate the relevant values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;po [*(id *)($esi+0x14) valueForKey:@&amp;quot;_reasons&amp;quot;]
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;_reasons&lt;/code&gt; property seems to store a bitmask value. Our bitmask is set to &lt;code&gt;1&lt;/code&gt;. The first &lt;code&gt;if&lt;/code&gt; statment in the pseudo code checks if the &lt;code&gt;1&lt;/code&gt; bit of the bitmask is set. A further condition is that the view&amp;rsquo;s &lt;code&gt;_interactionTintColor&lt;/code&gt; needs to be &lt;code&gt;nil&lt;/code&gt; (this check likely explains why setting an explicit &lt;code&gt;tintColor&lt;/code&gt; on a view fixes our performance issue). Since both conditions are met, we execute the body of the first &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Inside of the &lt;code&gt;if&lt;/code&gt; block we finally find a key that might help solve this puzzle:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ebx _setAncestorDefinesTintColor:eax];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here UIKit is marking this view, noting that its parent is defining a tint color. I&amp;rsquo;m assuming that this flag is what registers this view in some way to be visited by the &lt;code&gt;_UITintColorVisitor&lt;/code&gt;, since we are passing it as an argument to the &lt;code&gt;_setAncestorDefinesTintColor&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The big question remains why this is flag is set every single time the view is visited and not only in cases where the subview has moved in the view hierarchy or when the parent view changes its tint color. Another interesting question is why the &lt;code&gt;superview&lt;/code&gt; property of the visited view is not used instead of iterating over the array of subviews of the parent view. Both of these mysteries will most likely remain unsolved.&lt;/p&gt;

&lt;p&gt;However, our new findings help explain the two code paths in the piece of code that calls into this block (which we examined earlier):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ben-G/HugoBlog/master/static/assets/visit-view-pseudo-code.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If the currently visited view is not a child view of the original visited view, we don&amp;rsquo;t pass a second argument to this block; which is equivalent to passing &lt;code&gt;nil&lt;/code&gt;. This means that &lt;code&gt;ebx&lt;/code&gt; will be &lt;code&gt;nil&lt;/code&gt;, which in turn means we will never call &lt;code&gt;[ebx _setAncestorDefinesTintColor:eax];&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:bd21c6a2ef964e87977ff56934e088c5&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;When I started out diving into this issue I was almost entirely clueless about how to interpret complex disassembled code - now I&amp;rsquo;m still mostly clueless. However, I learned a few very handy tricks along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I learned how to set breakpoints in private methods &amp;amp; and at any address within the assembly code.&lt;/li&gt;
&lt;li&gt;I learned about the i386 and Objective-C calling conventions, e.g. which arguments are stored in which registers.&lt;/li&gt;
&lt;li&gt;I learned that the addresses in Hopper match the addresses in the actual framework code (besides a base pointers offset depending on where UIKit is loaded into memory). In hindsight this sounds obvious but it definitely was not the case when starting out. &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;This article&lt;/a&gt; was very helpful in getting more comfortable with working with lldb in UIKit alongside of Hopper.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three tools allowed me to explore the code paths &amp;amp; relevant variables a lot faster which in turn made it a lot easier (yet still hard) to get a grasp of what was going on.&lt;/p&gt;

&lt;p&gt;In the end I didn&amp;rsquo;t find a definite answer on how this issue could be fixed, but I found a lot of clues about how the current visitor pattern is implemented and I think I got fairly close to the underlying issue.&lt;/p&gt;

&lt;p&gt;Most importantly I learned how to be more efficient at exploring the inner workings of closed source frameworks which will surely come in handy in future! Attempting to reverse engineer code can be very intimidating and the learning curve is really steep. I hope some day when I have a better grasp myself I can share a beginner friendly guide on all of this!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks a lot to Russ Bishop who tracked down the original issue together with me. He has also filed a radar: &lt;a href=&#34;https://openradar.appspot.com/radar?id=4963594483531776&#34;&gt;25934331&lt;/a&gt; (fingers crossed)!&lt;/p&gt;

&lt;p&gt;I also recommend the following helpful articles for getting started with reverse engineering closed source Cocoa code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This article was a great introduction to the very basics of using Hopper and lldb side by side: &lt;a href=&#34;http://www.bartcone.com/new-blog/2014/11/26/hopper-lldb-for-ios-developers-a-gentle-introduction&#34;&gt;Hopper + lldb for iOS Developers: A Gentle Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Very good discussion of function prologue and epilogue as well as calling conventions: &lt;a href=&#34;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&#34;&gt;Printing Objective-C Invocations in LLDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eecg.toronto.edu/~amza/www.mindsec.com/files/x86regs.html&#34;&gt;x86 Register Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/&#34;&gt;x86 + ObjC Calling Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://objectivistc.tumblr.com/post/40854305239/stack-trace-dumping-regular-expression-based&#34;&gt;Breakpoint Commands in lldb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another post on calling conventions in Objective-C by Jeff Hui, recommended by&lt;a href=&#34;https://twitter.com/rpy&#34;&gt;@rpy&lt;/a&gt;: &lt;a href=&#34;https://www.jeffhui.net/2014/03-reverse-engineering-objective-c.html&#34;&gt;Reverse Engineering Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Decoding Heterogeneous Collections in Swift</title>
      <link>http://blog.benjamin-encz.de/post/decoding-heterogeneous-collections-in-swift/</link>
      <pubDate>Tue, 03 May 2016 10:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/decoding-heterogeneous-collections-in-swift/</guid>
      <description>

&lt;p&gt;The problem of decoding Swift types from an outside data source, such as JSON, has been mostly solved. Since Swift&amp;rsquo;s release we&amp;rsquo;ve seen more than a dozen popular JSON mapping libraries pop up.&lt;/p&gt;

&lt;p&gt;However, most of the libraries I&amp;rsquo;ve seen so far deal with decoding individual types, not entire collections of heterogeneous types.&lt;/p&gt;

&lt;p&gt;We define how a JSON object representing a user can be mapped to a &lt;code&gt;User&lt;/code&gt; type, as in this example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Decodable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach requires the developer to know that a certain piece of JSON will ever only contain user objects.&lt;/p&gt;

&lt;p&gt;But how can we handle heterogeneous collections like the following one?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [
  {
      &amp;quot;type&amp;quot; : &amp;quot;user&amp;quot;,
      &amp;quot;name&amp;quot; : &amp;quot;test&amp;quot;,
      &amp;quot;age&amp;quot;  : 99
  },
  {
      &amp;quot;type&amp;quot;  : &amp;quot;car&amp;quot;,
      &amp;quot;color&amp;quot; : &amp;quot;green&amp;quot;
  },
  {
      &amp;quot;type&amp;quot; : &amp;quot;phone&amp;quot;,
      &amp;quot;model&amp;quot; : &amp;quot;iPhone&amp;quot;
  },
  {
      &amp;quot;type&amp;quot;  : &amp;quot;car&amp;quot;,
      &amp;quot;color&amp;quot; : &amp;quot;yellow&amp;quot;
  },
  {
      &amp;quot;type&amp;quot; : &amp;quot;phone&amp;quot;,
      &amp;quot;model&amp;quot; : &amp;quot;Anroid Device&amp;quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we have three different types: &amp;ldquo;user&amp;rdquo;, &amp;ldquo;car&amp;rdquo; and &amp;ldquo;phone&amp;rdquo;, that can occur anywhere throughout the JSON array. In order to use one of the JSON mapping libraries we would need to inspect each individual element in this list, identify it&amp;rsquo;s type, and then call the initializer of the respective Swift type.&lt;/p&gt;

&lt;h2 id=&#34;dynamically-mapping-json-entities-and-types:bf293cba123ff2f8b761ea95baf2f08c&#34;&gt;Dynamically Mapping JSON Entities and Types&lt;/h2&gt;

&lt;p&gt;In Objective-C it would be fairly easy to solve this problem automatically. We can rely on the Objective-C runtime to dynamically look up a class by its name and create the relevant instance for each entity we find in the JSON array.&lt;/p&gt;

&lt;p&gt;In Swift we cannot rely on these run time mechanisms, but we can still create a mapping between a JSON type and a Swift type.&lt;/p&gt;

&lt;p&gt;The first step is to introduce a protocol for all types that can be deserialized with our new mechanism. These types will need to fulfill two requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They need to be able to be initialized with a JSON entity&lt;/li&gt;
&lt;li&gt;They need to provide a &lt;code&gt;typeIdentifier&lt;/code&gt; string that we can use to match the &amp;ldquo;type&amp;rdquo; identifier from our JSON example above.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;rsquo;s what the protocol looks like in my example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Decodable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that I&amp;rsquo;m relying on the &lt;a href=&#34;https://github.com/Anviking/Decodable&#34;&gt;Decodable&lt;/a&gt; JSON mapping library to require the JSON initializer for me via the &lt;code&gt;Decodable&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;Each of the individual types will now implement this protocol. Here&amp;rsquo;s an example for the &lt;code&gt;User&lt;/code&gt; type:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This is mostly the regular JSON mapping code we&amp;rsquo;re familiar with. The only addition is the static &lt;code&gt;typeIdentifier&lt;/code&gt; member that tells us what this type is called in the JSON array.&lt;/p&gt;

&lt;p&gt;We also implement this protocol for the other types represented in the JSON array (&lt;code&gt;Car&lt;/code&gt;and  &lt;code&gt;Phone&lt;/code&gt;) but I will spare you the details of that&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now to the interesting part.&lt;/strong&gt; We need a component that can take the entire, heterogeneous,  array of JSON objects, can iterate over all of them and create the correct Swift instances based on the types it finds.&lt;/p&gt;

&lt;p&gt;For this example I&amp;rsquo;ve called the type &lt;code&gt;Deserializer&lt;/code&gt;. Here&amp;rsquo;s what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializer&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[:]&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Store all types in lookup table&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;typeIdentifier&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[[&lt;/span&gt;&lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;AnyObject&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]])&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Deserializable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[]&lt;/span&gt;

        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Iterate over each entity in the JSON array&lt;/span&gt;
        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;json&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Find metatype for this entity&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelMetatype&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelLookupTable&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;continue&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

            &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Call initializer on the metatype&lt;/span&gt;
            &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;modelMetatype&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;jsonEntity&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;parsedModels&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This type gets initialized with an array of model metatypes (&lt;code&gt;[Deserializable.Type]&lt;/code&gt;). This is necessary in order for the component to know which types can appear within the JSON array it will deserialize. Since we cannot dynamically look up types at runtime, we need to require a developer to manually provide all the types as part of the &lt;code&gt;Deserializer&lt;/code&gt; setup.&lt;/p&gt;

&lt;p&gt;We now store these types in a &lt;code&gt;modelLookupTable&lt;/code&gt;. This is a simple dictionary that maps from the types &lt;code&gt;typeIdentifier&lt;/code&gt; to the metatype itself. We will use this lookup table within the &lt;code&gt;deserialize&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deserialize&lt;/code&gt; method takes a JSON array and returns a heterogenous list of &lt;code&gt;Deserializable&lt;/code&gt; models. The implementation iterates over each entity in the JSON array. It extracts the &amp;ldquo;type&amp;rdquo; property from each entity and uses that string to find the relevant metatype in our &lt;code&gt;modelLookupTable&lt;/code&gt;. If we can find a Swift type that matches the JSON type identifier then we will proceed and try to &lt;code&gt;decode&lt;/code&gt; that type with the current &lt;code&gt;jsonEntity&lt;/code&gt;.
If the decoding works successfully, we add the instantiated type to the &lt;code&gt;parsedModels&lt;/code&gt; array.
At the end of the &lt;code&gt;deserialize&lt;/code&gt; function we return the list of decoded models.&lt;/p&gt;

&lt;p&gt;With all this in place, we can now create an instance of the deserializer and use it:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserializer&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Deserializer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Phone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;deserializer&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;jsonArray&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #3465a4&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The printed output will now be a list of the different instances that have been decoded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[User(name: &amp;quot;test&amp;quot;, age: 99), Car(color: &amp;quot;green&amp;quot;), Phone(model: &amp;quot;iPhone&amp;quot;), Car(color: &amp;quot;yellow&amp;quot;), Phone(model: &amp;quot;Anroid Device&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this concept is useful to some other Swift developers as well. You can find a playground with the full example code on &lt;a href=&#34;https://github.com/Ben-G/Decoding-Heterogeneous-Collections-Swift/blob/master/Decodable.playground/Contents.swift&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compile Time vs. Run Time Type Checking in Swift</title>
      <link>http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/</link>
      <pubDate>Wed, 13 Apr 2016 21:09:24 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/compile-time-vs-runtime-type-checking-swift/</guid>
      <description>

&lt;p&gt;At some point, when learning how to use Swift&amp;rsquo;s type system, it is important to understand that Swift (like many other languages) has two different forms of type checking: static and dynamic. Today I want to briefly discuss the difference between them and why headaches might arise when we try to combine them.&lt;/p&gt;

&lt;p&gt;Static type checking occurs at compile time and dynamic type checking happens at run time. Each of these two stages come with a different, partially incompatible, toolset.&lt;/p&gt;

&lt;h2 id=&#34;compile-time-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Compile Time Type Checking&lt;/h2&gt;

&lt;p&gt;Compile time type checking (or static type checking) operates on the Swift source code. The Swift compiler looks at explicitly stated and inferred types and ensures correctness of our type constraints.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a trivial example of static type checking:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: Cannot convert value of &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// type &amp;#39;String&amp;#39; to specified type &amp;#39;Int&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Based on the source code the type checker can decide that &lt;code&gt;text&lt;/code&gt; is not of type &lt;code&gt;Int&lt;/code&gt; - therefore it will raise a compile error.&lt;/p&gt;

&lt;p&gt;Swift&amp;rsquo;s static type checker can do a lot more powerful things, e.g. verifying generic constraints:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Require a type that is both human and provides a name&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// ...&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compiles fine:&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compiles fine:&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: cannot invoke &amp;#39;printHumanName&amp;#39; with an &lt;/span&gt;
&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// argument list of type &amp;#39;(Car)&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Car&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, again, all of the type checking occurs at compile time, solely based on the source code. The swift compiler can verify which function calls provide arguments that match the generic constraints of the &lt;code&gt;printHumanName&lt;/code&gt; function; and for ones that don&amp;rsquo;t it can emit a compile error.&lt;/p&gt;

&lt;p&gt;Since Swift&amp;rsquo;s static type system offers these powerful tools we try to verify as much as possible at compile time. However, in same cases run time type verification is necessary.&lt;/p&gt;

&lt;h2 id=&#34;run-time-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Run Time Type Checking&lt;/h2&gt;

&lt;p&gt;In some unfortunate cases relying on static type checking is not possible. The most common example is reading data from an outside resource (network, database, etc.). In such cases the data and thus the type information is not part of the source code, therefore we cannot prove to the static type checker that our data has a specific type (since the static type checker can only operate on type information it can extract from our source code).&lt;/p&gt;

&lt;p&gt;This means instead of being able to &lt;em&gt;define&lt;/em&gt; a type statically, we need to &lt;em&gt;verify&lt;/em&gt; a type dynamically at run time.&lt;/p&gt;

&lt;p&gt;When checking types at run time we rely on the type metadata stored within the memory of all Swift instances). The only tools we have available at this stage are the &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; keywords that use that metadata to confirm whether or not the instance is of a certain type or conforms to a certain protocol.&lt;/p&gt;

&lt;p&gt;This is what all the different Swift JSON mapping libraries do - they provide a convenient API for dynamically casting an unknown type to one that matches the type of a specified variable.&lt;/p&gt;

&lt;p&gt;In many scenarios dynamic type checking enables us to integrate types that are unknown at compile time with our statically checked Swift code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;takesHuman&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;human&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{}&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;takesHuman&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All we need to do in order to call the function with &lt;code&gt;unknownData&lt;/code&gt; is to cast it to the argument type of the function.&lt;/p&gt;

&lt;p&gt;However, if we try to use this approach to call a function that defines arguments as generic constraints, we run into issues&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;combining-dynamic-and-static-type-checking:7523e14371168feae6a10e37d5f0382f&#34;&gt;Combining Dynamic and Static Type Checking&lt;/h2&gt;

&lt;p&gt;Continuing the earlier &lt;code&gt;printHumanName&lt;/code&gt; example, let&amp;rsquo;s assume we have received data from a network request, and we need to call the &lt;code&gt;printHumanName&lt;/code&gt; method - if the dynamically detected type allows us to do that.&lt;/p&gt;

&lt;p&gt;We know that our type needs to conform to two different protocols in order to be eligible as argument for the &lt;code&gt;printHumanName&lt;/code&gt; function. So let&amp;rsquo;s check that requirement dynamically:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;protocol&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Compile Error: cannot invoke &amp;#39;printHumanName&amp;#39; &lt;/span&gt;
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// with an argument list of type &amp;#39;(protocol&amp;lt;HasName, HumanType&amp;gt;)&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The dynamic type check in the above example actually works correctly. The body of the &lt;code&gt;if let&lt;/code&gt; block is only executed for types that conform to our two expected protocols. However, we cannot convey this to the compiler. The compiler expects a &lt;em&gt;concrete&lt;/em&gt; type (one that has a fully specified type at compile time) that conforms to &lt;code&gt;HumanType&lt;/code&gt; and &lt;code&gt;HasName&lt;/code&gt;. All we can offer is a dynamically verified type.&lt;/p&gt;

&lt;p&gt;As of Swift 2.2, there is no way to get this to compile. At the end of this post I will briefly touch on which changes to Swift would likely be necessary to make this approach work.&lt;/p&gt;

&lt;p&gt;For now, we need a workaround.&lt;/p&gt;

&lt;h3 id=&#34;workarounds:7523e14371168feae6a10e37d5f0382f&#34;&gt;Workarounds&lt;/h3&gt;

&lt;p&gt;In the past I&amp;rsquo;ve used one of these two approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cast &lt;code&gt;unknowndData&lt;/code&gt; to a concrete type instead of casting it to a protocol&lt;/li&gt;
&lt;li&gt;Provide a second implementation of &lt;code&gt;printHumanName&lt;/code&gt; without generic constraints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concrete type solution would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;visitor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Visitor&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;visitor&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Not beautiful; but it might the best possible solution in some cases.&lt;/p&gt;

&lt;p&gt;A solution that involves providing a second implementation of &lt;code&gt;printHumanName&lt;/code&gt; might look like this (though there are many other possible solutions):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;_printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;Any&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hasName&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Put implementation code here&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Or call a third function that is shared between&lt;/span&gt;
        &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// both implementations of `printHumanName`&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #3465a4&#34;&gt;fatalError&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Provided Incorrect Type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;_printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In this second solution we have substituted the compile time constraints for a run time check. We cast the &lt;code&gt;Any&lt;/code&gt; type to &lt;code&gt;HasName&lt;/code&gt;, that allows us to access the relevant information for printing a name, and we include an &lt;code&gt;is&lt;/code&gt; check to verify that the type is one that conforms to &lt;code&gt;HumanType&lt;/code&gt;. We have established a dynamic type check that is equivalent to our generic constraint.&lt;/p&gt;

&lt;p&gt;This way we have offered a second implementation that will run code dynamically, if an arbitrary type matches our protocol requirements. In practice I would extract the actual functionality of this function into a third function that gets called from both &lt;code&gt;printHumanName&lt;/code&gt; and &lt;code&gt;_printHumanName&lt;/code&gt; - that way we can avoid duplicate code.&lt;/p&gt;

&lt;p&gt;The solution of the &amp;ldquo;type erased&amp;rdquo; function that accept an &lt;code&gt;Any&lt;/code&gt; argument isn&amp;rsquo;t really nice either; but in practice I have used similar approaches in cases where other code guarantees that the function will be called with the correct type, but there wasn&amp;rsquo;t a way of expressing that within Swift&amp;rsquo;s type system.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:7523e14371168feae6a10e37d5f0382f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The examples above are extremely simplified, but I hope they demonstrate the issues that can arise from differences in compile time and run time type checking. The key takeaways are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The static type checker runs at compile time, operates on the source code and uses type annotations and constraints for type checking&lt;/li&gt;
&lt;li&gt;The dynamic type checker uses run time information and casting for type checking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We cannot cast a an argument dynamically, in order call a function that has generic constraints&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is there potential for adding support for this to Swift? I think we would need the ability to dynamically create &amp;amp; use a constrained metatype. One could imagine a syntax that looks somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HumanType&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;HasName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;unknownData&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;printHumanName&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I know too little about the Swift compiler to know if this is feasible at all. I would assume that the relative cost of implementing this is huge, compared to the benefits it would provide to a very small part of the average Swift codebase.&lt;/p&gt;

&lt;p&gt;However, according to this &lt;a href=&#34;http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol&#34;&gt;Stack Overflow answer&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Catfish_Man&#34;&gt;David Smith&lt;/a&gt;, Swift currently checks generic constraints at run time (unless the compiler generates specialized copies of a function for performance optimizations). This means the information about generic constraints is still available at run time and, at least in theory, the idea of dynamically created constrained metatypes might be possible.&lt;/p&gt;

&lt;p&gt;For now it is helpful to understand the limitations of mixing static and dynamic type checking and to be aware of the possible workarounds.&lt;/p&gt;

&lt;p&gt;I cannot finish this post without a fabulous quote from &lt;a href=&#34;https://twitter.com/AirspeedSwift&#34;&gt;@AirspeedSwift&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Runtime type checking and compile-time generics are like steak and ice-cream – both are nice but mixing them is a bit weird.
- &lt;a href=&#34;http://stackoverflow.com/questions/28124684/swift-check-if-generic-type-conforms-to-protocol&#34;&gt;Source: StackOverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have corrections or general thoughts on this post, &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;I would love to hear from you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Addendum&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Russ Bishop (in the comments) and Joe Groff (on twitter) pointed out that the idea presented in this post is already being discussed as part of extending Swift&amp;rsquo;s support for generics. The twitter conversation also revealed that all compile time information is available at runtime, too. This opens the door for exciting extensions to Swift&amp;rsquo;s type system in future.&lt;/p&gt;

&lt;p&gt;The relevant conversation on twitter is here:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/xenadu02&#34;&gt;@xenadu02&lt;/a&gt; &lt;a href=&#34;https://twitter.com/benjaminencz&#34;&gt;@benjaminencz&lt;/a&gt; Everything in the static type system is in the runtime too. Making it all available&amp;#39;s a &amp;quot;simple matter of design&amp;quot;&lt;/p&gt;&amp;mdash; Joe Groff (@jckarter) &lt;a href=&#34;https://twitter.com/jckarter/status/720661475405094913&#34;&gt;April 14, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Squashing Commits With Git Rebase: A Very Quick Guide</title>
      <link>http://blog.benjamin-encz.de/post/squashing-commits-with-git-rebase-guide/</link>
      <pubDate>Thu, 24 Mar 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/squashing-commits-with-git-rebase-guide/</guid>
      <description>&lt;p&gt;Git&amp;rsquo;s interactive rebase is extremely useful for keeping a somewhat clear commit history. Here&amp;rsquo;s a very brief guide on how to squash multiple commits into a single one.&lt;/p&gt;

&lt;p&gt;Git rebase allows you to rewrite the history of a git repository. &lt;strong&gt;Yes, you are right, this can be incredibly dangerous, therefore don&amp;rsquo;t use this technique on branches that are shared with other developers&lt;/strong&gt;. To me rebase is most useful for preparing a branch that is about to be merged into the main branch of a project.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume our branch&amp;rsquo;s commit log is in the following state (printed by using &lt;code&gt;git log&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/1_initial_log.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have a bunch of intermediate commits for stages in which our code was not working as expected ending with a commit that indicates that our feature/bug fix is complete.&lt;/p&gt;

&lt;p&gt;Having all of these commits in the history of a project would mean that the commit log would quickly become very difficult to read.&lt;/p&gt;

&lt;p&gt;Git rebase allows us to turn these 3 intermediate commits into a single one.&lt;/p&gt;

&lt;p&gt;The following command will bring you into git&amp;rsquo;s interactive rebase mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are different ways to choose the range of commits you want to rebase. I mostly end up using &lt;code&gt;HEAD~N&lt;/code&gt; to rewrite the latest &lt;code&gt;N&lt;/code&gt; commits.&lt;/p&gt;

&lt;p&gt;This will bring up the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/2_git_rebase.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can now see the 3 commits you are about to rewrite. There are many different commands available, we are only going to use &lt;code&gt;squash&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Type an &lt;code&gt;s&lt;/code&gt; for &lt;code&gt;squash&lt;/code&gt; in front of the commits that you want to squash together. In our example we choose the final commit along with one intermediate commit to be squashed into the first intermediate commit (this will turn 3 commits into one):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/3_git_rebase_squash.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then close the text editor. Next, git will bring up a screen that will allow you to choose some details for each rebasing step. In our example we only have a single step - the one in which we merge 3 commits into one.&lt;/p&gt;

&lt;p&gt;Git will allow you to change the commit message for this new squashed commit. It starts out by showing you the messages of all commits it is about to squash:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/4_git_rebase_step.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can choose a new, descriptive, commit message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/5_git_rebase_new_message.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Close the text editor by saving, and you&amp;rsquo;re done. If you take a look at the new commit history via &lt;code&gt;git log&lt;/code&gt;, you should see the following output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/13528538/Blog/Rebase/6_git_rebase_done.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A clean commit history that is ready to merge!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Validated: A Swift μ-Library for Somewhat Dependent Types</title>
      <link>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</link>
      <pubDate>Thu, 25 Feb 2016 22:24:54 -0800</pubDate>
      
      <guid>http://blog.benjamin-encz.de/post/validated-a-swift-m-library-for-somewhat-dependent-types/</guid>
      <description>&lt;p&gt;Today I built &amp;amp; published a μ-library that makes it easier to leverage Swift&amp;rsquo;s type checking system for program verification: &lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;Validated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All Swift developers already use the type system to avoid basic type mismatches (e.g. passing an &lt;code&gt;Int&lt;/code&gt; where a &lt;code&gt;String&lt;/code&gt; is expected), this capability is built into the languge itself.&lt;/p&gt;

&lt;p&gt;A type system can however help verifying more than just the abscence of these simple errors. This requires that developers express constraints and semantics of their programs in types. &lt;strong&gt;&lt;code&gt;Validated&lt;/code&gt; provides a simple way to lift requirements about values into the type system.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example from the GitHub Readme:&lt;/p&gt;

&lt;p&gt;You might have a function in your code that only knows how to work with a &lt;code&gt;User&lt;/code&gt; value when the user is logged in. Usually you will implement this requirement in code &amp;amp; add documentation, but you don&amp;rsquo;t have an easy way of expressing this invariant in the type signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;/// Please ever only call with a logged-in user!
func performTaskWithUser(user: User) {
    precondition(
    	user.loggedIn,
    	&amp;quot;It is illegal to call this method with a logged out user!&amp;quot;
    )

	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Validated you can quickly create a new type that describes this requirement in the type system. That makes it impossible to call the function with a logged-out user and it makes the method signature express your invariant (instead of relying on documentation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func performTaskWithUser(user: LoggedInUser) {
	// ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In short: &lt;code&gt;Validated&lt;/code&gt; allows you to create new types, by taking existing types and adding validations to them. These new types can be used throughout your APIs to express expectations not only about types, but also about values.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very interested in hearing whether this is useful to you &amp;amp; how it could be improved!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Ben-G/Validated&#34;&gt;To learn how to use this you should head to GitHub&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>